exports.id = 359;
exports.ids = [359];
exports.modules = {

/***/ 4992:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "C": () => (/* binding */ CacheProvider),
/* harmony export */   "E": () => (/* binding */ Emotion),
/* harmony export */   "T": () => (/* binding */ ThemeContext),
/* harmony export */   "c": () => (/* binding */ createEmotionProps),
/* harmony export */   "h": () => (/* binding */ hasOwnProperty),
/* harmony export */   "i": () => (/* binding */ isBrowser),
/* harmony export */   "w": () => (/* binding */ withEmotionCache)
/* harmony export */ });
/* unused harmony exports _, a, b, u */
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _emotion_cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7355);
/* harmony import */ var _emotion_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5474);
/* harmony import */ var _emotion_serialize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6918);
/* harmony import */ var _emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(3429);









var isBrowser = typeof document !== 'undefined';
var hasOwnProperty = {}.hasOwnProperty;

var EmotionCacheContext = /* #__PURE__ */(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)( // we're doing this to avoid preconstruct's dead code elimination in this one case
// because this module is primarily intended for the browser and node
// but it's also required in react native and similar environments sometimes
// and we could have a special build just for that
// but this is much easier and the native packages
// might use a different theme context in the future anyway
typeof HTMLElement !== 'undefined' ? /* #__PURE__ */(0,_emotion_cache__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)({
  key: 'css'
}) : null);

if (false) {}

var CacheProvider = EmotionCacheContext.Provider;
var __unsafe_useEmotionCache = function useEmotionCache() {
  return useContext(EmotionCacheContext);
};

var withEmotionCache = function withEmotionCache(func) {
  // $FlowFixMe
  return /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (props, ref) {
    // the cache will never be null in the browser
    var cache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EmotionCacheContext);
    return func(props, cache, ref);
  });
};

if (!isBrowser) {
  withEmotionCache = function withEmotionCache(func) {
    return function (props) {
      var cache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EmotionCacheContext);

      if (cache === null) {
        // yes, we're potentially creating this on every render
        // it doesn't actually matter though since it's only on the server
        // so there will only every be a single render
        // that could change in the future because of suspense and etc. but for now,
        // this works and i don't want to optimise for a future thing that we aren't sure about
        cache = (0,_emotion_cache__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)({
          key: 'css'
        });
        return /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(EmotionCacheContext.Provider, {
          value: cache
        }, func(props, cache));
      } else {
        return func(props, cache);
      }
    };
  };
}

var ThemeContext = /* #__PURE__ */(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});

if (false) {}

var useTheme = function useTheme() {
  return useContext(ThemeContext);
};

var getTheme = function getTheme(outerTheme, theme) {
  if (typeof theme === 'function') {
    var mergedTheme = theme(outerTheme);

    if (false) {}

    return mergedTheme;
  }

  if (false) {}

  return _extends({}, outerTheme, theme);
};

var createCacheWithTheme = /* #__PURE__ */(/* unused pure expression or super */ null && (weakMemoize(function (outerTheme) {
  return weakMemoize(function (theme) {
    return getTheme(outerTheme, theme);
  });
})));
var ThemeProvider = function ThemeProvider(props) {
  var theme = useContext(ThemeContext);

  if (props.theme !== theme) {
    theme = createCacheWithTheme(theme)(props.theme);
  }

  return /*#__PURE__*/createElement(ThemeContext.Provider, {
    value: theme
  }, props.children);
};
function withTheme(Component) {
  var componentName = Component.displayName || Component.name || 'Component';

  var render = function render(props, ref) {
    var theme = useContext(ThemeContext);
    return /*#__PURE__*/createElement(Component, _extends({
      theme: theme,
      ref: ref
    }, props));
  }; // $FlowFixMe


  var WithTheme = /*#__PURE__*/forwardRef(render);
  WithTheme.displayName = "WithTheme(" + componentName + ")";
  return hoistNonReactStatics(WithTheme, Component);
}

var getLastPart = function getLastPart(functionName) {
  // The match may be something like 'Object.createEmotionProps' or
  // 'Loader.prototype.render'
  var parts = functionName.split('.');
  return parts[parts.length - 1];
};

var getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine(line) {
  // V8
  var match = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line);
  if (match) return getLastPart(match[1]); // Safari / Firefox

  match = /^([A-Za-z0-9$.]+)@/.exec(line);
  if (match) return getLastPart(match[1]);
  return undefined;
};

var internalReactFunctionNames = /* #__PURE__ */new Set(['renderWithHooks', 'processChild', 'finishClassComponent', 'renderToString']); // These identifiers come from error stacks, so they have to be valid JS
// identifiers, thus we only need to replace what is a valid character for JS,
// but not for CSS.

var sanitizeIdentifier = function sanitizeIdentifier(identifier) {
  return identifier.replace(/\$/g, '-');
};

var getLabelFromStackTrace = function getLabelFromStackTrace(stackTrace) {
  if (!stackTrace) return undefined;
  var lines = stackTrace.split('\n');

  for (var i = 0; i < lines.length; i++) {
    var functionName = getFunctionNameFromStackTraceLine(lines[i]); // The first line of V8 stack traces is just "Error"

    if (!functionName) continue; // If we reach one of these, we have gone too far and should quit

    if (internalReactFunctionNames.has(functionName)) break; // The component name is the first function in the stack that starts with an
    // uppercase letter

    if (/^[A-Z]/.test(functionName)) return sanitizeIdentifier(functionName);
  }

  return undefined;
};

var typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__';
var labelPropName = '__EMOTION_LABEL_PLEASE_DO_NOT_USE__';
var createEmotionProps = function createEmotionProps(type, props) {
  if (false) {}

  var newProps = {};

  for (var key in props) {
    if (hasOwnProperty.call(props, key)) {
      newProps[key] = props[key];
    }
  }

  newProps[typePropName] = type; // For performance, only call getLabelFromStackTrace in development and when
  // the label hasn't already been computed

  if (false) { var label; }

  return newProps;
};

var Insertion = function Insertion(_ref) {
  var cache = _ref.cache,
      serialized = _ref.serialized,
      isStringTag = _ref.isStringTag;
  (0,_emotion_utils__WEBPACK_IMPORTED_MODULE_2__/* .registerStyles */ .hC)(cache, serialized, isStringTag);
  var rules = (0,_emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_4__/* .useInsertionEffectAlwaysWithSyncFallback */ .L)(function () {
    return (0,_emotion_utils__WEBPACK_IMPORTED_MODULE_2__/* .insertStyles */ .My)(cache, serialized, isStringTag);
  });

  if (!isBrowser && rules !== undefined) {
    var _ref2;

    var serializedNames = serialized.name;
    var next = serialized.next;

    while (next !== undefined) {
      serializedNames += ' ' + next.name;
      next = next.next;
    }

    return /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
      __html: rules
    }, _ref2.nonce = cache.sheet.nonce, _ref2));
  }

  return null;
};

var Emotion = /* #__PURE__ */withEmotionCache(function (props, cache, ref) {
  var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works
  // not passing the registered cache to serializeStyles because it would
  // make certain babel optimisations not possible

  if (typeof cssProp === 'string' && cache.registered[cssProp] !== undefined) {
    cssProp = cache.registered[cssProp];
  }

  var WrappedComponent = props[typePropName];
  var registeredStyles = [cssProp];
  var className = '';

  if (typeof props.className === 'string') {
    className = (0,_emotion_utils__WEBPACK_IMPORTED_MODULE_2__/* .getRegisteredStyles */ .fp)(cache.registered, registeredStyles, props.className);
  } else if (props.className != null) {
    className = props.className + " ";
  }

  var serialized = (0,_emotion_serialize__WEBPACK_IMPORTED_MODULE_3__/* .serializeStyles */ .O)(registeredStyles, undefined, (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ThemeContext));

  if (false) { var labelFromStack; }

  className += cache.key + "-" + serialized.name;
  var newProps = {};

  for (var key in props) {
    if (hasOwnProperty.call(props, key) && key !== 'css' && key !== typePropName && ( true || 0)) {
      newProps[key] = props[key];
    }
  }

  newProps.ref = ref;
  newProps.className = className;
  return /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(Insertion, {
    cache: cache,
    serialized: serialized,
    isStringTag: typeof WrappedComponent === 'string'
  }), /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(WrappedComponent, newProps));
});

if (false) {}




/***/ }),

/***/ 446:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "iv": () => (/* binding */ css),
/* harmony export */   "xB": () => (/* binding */ Global)
/* harmony export */ });
/* unused harmony exports ClassNames, createElement, jsx, keyframes */
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _emotion_cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7355);
/* harmony import */ var _emotion_element_3838ba9e_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(4992);
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4495);
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3254);
/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _emotion_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5474);
/* harmony import */ var _emotion_serialize__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6918);
/* harmony import */ var _emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(3429);












var pkg = {
	name: "@emotion/react",
	version: "11.10.5",
	main: "dist/emotion-react.cjs.js",
	module: "dist/emotion-react.esm.js",
	browser: {
		"./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
	},
	exports: {
		".": {
			module: {
				worker: "./dist/emotion-react.worker.esm.js",
				browser: "./dist/emotion-react.browser.esm.js",
				"default": "./dist/emotion-react.esm.js"
			},
			"default": "./dist/emotion-react.cjs.js"
		},
		"./jsx-runtime": {
			module: {
				worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
				browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
				"default": "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
			},
			"default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
		},
		"./_isolated-hnrs": {
			module: {
				worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
				browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
				"default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
			},
			"default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
		},
		"./jsx-dev-runtime": {
			module: {
				worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
				browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
				"default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
			},
			"default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
		},
		"./package.json": "./package.json",
		"./types/css-prop": "./types/css-prop.d.ts",
		"./macro": "./macro.js"
	},
	types: "types/index.d.ts",
	files: [
		"src",
		"dist",
		"jsx-runtime",
		"jsx-dev-runtime",
		"_isolated-hnrs",
		"types/*.d.ts",
		"macro.js",
		"macro.d.ts",
		"macro.js.flow"
	],
	sideEffects: false,
	author: "Emotion Contributors",
	license: "MIT",
	scripts: {
		"test:typescript": "dtslint types"
	},
	dependencies: {
		"@babel/runtime": "^7.18.3",
		"@emotion/babel-plugin": "^11.10.5",
		"@emotion/cache": "^11.10.5",
		"@emotion/serialize": "^1.1.1",
		"@emotion/use-insertion-effect-with-fallbacks": "^1.0.0",
		"@emotion/utils": "^1.2.0",
		"@emotion/weak-memoize": "^0.3.0",
		"hoist-non-react-statics": "^3.3.1"
	},
	peerDependencies: {
		"@babel/core": "^7.0.0",
		react: ">=16.8.0"
	},
	peerDependenciesMeta: {
		"@babel/core": {
			optional: true
		},
		"@types/react": {
			optional: true
		}
	},
	devDependencies: {
		"@babel/core": "^7.18.5",
		"@definitelytyped/dtslint": "0.0.112",
		"@emotion/css": "11.10.5",
		"@emotion/css-prettifier": "1.1.1",
		"@emotion/server": "11.10.0",
		"@emotion/styled": "11.10.5",
		"html-tag-names": "^1.1.2",
		react: "16.14.0",
		"svg-tag-names": "^1.1.1",
		typescript: "^4.5.5"
	},
	repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
	publishConfig: {
		access: "public"
	},
	"umd:main": "dist/emotion-react.umd.min.js",
	preconstruct: {
		entrypoints: [
			"./index.js",
			"./jsx-runtime.js",
			"./jsx-dev-runtime.js",
			"./_isolated-hnrs.js"
		],
		umdName: "emotionReact",
		exports: {
			envConditions: [
				"browser",
				"worker"
			],
			extra: {
				"./types/css-prop": "./types/css-prop.d.ts",
				"./macro": "./macro.js"
			}
		}
	}
};

var jsx = function jsx(type, props) {
  var args = arguments;

  if (props == null || !hasOwnProperty.call(props, 'css')) {
    // $FlowFixMe
    return createElement.apply(undefined, args);
  }

  var argsLength = args.length;
  var createElementArgArray = new Array(argsLength);
  createElementArgArray[0] = Emotion;
  createElementArgArray[1] = createEmotionProps(type, props);

  for (var i = 2; i < argsLength; i++) {
    createElementArgArray[i] = args[i];
  } // $FlowFixMe


  return createElement.apply(null, createElementArgArray);
};

var warnedAboutCssPropForGlobal = false; // maintain place over rerenders.
// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
// initial client-side render from SSR, use place of hydrating tag

var Global = /* #__PURE__ */(0,_emotion_element_3838ba9e_esm_js__WEBPACK_IMPORTED_MODULE_7__.w)(function (props, cache) {
  if (false) {}

  var styles = props.styles;
  var serialized = (0,_emotion_serialize__WEBPACK_IMPORTED_MODULE_5__/* .serializeStyles */ .O)([styles], undefined, (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_emotion_element_3838ba9e_esm_js__WEBPACK_IMPORTED_MODULE_7__.T));

  if (!_emotion_element_3838ba9e_esm_js__WEBPACK_IMPORTED_MODULE_7__.i) {
    var _ref;

    var serializedNames = serialized.name;
    var serializedStyles = serialized.styles;
    var next = serialized.next;

    while (next !== undefined) {
      serializedNames += ' ' + next.name;
      serializedStyles += next.styles;
      next = next.next;
    }

    var shouldCache = cache.compat === true;
    var rules = cache.insert("", {
      name: serializedNames,
      styles: serializedStyles
    }, cache.sheet, shouldCache);

    if (shouldCache) {
      return null;
    }

    return /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)("style", (_ref = {}, _ref["data-emotion"] = cache.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
      __html: rules
    }, _ref.nonce = cache.sheet.nonce, _ref));
  } // yes, i know these hooks are used conditionally
  // but it is based on a constant that will never change at runtime
  // it's effectively like having two implementations and switching them out
  // so it's not actually breaking anything


  var sheetRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  (0,_emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_6__/* .useInsertionEffectWithLayoutFallback */ .j)(function () {
    var key = cache.key + "-global"; // use case of https://github.com/emotion-js/emotion/issues/2675

    var sheet = new cache.sheet.constructor({
      key: key,
      nonce: cache.sheet.nonce,
      container: cache.sheet.container,
      speedy: cache.sheet.isSpeedy
    });
    var rehydrating = false; // $FlowFixMe

    var node = document.querySelector("style[data-emotion=\"" + key + " " + serialized.name + "\"]");

    if (cache.sheet.tags.length) {
      sheet.before = cache.sheet.tags[0];
    }

    if (node !== null) {
      rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s

      node.setAttribute('data-emotion', key);
      sheet.hydrate([node]);
    }

    sheetRef.current = [sheet, rehydrating];
    return function () {
      sheet.flush();
    };
  }, [cache]);
  (0,_emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_6__/* .useInsertionEffectWithLayoutFallback */ .j)(function () {
    var sheetRefCurrent = sheetRef.current;
    var sheet = sheetRefCurrent[0],
        rehydrating = sheetRefCurrent[1];

    if (rehydrating) {
      sheetRefCurrent[1] = false;
      return;
    }

    if (serialized.next !== undefined) {
      // insert keyframes
      (0,_emotion_utils__WEBPACK_IMPORTED_MODULE_4__/* .insertStyles */ .My)(cache, serialized.next, true);
    }

    if (sheet.tags.length) {
      // if this doesn't exist then it will be null so the style element will be appended
      var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
      sheet.before = element;
      sheet.flush();
    }

    cache.insert("", serialized, sheet, false);
  }, [cache, serialized.name]);
  return null;
});

if (false) {}

function css() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return (0,_emotion_serialize__WEBPACK_IMPORTED_MODULE_5__/* .serializeStyles */ .O)(args);
}

var keyframes = function keyframes() {
  var insertable = css.apply(void 0, arguments);
  var name = "animation-" + insertable.name; // $FlowFixMe

  return {
    name: name,
    styles: "@keyframes " + name + "{" + insertable.styles + "}",
    anim: 1,
    toString: function toString() {
      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
    }
  };
};

var classnames = function classnames(args) {
  var len = args.length;
  var i = 0;
  var cls = '';

  for (; i < len; i++) {
    var arg = args[i];
    if (arg == null) continue;
    var toAdd = void 0;

    switch (typeof arg) {
      case 'boolean':
        break;

      case 'object':
        {
          if (Array.isArray(arg)) {
            toAdd = classnames(arg);
          } else {
            if (false) {}

            toAdd = '';

            for (var k in arg) {
              if (arg[k] && k) {
                toAdd && (toAdd += ' ');
                toAdd += k;
              }
            }
          }

          break;
        }

      default:
        {
          toAdd = arg;
        }
    }

    if (toAdd) {
      cls && (cls += ' ');
      cls += toAdd;
    }
  }

  return cls;
};

function merge(registered, css, className) {
  var registeredStyles = [];
  var rawClassName = getRegisteredStyles(registered, registeredStyles, className);

  if (registeredStyles.length < 2) {
    return className;
  }

  return rawClassName + css(registeredStyles);
}

var Insertion = function Insertion(_ref) {
  var cache = _ref.cache,
      serializedArr = _ref.serializedArr;
  var rules = useInsertionEffectAlwaysWithSyncFallback(function () {
    var rules = '';

    for (var i = 0; i < serializedArr.length; i++) {
      var res = insertStyles(cache, serializedArr[i], false);

      if (!isBrowser$1 && res !== undefined) {
        rules += res;
      }
    }

    if (!isBrowser$1) {
      return rules;
    }
  });

  if (!isBrowser$1 && rules.length !== 0) {
    var _ref2;

    return /*#__PURE__*/createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedArr.map(function (serialized) {
      return serialized.name;
    }).join(' '), _ref2.dangerouslySetInnerHTML = {
      __html: rules
    }, _ref2.nonce = cache.sheet.nonce, _ref2));
  }

  return null;
};

var ClassNames = /* #__PURE__ */(/* unused pure expression or super */ null && (withEmotionCache(function (props, cache) {
  var hasRendered = false;
  var serializedArr = [];

  var css = function css() {
    if (hasRendered && "production" !== 'production') {}

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var serialized = serializeStyles(args, cache.registered);
    serializedArr.push(serialized); // registration has to happen here as the result of this might get consumed by `cx`

    registerStyles(cache, serialized, false);
    return cache.key + "-" + serialized.name;
  };

  var cx = function cx() {
    if (hasRendered && "production" !== 'production') {}

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return merge(cache.registered, css, classnames(args));
  };

  var content = {
    css: css,
    cx: cx,
    theme: useContext(ThemeContext)
  };
  var ele = props.children(content);
  hasRendered = true;
  return /*#__PURE__*/createElement(Fragment, null, /*#__PURE__*/createElement(Insertion, {
    cache: cache,
    serializedArr: serializedArr
  }), ele);
})));

if (false) {}

if (false) { var globalKey, globalContext, isTestEnv, isBrowser; }




/***/ }),

/***/ 3989:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BX": () => (/* binding */ jsxs),
/* harmony export */   "HY": () => (/* binding */ Fragment),
/* harmony export */   "tZ": () => (/* binding */ jsx)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _emotion_cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7355);
/* harmony import */ var _dist_emotion_element_3838ba9e_esm_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(4992);
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4495);
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3254);
/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _emotion_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5474);
/* harmony import */ var _emotion_serialize__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6918);
/* harmony import */ var _emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(3429);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(6786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__);












var Fragment = react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.Fragment;
function jsx(type, props, key) {
  if (!_dist_emotion_element_3838ba9e_esm_js__WEBPACK_IMPORTED_MODULE_8__.h.call(props, 'css')) {
    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(type, props, key);
  }

  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_dist_emotion_element_3838ba9e_esm_js__WEBPACK_IMPORTED_MODULE_8__.E, (0,_dist_emotion_element_3838ba9e_esm_js__WEBPACK_IMPORTED_MODULE_8__.c)(type, props), key);
}
function jsxs(type, props, key) {
  if (!_dist_emotion_element_3838ba9e_esm_js__WEBPACK_IMPORTED_MODULE_8__.h.call(props, 'css')) {
    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(type, props, key);
  }

  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(_dist_emotion_element_3838ba9e_esm_js__WEBPACK_IMPORTED_MODULE_8__.E, (0,_dist_emotion_element_3838ba9e_esm_js__WEBPACK_IMPORTED_MODULE_8__.c)(type, props), key);
}




/***/ }),

/***/ 3429:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "L": () => (/* binding */ useInsertionEffectAlwaysWithSyncFallback),
/* harmony export */   "j": () => (/* binding */ useInsertionEffectWithLayoutFallback)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);



var isBrowser = typeof document !== 'undefined';

var syncFallback = function syncFallback(create) {
  return create();
};

var useInsertionEffect = react__WEBPACK_IMPORTED_MODULE_0__['useInsertion' + 'Effect'] ? react__WEBPACK_IMPORTED_MODULE_0__['useInsertion' + 'Effect'] : false;
var useInsertionEffectAlwaysWithSyncFallback = !isBrowser ? syncFallback : useInsertionEffect || syncFallback;
var useInsertionEffectWithLayoutFallback = useInsertionEffect || react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect;




/***/ }),

/***/ 7355:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => (/* binding */ emotion_cache_esm)
});

;// CONCATENATED MODULE: ../../.yarn/cache/@emotion-sheet-npm-1.2.1-ede8a680b2-ce78763588.zip/node_modules/@emotion/sheet/dist/emotion-sheet.esm.js
/*

Based off glamor's StyleSheet, thanks Sunil ❤️

high performance StyleSheet for css-in-js systems

- uses multiple style tags behind the scenes for millions of rules
- uses `insertRule` for appending in production for *much* faster performance

// usage

import { StyleSheet } from '@emotion/sheet'

let styleSheet = new StyleSheet({ key: '', container: document.head })

styleSheet.insert('#box { border: 1px solid red; }')
- appends a css rule into the stylesheet

styleSheet.flush()
- empties the stylesheet of all its contents

*/
// $FlowFixMe
function sheetForTag(tag) {
  if (tag.sheet) {
    // $FlowFixMe
    return tag.sheet;
  } // this weirdness brought to you by firefox

  /* istanbul ignore next */


  for (var i = 0; i < document.styleSheets.length; i++) {
    if (document.styleSheets[i].ownerNode === tag) {
      // $FlowFixMe
      return document.styleSheets[i];
    }
  }
}

function createStyleElement(options) {
  var tag = document.createElement('style');
  tag.setAttribute('data-emotion', options.key);

  if (options.nonce !== undefined) {
    tag.setAttribute('nonce', options.nonce);
  }

  tag.appendChild(document.createTextNode(''));
  tag.setAttribute('data-s', '');
  return tag;
}

var StyleSheet = /*#__PURE__*/function () {
  // Using Node instead of HTMLElement since container may be a ShadowRoot
  function StyleSheet(options) {
    var _this = this;

    this._insertTag = function (tag) {
      var before;

      if (_this.tags.length === 0) {
        if (_this.insertionPoint) {
          before = _this.insertionPoint.nextSibling;
        } else if (_this.prepend) {
          before = _this.container.firstChild;
        } else {
          before = _this.before;
        }
      } else {
        before = _this.tags[_this.tags.length - 1].nextSibling;
      }

      _this.container.insertBefore(tag, before);

      _this.tags.push(tag);
    };

    this.isSpeedy = options.speedy === undefined ? "production" === 'production' : options.speedy;
    this.tags = [];
    this.ctr = 0;
    this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

    this.key = options.key;
    this.container = options.container;
    this.prepend = options.prepend;
    this.insertionPoint = options.insertionPoint;
    this.before = null;
  }

  var _proto = StyleSheet.prototype;

  _proto.hydrate = function hydrate(nodes) {
    nodes.forEach(this._insertTag);
  };

  _proto.insert = function insert(rule) {
    // the max length is how many rules we have per style tag, it's 65000 in speedy mode
    // it's 1 in dev because we insert source maps that map a single rule to a location
    // and you can only have one source map per style tag
    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
      this._insertTag(createStyleElement(this));
    }

    var tag = this.tags[this.tags.length - 1];

    if (false) { var isImportRule; }

    if (this.isSpeedy) {
      var sheet = sheetForTag(tag);

      try {
        // this is the ultrafast version, works across browsers
        // the big drawback is that the css won't be editable in devtools
        sheet.insertRule(rule, sheet.cssRules.length);
      } catch (e) {
        if (false) {}
      }
    } else {
      tag.appendChild(document.createTextNode(rule));
    }

    this.ctr++;
  };

  _proto.flush = function flush() {
    // $FlowFixMe
    this.tags.forEach(function (tag) {
      return tag.parentNode && tag.parentNode.removeChild(tag);
    });
    this.tags = [];
    this.ctr = 0;

    if (false) {}
  };

  return StyleSheet;
}();



;// CONCATENATED MODULE: ../../.yarn/cache/stylis-npm-4.1.3-c3e2662f97-d04dbffcb9.zip/node_modules/stylis/src/Utility.js
/**
 * @param {number}
 * @return {number}
 */
var abs = Math.abs

/**
 * @param {number}
 * @return {string}
 */
var Utility_from = String.fromCharCode

/**
 * @param {object}
 * @return {object}
 */
var Utility_assign = Object.assign

/**
 * @param {string} value
 * @param {number} length
 * @return {number}
 */
function hash (value, length) {
	return Utility_charat(value, 0) ^ 45 ? (((((((length << 2) ^ Utility_charat(value, 0)) << 2) ^ Utility_charat(value, 1)) << 2) ^ Utility_charat(value, 2)) << 2) ^ Utility_charat(value, 3) : 0
}

/**
 * @param {string} value
 * @return {string}
 */
function trim (value) {
	return value.trim()
}

/**
 * @param {string} value
 * @param {RegExp} pattern
 * @return {string?}
 */
function Utility_match (value, pattern) {
	return (value = pattern.exec(value)) ? value[0] : value
}

/**
 * @param {string} value
 * @param {(string|RegExp)} pattern
 * @param {string} replacement
 * @return {string}
 */
function Utility_replace (value, pattern, replacement) {
	return value.replace(pattern, replacement)
}

/**
 * @param {string} value
 * @param {string} search
 * @return {number}
 */
function indexof (value, search) {
	return value.indexOf(search)
}

/**
 * @param {string} value
 * @param {number} index
 * @return {number}
 */
function Utility_charat (value, index) {
	return value.charCodeAt(index) | 0
}

/**
 * @param {string} value
 * @param {number} begin
 * @param {number} end
 * @return {string}
 */
function Utility_substr (value, begin, end) {
	return value.slice(begin, end)
}

/**
 * @param {string} value
 * @return {number}
 */
function Utility_strlen (value) {
	return value.length
}

/**
 * @param {any[]} value
 * @return {number}
 */
function Utility_sizeof (value) {
	return value.length
}

/**
 * @param {any} value
 * @param {any[]} array
 * @return {any}
 */
function Utility_append (value, array) {
	return array.push(value), value
}

/**
 * @param {string[]} array
 * @param {function} callback
 * @return {string}
 */
function Utility_combine (array, callback) {
	return array.map(callback).join('')
}

;// CONCATENATED MODULE: ../../.yarn/cache/stylis-npm-4.1.3-c3e2662f97-d04dbffcb9.zip/node_modules/stylis/src/Tokenizer.js


var line = 1
var column = 1
var Tokenizer_length = 0
var position = 0
var character = 0
var characters = ''

/**
 * @param {string} value
 * @param {object | null} root
 * @param {object | null} parent
 * @param {string} type
 * @param {string[] | string} props
 * @param {object[] | string} children
 * @param {number} length
 */
function node (value, root, parent, type, props, children, length) {
	return {value: value, root: root, parent: parent, type: type, props: props, children: children, line: line, column: column, length: length, return: ''}
}

/**
 * @param {object} root
 * @param {object} props
 * @return {object}
 */
function Tokenizer_copy (root, props) {
	return Utility_assign(node('', null, null, '', null, null, 0), root, {length: -root.length}, props)
}

/**
 * @return {number}
 */
function Tokenizer_char () {
	return character
}

/**
 * @return {number}
 */
function prev () {
	character = position > 0 ? Utility_charat(characters, --position) : 0

	if (column--, character === 10)
		column = 1, line--

	return character
}

/**
 * @return {number}
 */
function next () {
	character = position < Tokenizer_length ? Utility_charat(characters, position++) : 0

	if (column++, character === 10)
		column = 1, line++

	return character
}

/**
 * @return {number}
 */
function peek () {
	return Utility_charat(characters, position)
}

/**
 * @return {number}
 */
function caret () {
	return position
}

/**
 * @param {number} begin
 * @param {number} end
 * @return {string}
 */
function slice (begin, end) {
	return Utility_substr(characters, begin, end)
}

/**
 * @param {number} type
 * @return {number}
 */
function token (type) {
	switch (type) {
		// \0 \t \n \r \s whitespace token
		case 0: case 9: case 10: case 13: case 32:
			return 5
		// ! + , / > @ ~ isolate token
		case 33: case 43: case 44: case 47: case 62: case 64: case 126:
		// ; { } breakpoint token
		case 59: case 123: case 125:
			return 4
		// : accompanied token
		case 58:
			return 3
		// " ' ( [ opening delimit token
		case 34: case 39: case 40: case 91:
			return 2
		// ) ] closing delimit token
		case 41: case 93:
			return 1
	}

	return 0
}

/**
 * @param {string} value
 * @return {any[]}
 */
function alloc (value) {
	return line = column = 1, Tokenizer_length = Utility_strlen(characters = value), position = 0, []
}

/**
 * @param {any} value
 * @return {any}
 */
function dealloc (value) {
	return characters = '', value
}

/**
 * @param {number} type
 * @return {string}
 */
function delimit (type) {
	return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)))
}

/**
 * @param {string} value
 * @return {string[]}
 */
function Tokenizer_tokenize (value) {
	return dealloc(tokenizer(alloc(value)))
}

/**
 * @param {number} type
 * @return {string}
 */
function whitespace (type) {
	while (character = peek())
		if (character < 33)
			next()
		else
			break

	return token(type) > 2 || token(character) > 3 ? '' : ' '
}

/**
 * @param {string[]} children
 * @return {string[]}
 */
function tokenizer (children) {
	while (next())
		switch (token(character)) {
			case 0: append(identifier(position - 1), children)
				break
			case 2: append(delimit(character), children)
				break
			default: append(from(character), children)
		}

	return children
}

/**
 * @param {number} index
 * @param {number} count
 * @return {string}
 */
function escaping (index, count) {
	while (--count && next())
		// not 0-9 A-F a-f
		if (character < 48 || character > 102 || (character > 57 && character < 65) || (character > 70 && character < 97))
			break

	return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32))
}

/**
 * @param {number} type
 * @return {number}
 */
function delimiter (type) {
	while (next())
		switch (character) {
			// ] ) " '
			case type:
				return position
			// " '
			case 34: case 39:
				if (type !== 34 && type !== 39)
					delimiter(character)
				break
			// (
			case 40:
				if (type === 41)
					delimiter(type)
				break
			// \
			case 92:
				next()
				break
		}

	return position
}

/**
 * @param {number} type
 * @param {number} index
 * @return {number}
 */
function commenter (type, index) {
	while (next())
		// //
		if (type + character === 47 + 10)
			break
		// /*
		else if (type + character === 42 + 42 && peek() === 47)
			break

	return '/*' + slice(index, position - 1) + '*' + Utility_from(type === 47 ? type : next())
}

/**
 * @param {number} index
 * @return {string}
 */
function identifier (index) {
	while (!token(peek()))
		next()

	return slice(index, position)
}

;// CONCATENATED MODULE: ../../.yarn/cache/stylis-npm-4.1.3-c3e2662f97-d04dbffcb9.zip/node_modules/stylis/src/Enum.js
var Enum_MS = '-ms-'
var Enum_MOZ = '-moz-'
var Enum_WEBKIT = '-webkit-'

var COMMENT = 'comm'
var Enum_RULESET = 'rule'
var Enum_DECLARATION = 'decl'

var PAGE = '@page'
var MEDIA = '@media'
var IMPORT = '@import'
var CHARSET = '@charset'
var VIEWPORT = '@viewport'
var SUPPORTS = '@supports'
var DOCUMENT = '@document'
var NAMESPACE = '@namespace'
var Enum_KEYFRAMES = '@keyframes'
var FONT_FACE = '@font-face'
var COUNTER_STYLE = '@counter-style'
var FONT_FEATURE_VALUES = '@font-feature-values'

;// CONCATENATED MODULE: ../../.yarn/cache/stylis-npm-4.1.3-c3e2662f97-d04dbffcb9.zip/node_modules/stylis/src/Serializer.js



/**
 * @param {object[]} children
 * @param {function} callback
 * @return {string}
 */
function Serializer_serialize (children, callback) {
	var output = ''
	var length = Utility_sizeof(children)

	for (var i = 0; i < length; i++)
		output += callback(children[i], i, children, callback) || ''

	return output
}

/**
 * @param {object} element
 * @param {number} index
 * @param {object[]} children
 * @param {function} callback
 * @return {string}
 */
function stringify (element, index, children, callback) {
	switch (element.type) {
		case IMPORT: case Enum_DECLARATION: return element.return = element.return || element.value
		case COMMENT: return ''
		case Enum_KEYFRAMES: return element.return = element.value + '{' + Serializer_serialize(element.children, callback) + '}'
		case Enum_RULESET: element.value = element.props.join(',')
	}

	return Utility_strlen(children = Serializer_serialize(element.children, callback)) ? element.return = element.value + '{' + children + '}' : ''
}

;// CONCATENATED MODULE: ../../.yarn/cache/stylis-npm-4.1.3-c3e2662f97-d04dbffcb9.zip/node_modules/stylis/src/Middleware.js






/**
 * @param {function[]} collection
 * @return {function}
 */
function middleware (collection) {
	var length = Utility_sizeof(collection)

	return function (element, index, children, callback) {
		var output = ''

		for (var i = 0; i < length; i++)
			output += collection[i](element, index, children, callback) || ''

		return output
	}
}

/**
 * @param {function} callback
 * @return {function}
 */
function rulesheet (callback) {
	return function (element) {
		if (!element.root)
			if (element = element.return)
				callback(element)
	}
}

/**
 * @param {object} element
 * @param {number} index
 * @param {object[]} children
 * @param {function} callback
 */
function prefixer (element, index, children, callback) {
	if (element.length > -1)
		if (!element.return)
			switch (element.type) {
				case DECLARATION: element.return = prefix(element.value, element.length, children)
					return
				case KEYFRAMES:
					return serialize([copy(element, {value: replace(element.value, '@', '@' + WEBKIT)})], callback)
				case RULESET:
					if (element.length)
						return combine(element.props, function (value) {
							switch (match(value, /(::plac\w+|:read-\w+)/)) {
								// :read-(only|write)
								case ':read-only': case ':read-write':
									return serialize([copy(element, {props: [replace(value, /:(read-\w+)/, ':' + MOZ + '$1')]})], callback)
								// :placeholder
								case '::placeholder':
									return serialize([
										copy(element, {props: [replace(value, /:(plac\w+)/, ':' + WEBKIT + 'input-$1')]}),
										copy(element, {props: [replace(value, /:(plac\w+)/, ':' + MOZ + '$1')]}),
										copy(element, {props: [replace(value, /:(plac\w+)/, MS + 'input-$1')]})
									], callback)
							}

							return ''
						})
			}
}

/**
 * @param {object} element
 * @param {number} index
 * @param {object[]} children
 */
function namespace (element) {
	switch (element.type) {
		case RULESET:
			element.props = element.props.map(function (value) {
				return combine(tokenize(value), function (value, index, children) {
					switch (charat(value, 0)) {
						// \f
						case 12:
							return substr(value, 1, strlen(value))
						// \0 ( + > ~
						case 0: case 40: case 43: case 62: case 126:
							return value
						// :
						case 58:
							if (children[++index] === 'global')
								children[index] = '', children[++index] = '\f' + substr(children[index], index = 1, -1)
						// \s
						case 32:
							return index === 1 ? '' : value
						default:
							switch (index) {
								case 0: element = value
									return sizeof(children) > 1 ? '' : value
								case index = sizeof(children) - 1: case 2:
									return index === 2 ? value + element + element : value + element
								default:
									return value
							}
					}
				})
			})
	}
}

;// CONCATENATED MODULE: ../../.yarn/cache/stylis-npm-4.1.3-c3e2662f97-d04dbffcb9.zip/node_modules/stylis/src/Parser.js




/**
 * @param {string} value
 * @return {object[]}
 */
function compile (value) {
	return dealloc(parse('', null, null, null, [''], value = alloc(value), 0, [0], value))
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {string[]} rule
 * @param {string[]} rules
 * @param {string[]} rulesets
 * @param {number[]} pseudo
 * @param {number[]} points
 * @param {string[]} declarations
 * @return {object}
 */
function parse (value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
	var index = 0
	var offset = 0
	var length = pseudo
	var atrule = 0
	var property = 0
	var previous = 0
	var variable = 1
	var scanning = 1
	var ampersand = 1
	var character = 0
	var type = ''
	var props = rules
	var children = rulesets
	var reference = rule
	var characters = type

	while (scanning)
		switch (previous = character, character = next()) {
			// (
			case 40:
				if (previous != 108 && Utility_charat(characters, length - 1) == 58) {
					if (indexof(characters += Utility_replace(delimit(character), '&', '&\f'), '&\f') != -1)
						ampersand = -1
					break
				}
			// " ' [
			case 34: case 39: case 91:
				characters += delimit(character)
				break
			// \t \n \r \s
			case 9: case 10: case 13: case 32:
				characters += whitespace(previous)
				break
			// \
			case 92:
				characters += escaping(caret() - 1, 7)
				continue
			// /
			case 47:
				switch (peek()) {
					case 42: case 47:
						Utility_append(comment(commenter(next(), caret()), root, parent), declarations)
						break
					default:
						characters += '/'
				}
				break
			// {
			case 123 * variable:
				points[index++] = Utility_strlen(characters) * ampersand
			// } ; \0
			case 125 * variable: case 59: case 0:
				switch (character) {
					// \0 }
					case 0: case 125: scanning = 0
					// ;
					case 59 + offset:
						if (property > 0 && (Utility_strlen(characters) - length))
							Utility_append(property > 32 ? declaration(characters + ';', rule, parent, length - 1) : declaration(Utility_replace(characters, ' ', '') + ';', rule, parent, length - 2), declarations)
						break
					// @ ;
					case 59: characters += ';'
					// { rule/at-rule
					default:
						Utility_append(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length), rulesets)

						if (character === 123)
							if (offset === 0)
								parse(characters, root, reference, reference, props, rulesets, length, points, children)
							else
								switch (atrule === 99 && Utility_charat(characters, 3) === 110 ? 100 : atrule) {
									// d m s
									case 100: case 109: case 115:
										parse(value, reference, reference, rule && Utility_append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length), children), rules, children, length, points, rule ? props : children)
										break
									default:
										parse(characters, reference, reference, reference, [''], children, 0, points, children)
								}
				}

				index = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo
				break
			// :
			case 58:
				length = 1 + Utility_strlen(characters), property = previous
			default:
				if (variable < 1)
					if (character == 123)
						--variable
					else if (character == 125 && variable++ == 0 && prev() == 125)
						continue

				switch (characters += Utility_from(character), character * variable) {
					// &
					case 38:
						ampersand = offset > 0 ? 1 : (characters += '\f', -1)
						break
					// ,
					case 44:
						points[index++] = (Utility_strlen(characters) - 1) * ampersand, ampersand = 1
						break
					// @
					case 64:
						// -
						if (peek() === 45)
							characters += delimit(next())

						atrule = peek(), offset = length = Utility_strlen(type = characters += identifier(caret())), character++
						break
					// -
					case 45:
						if (previous === 45 && Utility_strlen(characters) == 2)
							variable = 0
				}
		}

	return rulesets
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {number} index
 * @param {number} offset
 * @param {string[]} rules
 * @param {number[]} points
 * @param {string} type
 * @param {string[]} props
 * @param {string[]} children
 * @param {number} length
 * @return {object}
 */
function ruleset (value, root, parent, index, offset, rules, points, type, props, children, length) {
	var post = offset - 1
	var rule = offset === 0 ? rules : ['']
	var size = Utility_sizeof(rule)

	for (var i = 0, j = 0, k = 0; i < index; ++i)
		for (var x = 0, y = Utility_substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)
			if (z = trim(j > 0 ? rule[x] + ' ' + y : Utility_replace(y, /&\f/g, rule[x])))
				props[k++] = z

	return node(value, root, parent, offset === 0 ? Enum_RULESET : type, props, children, length)
}

/**
 * @param {number} value
 * @param {object} root
 * @param {object?} parent
 * @return {object}
 */
function comment (value, root, parent) {
	return node(value, root, parent, COMMENT, Utility_from(Tokenizer_char()), Utility_substr(value, 2, -2), 0)
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {number} length
 * @return {object}
 */
function declaration (value, root, parent, length) {
	return node(value, root, parent, Enum_DECLARATION, Utility_substr(value, 0, length), Utility_substr(value, length + 1, -1), length)
}

;// CONCATENATED MODULE: ../../.yarn/cache/@emotion-weak-memoize-npm-0.3.0-705bdd075b-f43ef4c8b7.zip/node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js
var weakMemoize = function weakMemoize(func) {
  // $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps
  var cache = new WeakMap();
  return function (arg) {
    if (cache.has(arg)) {
      // $FlowFixMe
      return cache.get(arg);
    }

    var ret = func(arg);
    cache.set(arg, ret);
    return ret;
  };
};

/* harmony default export */ const emotion_weak_memoize_esm = (weakMemoize);

// EXTERNAL MODULE: ../../.yarn/cache/@emotion-memoize-npm-0.8.0-c5dd451828-c87bb110b8.zip/node_modules/@emotion/memoize/dist/emotion-memoize.esm.js
var emotion_memoize_esm = __webpack_require__(2102);
;// CONCATENATED MODULE: ../../.yarn/cache/@emotion-cache-npm-11.10.5-e5bc83f178-1dd2d9af2d.zip/node_modules/@emotion/cache/dist/emotion-cache.esm.js





var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
  var previous = 0;
  var character = 0;

  while (true) {
    previous = character;
    character = peek(); // &\f

    if (previous === 38 && character === 12) {
      points[index] = 1;
    }

    if (token(character)) {
      break;
    }

    next();
  }

  return slice(begin, position);
};

var toRules = function toRules(parsed, points) {
  // pretend we've started with a comma
  var index = -1;
  var character = 44;

  do {
    switch (token(character)) {
      case 0:
        // &\f
        if (character === 38 && peek() === 12) {
          // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
          // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
          // and when it should just concatenate the outer and inner selectors
          // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
          points[index] = 1;
        }

        parsed[index] += identifierWithPointTracking(position - 1, points, index);
        break;

      case 2:
        parsed[index] += delimit(character);
        break;

      case 4:
        // comma
        if (character === 44) {
          // colon
          parsed[++index] = peek() === 58 ? '&\f' : '';
          points[index] = parsed[index].length;
          break;
        }

      // fallthrough

      default:
        parsed[index] += Utility_from(character);
    }
  } while (character = next());

  return parsed;
};

var getRules = function getRules(value, points) {
  return dealloc(toRules(alloc(value), points));
}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11


var fixedElements = /* #__PURE__ */new WeakMap();
var compat = function compat(element) {
  if (element.type !== 'rule' || !element.parent || // positive .length indicates that this rule contains pseudo
  // negative .length indicates that this rule has been already prefixed
  element.length < 1) {
    return;
  }

  var value = element.value,
      parent = element.parent;
  var isImplicitRule = element.column === parent.column && element.line === parent.line;

  while (parent.type !== 'rule') {
    parent = parent.parent;
    if (!parent) return;
  } // short-circuit for the simplest case


  if (element.props.length === 1 && value.charCodeAt(0) !== 58
  /* colon */
  && !fixedElements.get(parent)) {
    return;
  } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
  // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"


  if (isImplicitRule) {
    return;
  }

  fixedElements.set(element, true);
  var points = [];
  var rules = getRules(value, points);
  var parentRules = parent.props;

  for (var i = 0, k = 0; i < rules.length; i++) {
    for (var j = 0; j < parentRules.length; j++, k++) {
      element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
    }
  }
};
var removeLabel = function removeLabel(element) {
  if (element.type === 'decl') {
    var value = element.value;

    if ( // charcode for l
    value.charCodeAt(0) === 108 && // charcode for b
    value.charCodeAt(2) === 98) {
      // this ignores label
      element["return"] = '';
      element.value = '';
    }
  }
};
var ignoreFlag = 'emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason';

var isIgnoringComment = function isIgnoringComment(element) {
  return element.type === 'comm' && element.children.indexOf(ignoreFlag) > -1;
};

var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm(cache) {
  return function (element, index, children) {
    if (element.type !== 'rule' || cache.compat) return;
    var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);

    if (unsafePseudoClasses) {
      var isNested = element.parent === children[0]; // in nested rules comments become children of the "auto-inserted" rule
      //
      // considering this input:
      // .a {
      //   .b /* comm */ {}
      //   color: hotpink;
      // }
      // we get output corresponding to this:
      // .a {
      //   & {
      //     /* comm */
      //     color: hotpink;
      //   }
      //   .b {}
      // }

      var commentContainer = isNested ? children[0].children : // global rule at the root level
      children;

      for (var i = commentContainer.length - 1; i >= 0; i--) {
        var node = commentContainer[i];

        if (node.line < element.line) {
          break;
        } // it is quite weird but comments are *usually* put at `column: element.column - 1`
        // so we seek *from the end* for the node that is earlier than the rule's `element` and check that
        // this will also match inputs like this:
        // .a {
        //   /* comm */
        //   .b {}
        // }
        //
        // but that is fine
        //
        // it would be the easiest to change the placement of the comment to be the first child of the rule:
        // .a {
        //   .b { /* comm */ }
        // }
        // with such inputs we wouldn't have to search for the comment at all
        // TODO: consider changing this comment placement in the next major version


        if (node.column < element.column) {
          if (isIgnoringComment(node)) {
            return;
          }

          break;
        }
      }

      unsafePseudoClasses.forEach(function (unsafePseudoClass) {
        console.error("The pseudo class \"" + unsafePseudoClass + "\" is potentially unsafe when doing server-side rendering. Try changing it to \"" + unsafePseudoClass.split('-child')[0] + "-of-type\".");
      });
    }
  };
};

var isImportRule = function isImportRule(element) {
  return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
};

var isPrependedWithRegularRules = function isPrependedWithRegularRules(index, children) {
  for (var i = index - 1; i >= 0; i--) {
    if (!isImportRule(children[i])) {
      return true;
    }
  }

  return false;
}; // use this to remove incorrect elements from further processing
// so they don't get handed to the `sheet` (or anything else)
// as that could potentially lead to additional logs which in turn could be overhelming to the user


var nullifyElement = function nullifyElement(element) {
  element.type = '';
  element.value = '';
  element["return"] = '';
  element.children = '';
  element.props = '';
};

var incorrectImportAlarm = function incorrectImportAlarm(element, index, children) {
  if (!isImportRule(element)) {
    return;
  }

  if (element.parent) {
    console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
    nullifyElement(element);
  } else if (isPrependedWithRegularRules(index, children)) {
    console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
    nullifyElement(element);
  }
};

/* eslint-disable no-fallthrough */

function emotion_cache_esm_prefix(value, length) {
  switch (hash(value, length)) {
    // color-adjust
    case 5103:
      return Enum_WEBKIT + 'print-' + value + value;
    // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)

    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921: // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break

    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005: // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,

    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855: // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)

    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return Enum_WEBKIT + value + value;
    // appearance, user-select, transform, hyphens, text-size-adjust

    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return Enum_WEBKIT + value + Enum_MOZ + value + Enum_MS + value + value;
    // flex, flex-direction

    case 6828:
    case 4268:
      return Enum_WEBKIT + value + Enum_MS + value + value;
    // order

    case 6165:
      return Enum_WEBKIT + value + Enum_MS + 'flex-' + value + value;
    // align-items

    case 5187:
      return Enum_WEBKIT + value + Utility_replace(value, /(\w+).+(:[^]+)/, Enum_WEBKIT + 'box-$1$2' + Enum_MS + 'flex-$1$2') + value;
    // align-self

    case 5443:
      return Enum_WEBKIT + value + Enum_MS + 'flex-item-' + Utility_replace(value, /flex-|-self/, '') + value;
    // align-content

    case 4675:
      return Enum_WEBKIT + value + Enum_MS + 'flex-line-pack' + Utility_replace(value, /align-content|flex-|-self/, '') + value;
    // flex-shrink

    case 5548:
      return Enum_WEBKIT + value + Enum_MS + Utility_replace(value, 'shrink', 'negative') + value;
    // flex-basis

    case 5292:
      return Enum_WEBKIT + value + Enum_MS + Utility_replace(value, 'basis', 'preferred-size') + value;
    // flex-grow

    case 6060:
      return Enum_WEBKIT + 'box-' + Utility_replace(value, '-grow', '') + Enum_WEBKIT + value + Enum_MS + Utility_replace(value, 'grow', 'positive') + value;
    // transition

    case 4554:
      return Enum_WEBKIT + Utility_replace(value, /([^-])(transform)/g, '$1' + Enum_WEBKIT + '$2') + value;
    // cursor

    case 6187:
      return Utility_replace(Utility_replace(Utility_replace(value, /(zoom-|grab)/, Enum_WEBKIT + '$1'), /(image-set)/, Enum_WEBKIT + '$1'), value, '') + value;
    // background, background-image

    case 5495:
    case 3959:
      return Utility_replace(value, /(image-set\([^]*)/, Enum_WEBKIT + '$1' + '$`$1');
    // justify-content

    case 4968:
      return Utility_replace(Utility_replace(value, /(.+:)(flex-)?(.*)/, Enum_WEBKIT + 'box-pack:$3' + Enum_MS + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + Enum_WEBKIT + value + value;
    // (margin|padding)-inline-(start|end)

    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return Utility_replace(value, /(.+)-inline(.+)/, Enum_WEBKIT + '$1$2') + value;
    // (min|max)?(width|height|inline-size|block-size)

    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      // stretch, max-content, min-content, fill-available
      if (Utility_strlen(value) - 1 - length > 6) switch (Utility_charat(value, length + 1)) {
        // (m)ax-content, (m)in-content
        case 109:
          // -
          if (Utility_charat(value, length + 4) !== 45) break;
        // (f)ill-available, (f)it-content

        case 102:
          return Utility_replace(value, /(.+:)(.+)-([^]+)/, '$1' + Enum_WEBKIT + '$2-$3' + '$1' + Enum_MOZ + (Utility_charat(value, length + 3) == 108 ? '$3' : '$2-$3')) + value;
        // (s)tretch

        case 115:
          return ~indexof(value, 'stretch') ? emotion_cache_esm_prefix(Utility_replace(value, 'stretch', 'fill-available'), length) + value : value;
      }
      break;
    // position: sticky

    case 4949:
      // (s)ticky?
      if (Utility_charat(value, length + 1) !== 115) break;
    // display: (flex|inline-flex)

    case 6444:
      switch (Utility_charat(value, Utility_strlen(value) - 3 - (~indexof(value, '!important') && 10))) {
        // stic(k)y
        case 107:
          return Utility_replace(value, ':', ':' + Enum_WEBKIT) + value;
        // (inline-)?fl(e)x

        case 101:
          return Utility_replace(value, /(.+:)([^;!]+)(;|!.+)?/, '$1' + Enum_WEBKIT + (Utility_charat(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + Enum_WEBKIT + '$2$3' + '$1' + Enum_MS + '$2box$3') + value;
      }

      break;
    // writing-mode

    case 5936:
      switch (Utility_charat(value, length + 11)) {
        // vertical-l(r)
        case 114:
          return Enum_WEBKIT + value + Enum_MS + Utility_replace(value, /[svh]\w+-[tblr]{2}/, 'tb') + value;
        // vertical-r(l)

        case 108:
          return Enum_WEBKIT + value + Enum_MS + Utility_replace(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value;
        // horizontal(-)tb

        case 45:
          return Enum_WEBKIT + value + Enum_MS + Utility_replace(value, /[svh]\w+-[tblr]{2}/, 'lr') + value;
      }

      return Enum_WEBKIT + value + Enum_MS + value + value;
  }

  return value;
}

var emotion_cache_esm_prefixer = function prefixer(element, index, children, callback) {
  if (element.length > -1) if (!element["return"]) switch (element.type) {
    case Enum_DECLARATION:
      element["return"] = emotion_cache_esm_prefix(element.value, element.length);
      break;

    case Enum_KEYFRAMES:
      return Serializer_serialize([Tokenizer_copy(element, {
        value: Utility_replace(element.value, '@', '@' + Enum_WEBKIT)
      })], callback);

    case Enum_RULESET:
      if (element.length) return Utility_combine(element.props, function (value) {
        switch (Utility_match(value, /(::plac\w+|:read-\w+)/)) {
          // :read-(only|write)
          case ':read-only':
          case ':read-write':
            return Serializer_serialize([Tokenizer_copy(element, {
              props: [Utility_replace(value, /:(read-\w+)/, ':' + Enum_MOZ + '$1')]
            })], callback);
          // :placeholder

          case '::placeholder':
            return Serializer_serialize([Tokenizer_copy(element, {
              props: [Utility_replace(value, /:(plac\w+)/, ':' + Enum_WEBKIT + 'input-$1')]
            }), Tokenizer_copy(element, {
              props: [Utility_replace(value, /:(plac\w+)/, ':' + Enum_MOZ + '$1')]
            }), Tokenizer_copy(element, {
              props: [Utility_replace(value, /:(plac\w+)/, Enum_MS + 'input-$1')]
            })], callback);
        }

        return '';
      });
  }
};

var isBrowser = typeof document !== 'undefined';
var getServerStylisCache = isBrowser ? undefined : emotion_weak_memoize_esm(function () {
  return (0,emotion_memoize_esm/* default */.Z)(function () {
    var cache = {};
    return function (name) {
      return cache[name];
    };
  });
});
var defaultStylisPlugins = [emotion_cache_esm_prefixer];

var createCache = function createCache(options) {
  var key = options.key;

  if (false) {}

  if (isBrowser && key === 'css') {
    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
    // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
    // note this very very intentionally targets all style elements regardless of the key to ensure
    // that creating a cache works inside of render of a React component

    Array.prototype.forEach.call(ssrStyles, function (node) {
      // we want to only move elements which have a space in the data-emotion attribute value
      // because that indicates that it is an Emotion 11 server-side rendered style elements
      // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
      // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
      // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
      // will not result in the Emotion 10 styles being destroyed
      var dataEmotionAttribute = node.getAttribute('data-emotion');

      if (dataEmotionAttribute.indexOf(' ') === -1) {
        return;
      }
      document.head.appendChild(node);
      node.setAttribute('data-s', '');
    });
  }

  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;

  if (false) {}

  var inserted = {};
  var container;
  var nodesToHydrate = [];

  if (isBrowser) {
    container = options.container || document.head;
    Array.prototype.forEach.call( // this means we will ignore elements which don't have a space in them which
    // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
    document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function (node) {
      var attrib = node.getAttribute("data-emotion").split(' '); // $FlowFixMe

      for (var i = 1; i < attrib.length; i++) {
        inserted[attrib[i]] = true;
      }

      nodesToHydrate.push(node);
    });
  }

  var _insert;

  var omnipresentPlugins = [compat, removeLabel];

  if (false) {}

  if (isBrowser) {
    var currentSheet;
    var finalizingPlugins = [stringify,  false ? 0 : rulesheet(function (rule) {
      currentSheet.insert(rule);
    })];
    var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));

    var stylis = function stylis(styles) {
      return Serializer_serialize(compile(styles), serializer);
    };

    _insert = function insert(selector, serialized, sheet, shouldCache) {
      currentSheet = sheet;

      if (false) {}

      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);

      if (shouldCache) {
        cache.inserted[serialized.name] = true;
      }
    };
  } else {
    var _finalizingPlugins = [stringify];

    var _serializer = middleware(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins));

    var _stylis = function _stylis(styles) {
      return Serializer_serialize(compile(styles), _serializer);
    }; // $FlowFixMe


    var serverStylisCache = getServerStylisCache(stylisPlugins)(key);

    var getRules = function getRules(selector, serialized) {
      var name = serialized.name;

      if (serverStylisCache[name] === undefined) {
        serverStylisCache[name] = _stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
      }

      return serverStylisCache[name];
    };

    _insert = function _insert(selector, serialized, sheet, shouldCache) {
      var name = serialized.name;
      var rules = getRules(selector, serialized);

      if (cache.compat === undefined) {
        // in regular mode, we don't set the styles on the inserted cache
        // since we don't need to and that would be wasting memory
        // we return them so that they are rendered in a style tag
        if (shouldCache) {
          cache.inserted[name] = true;
        }

        if ( // using === development instead of !== production
        // because if people do ssr in tests, the source maps showing up would be annoying
        false) {}

        return rules;
      } else {
        // in compat mode, we put the styles on the inserted cache so
        // that emotion-server can pull out the styles
        // except when we don't want to cache it which was in Global but now
        // is nowhere but we don't want to do a major right now
        // and just in case we're going to leave the case here
        // it's also not affecting client side bundle size
        // so it's really not a big deal
        if (shouldCache) {
          cache.inserted[name] = rules;
        } else {
          return rules;
        }
      }
    };
  }

  var cache = {
    key: key,
    sheet: new StyleSheet({
      key: key,
      container: container,
      nonce: options.nonce,
      speedy: options.speedy,
      prepend: options.prepend,
      insertionPoint: options.insertionPoint
    }),
    nonce: options.nonce,
    inserted: inserted,
    registered: {},
    insert: _insert
  };
  cache.sheet.hydrate(nodesToHydrate);
  return cache;
};

/* harmony default export */ const emotion_cache_esm = (createCache);


/***/ }),

/***/ 2102:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function memoize(fn) {
  var cache = Object.create(null);
  return function (arg) {
    if (cache[arg] === undefined) cache[arg] = fn(arg);
    return cache[arg];
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (memoize);


/***/ }),

/***/ 6918:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "O": () => (/* binding */ serializeStyles)
});

;// CONCATENATED MODULE: ../../.yarn/cache/@emotion-hash-npm-0.9.0-efbc0b3f3f-b63428f7c8.zip/node_modules/@emotion/hash/dist/emotion-hash.esm.js
/* eslint-disable */
// Inspired by https://github.com/garycourt/murmurhash-js
// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
function murmur2(str) {
  // 'm' and 'r' are mixing constants generated offline.
  // They're not really 'magic', they just happen to work well.
  // const m = 0x5bd1e995;
  // const r = 24;
  // Initialize the hash
  var h = 0; // Mix 4 bytes at a time into the hash

  var k,
      i = 0,
      len = str.length;

  for (; len >= 4; ++i, len -= 4) {
    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
    k =
    /* Math.imul(k, m): */
    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
    k ^=
    /* k >>> r: */
    k >>> 24;
    h =
    /* Math.imul(k, m): */
    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
    /* Math.imul(h, m): */
    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  } // Handle the last few bytes of the input array


  switch (len) {
    case 3:
      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

    case 2:
      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

    case 1:
      h ^= str.charCodeAt(i) & 0xff;
      h =
      /* Math.imul(h, m): */
      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  } // Do a few final mixes of the hash to ensure the last few
  // bytes are well-incorporated.


  h ^= h >>> 13;
  h =
  /* Math.imul(h, m): */
  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  return ((h ^ h >>> 15) >>> 0).toString(36);
}

/* harmony default export */ const emotion_hash_esm = (murmur2);

;// CONCATENATED MODULE: ../../.yarn/cache/@emotion-unitless-npm-0.8.0-aa125284fa-176141117e.zip/node_modules/@emotion/unitless/dist/emotion-unitless.esm.js
var unitlessKeys = {
  animationIterationCount: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};

/* harmony default export */ const emotion_unitless_esm = (unitlessKeys);

// EXTERNAL MODULE: ../../.yarn/cache/@emotion-memoize-npm-0.8.0-c5dd451828-c87bb110b8.zip/node_modules/@emotion/memoize/dist/emotion-memoize.esm.js
var emotion_memoize_esm = __webpack_require__(2102);
;// CONCATENATED MODULE: ../../.yarn/cache/@emotion-serialize-npm-1.1.1-b082a29d71-24cfd5b16e.zip/node_modules/@emotion/serialize/dist/emotion-serialize.esm.js




var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;

var isCustomProperty = function isCustomProperty(property) {
  return property.charCodeAt(1) === 45;
};

var isProcessableValue = function isProcessableValue(value) {
  return value != null && typeof value !== 'boolean';
};

var processStyleName = /* #__PURE__ */(0,emotion_memoize_esm/* default */.Z)(function (styleName) {
  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
});

var processStyleValue = function processStyleValue(key, value) {
  switch (key) {
    case 'animation':
    case 'animationName':
      {
        if (typeof value === 'string') {
          return value.replace(animationRegex, function (match, p1, p2) {
            cursor = {
              name: p1,
              styles: p2,
              next: cursor
            };
            return p1;
          });
        }
      }
  }

  if (emotion_unitless_esm[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
    return value + 'px';
  }

  return value;
};

if (false) { var hyphenatedCache, hyphenPattern, msPattern, oldProcessStyleValue, contentValues, contentValuePattern; }

var noComponentSelectorMessage = (/* unused pure expression or super */ null && ('Component selectors can only be used in conjunction with ' + '@emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware ' + 'compiler transform.'));

function handleInterpolation(mergedProps, registered, interpolation) {
  if (interpolation == null) {
    return '';
  }

  if (interpolation.__emotion_styles !== undefined) {
    if (false) {}

    return interpolation;
  }

  switch (typeof interpolation) {
    case 'boolean':
      {
        return '';
      }

    case 'object':
      {
        if (interpolation.anim === 1) {
          cursor = {
            name: interpolation.name,
            styles: interpolation.styles,
            next: cursor
          };
          return interpolation.name;
        }

        if (interpolation.styles !== undefined) {
          var next = interpolation.next;

          if (next !== undefined) {
            // not the most efficient thing ever but this is a pretty rare case
            // and there will be very few iterations of this generally
            while (next !== undefined) {
              cursor = {
                name: next.name,
                styles: next.styles,
                next: cursor
              };
              next = next.next;
            }
          }

          var styles = interpolation.styles + ";";

          if (false) {}

          return styles;
        }

        return createStringFromObject(mergedProps, registered, interpolation);
      }

    case 'function':
      {
        if (mergedProps !== undefined) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        } else if (false) {}

        break;
      }

    case 'string':
      if (false) { var replaced, matched; }

      break;
  } // finalize string values (regular strings and functions interpolated into css calls)


  if (registered == null) {
    return interpolation;
  }

  var cached = registered[interpolation];
  return cached !== undefined ? cached : interpolation;
}

function createStringFromObject(mergedProps, registered, obj) {
  var string = '';

  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
    }
  } else {
    for (var _key in obj) {
      var value = obj[_key];

      if (typeof value !== 'object') {
        if (registered != null && registered[value] !== undefined) {
          string += _key + "{" + registered[value] + "}";
        } else if (isProcessableValue(value)) {
          string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
        }
      } else {
        if (_key === 'NO_COMPONENT_SELECTOR' && "production" !== 'production') {}

        if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
          for (var _i = 0; _i < value.length; _i++) {
            if (isProcessableValue(value[_i])) {
              string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
            }
          }
        } else {
          var interpolated = handleInterpolation(mergedProps, registered, value);

          switch (_key) {
            case 'animation':
            case 'animationName':
              {
                string += processStyleName(_key) + ":" + interpolated + ";";
                break;
              }

            default:
              {
                if (false) {}

                string += _key + "{" + interpolated + "}";
              }
          }
        }
      }
    }
  }

  return string;
}

var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
var sourceMapPattern;

if (false) {} // this is the cursor for keyframes
// keyframes are stored on the SerializedStyles object as a linked list


var cursor;
var serializeStyles = function serializeStyles(args, registered, mergedProps) {
  if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
    return args[0];
  }

  var stringMode = true;
  var styles = '';
  cursor = undefined;
  var strings = args[0];

  if (strings == null || strings.raw === undefined) {
    stringMode = false;
    styles += handleInterpolation(mergedProps, registered, strings);
  } else {
    if (false) {}

    styles += strings[0];
  } // we start at 1 since we've already handled the first arg


  for (var i = 1; i < args.length; i++) {
    styles += handleInterpolation(mergedProps, registered, args[i]);

    if (stringMode) {
      if (false) {}

      styles += strings[i];
    }
  }

  var sourceMap;

  if (false) {} // using a global regex with .exec is stateful so lastIndex has to be reset each time


  labelPattern.lastIndex = 0;
  var identifierName = '';
  var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

  while ((match = labelPattern.exec(styles)) !== null) {
    identifierName += '-' + // $FlowFixMe we know it's not null
    match[1];
  }

  var name = emotion_hash_esm(styles) + identifierName;

  if (false) {}

  return {
    name: name,
    styles: styles,
    next: cursor
  };
};




/***/ }),

/***/ 5474:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "My": () => (/* binding */ insertStyles),
/* harmony export */   "fp": () => (/* binding */ getRegisteredStyles),
/* harmony export */   "hC": () => (/* binding */ registerStyles)
/* harmony export */ });
var isBrowser = typeof document !== 'undefined';
function getRegisteredStyles(registered, registeredStyles, classNames) {
  var rawClassName = '';
  classNames.split(' ').forEach(function (className) {
    if (registered[className] !== undefined) {
      registeredStyles.push(registered[className] + ";");
    } else {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var registerStyles = function registerStyles(cache, serialized, isStringTag) {
  var className = cache.key + "-" + serialized.name;

  if ( // we only need to add the styles to the registered cache if the
  // class name could be used further down
  // the tree but if it's a string tag, we know it won't
  // so we don't have to add it to registered cache.
  // this improves memory usage since we can avoid storing the whole style string
  (isStringTag === false || // we need to always store it if we're in compat mode and
  // in node since emotion-server relies on whether a style is in
  // the registered cache to know whether a style is global or not
  // also, note that this check will be dead code eliminated in the browser
  isBrowser === false && cache.compat !== undefined) && cache.registered[className] === undefined) {
    cache.registered[className] = serialized.styles;
  }
};
var insertStyles = function insertStyles(cache, serialized, isStringTag) {
  registerStyles(cache, serialized, isStringTag);
  var className = cache.key + "-" + serialized.name;

  if (cache.inserted[serialized.name] === undefined) {
    var stylesForSSR = '';
    var current = serialized;

    do {
      var maybeStyles = cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);

      if (!isBrowser && maybeStyles !== undefined) {
        stylesForSSR += maybeStyles;
      }

      current = current.next;
    } while (current !== undefined);

    if (!isBrowser && stylesForSSR.length !== 0) {
      return stylesForSSR;
    }
  }
};




/***/ }),

/***/ 2709:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
var __webpack_unused_export__;

__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "Z", ({
    enumerable: true,
    get: function() {
        return _asyncToGenerator;
    }
}));
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}


/***/ }),

/***/ 6237:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
var __webpack_unused_export__;

__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "Z", ({
    enumerable: true,
    get: function() {
        return _extends;
    }
}));
function extends_() {
    extends_ = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source){
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return extends_.apply(this, arguments);
}
function _extends() {
    return extends_.apply(this, arguments);
}


/***/ }),

/***/ 1378:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
var __webpack_unused_export__;

__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "Z", ({
    enumerable: true,
    get: function() {
        return _interopRequireDefault;
    }
}));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}


/***/ }),

/***/ 7595:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
var __webpack_unused_export__;

__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "Z", ({
    enumerable: true,
    get: function() {
        return _interopRequireWildcard;
    }
}));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}


/***/ }),

/***/ 2526:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
var __webpack_unused_export__;

__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "Z", ({
    enumerable: true,
    get: function() {
        return _objectWithoutPropertiesLoose;
    }
}));
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}


/***/ }),

/***/ 9354:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var assets = [{
  $schema: '../assetlist.schema.json',
  chain_name: 'avalanche',
  assets: [{
    description: 'AVAX is the native token of Avalanche. It is a hard-capped, scarce asset that is used to pay for fees, secure the platform through staking, and provide a basic unit of account between the multiple subnets created on Avalanche.',
    denom_units: [{
      denom: 'wei',
      exponent: 0
    }, {
      denom: 'avax',
      exponent: 18
    }],
    base: 'wei',
    name: 'Avalanche',
    display: 'avax',
    symbol: 'AVAX',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/avalanche/images/avax.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/avalanche/images/avax.svg'
    },
    coingecko_id: 'avalanche-2'
  }, {
    description: 'The wrapped ERC-20 representation of AVAX, the native token of Avalanche.',
    type_asset: 'erc20',
    address: '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7',
    denom_units: [{
      denom: '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7',
      exponent: 0,
      aliases: ['wavax-wei']
    }, {
      denom: 'wavax',
      exponent: 18
    }],
    base: '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7',
    name: 'Wrapped AVAX',
    display: 'wavax',
    symbol: 'WAVAX',
    traces: [{
      type: 'wrapped',
      counterparty: {
        chain_name: 'avalanche',
        base_denom: 'wei'
      },
      provider: 'Avalanche'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/avalanche/images/wavax.svg'
    },
    coingecko_id: 'wrapped-avax'
  }, {
    description: 'Multi-Collateral Dai, brings a lot of new and exciting features, such as support for new CDP collateral types and Dai Savings Rate.',
    type_asset: 'erc20',
    address: '0xc5fa5669e326da8b2c35540257cd48811f40a36b',
    denom_units: [{
      denom: '0xc5fa5669e326da8b2c35540257cd48811f40a36b',
      exponent: 0,
      aliases: ['dai-wei']
    }, {
      denom: 'axldai',
      exponent: 18
    }],
    base: '0xc5fa5669e326da8b2c35540257cd48811f40a36b',
    name: 'Axelar Wrapped DAI',
    display: 'axldai',
    symbol: 'axlDAI',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/dai.svg'
    }
  }, {
    description: 'Frax is a fractional-algorithmic stablecoin protocol. It aims to provide a highly scalable, decentralized, algorithmic money in place of fixed-supply assets like BTC. Additionally, FXS is the value accrual and governance token of the entire Frax ecosystem.',
    type_asset: 'erc20',
    address: '0x4914886dbb8aad7a7456d471eaab10b06d42348d',
    denom_units: [{
      denom: '0x4914886dbb8aad7a7456d471eaab10b06d42348d',
      exponent: 0,
      aliases: ['frax-wei']
    }, {
      denom: 'axlfrax',
      exponent: 18
    }],
    base: '0x4914886dbb8aad7a7456d471eaab10b06d42348d',
    name: 'Axelar Wrapped Frax',
    display: 'axlfrax',
    symbol: 'axlFRAX',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/frax.svg'
    }
  }, {
    description: 'USDC is a fully collateralized US Dollar stablecoin developed by CENTRE, the open source project with Circle being the first of several forthcoming issuers.',
    type_asset: 'erc20',
    address: '0xfab550568C688d5d8a52c7d794cb93edc26ec0ec',
    denom_units: [{
      denom: '0xfab550568C688d5d8a52c7d794cb93edc26ec0ec',
      exponent: 0,
      aliases: ['uusdc']
    }, {
      denom: 'axlusdc',
      exponent: 6
    }],
    base: '0xfab550568C688d5d8a52c7d794cb93edc26ec0ec',
    name: 'Axelar Wrapped USDC',
    display: 'axlusdc',
    symbol: 'axlUSDC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/usdc.svg'
    }
  }, {
    description: 'Tether gives you the joint benefits of open blockchain technology and traditional currency by converting your cash into a stable digital currency equivalent.',
    type_asset: 'erc20',
    address: '0xf976ba91b6bb3468c91e4f02e68b37bc64a57e66',
    denom_units: [{
      denom: '0xf976ba91b6bb3468c91e4f02e68b37bc64a57e66',
      exponent: 0,
      aliases: ['uusdt']
    }, {
      denom: 'axlusdt',
      exponent: 6
    }],
    base: '0xf976ba91b6bb3468c91e4f02e68b37bc64a57e66',
    name: 'Axelar Wrapped USDT',
    display: 'axlusdt',
    symbol: 'axlUSDT',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/usdt.svg'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'binancesmartchain',
  assets: [{
    description: 'BNB powers the BNB Chain ecosystem and is the native coin of the BNB Beacon Chain and BNB Smart Chain.',
    denom_units: [{
      denom: 'wei',
      exponent: 0
    }, {
      denom: 'bnb',
      exponent: 18
    }],
    base: 'wei',
    name: 'Binance Coin',
    display: 'bnb',
    symbol: 'BNB',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/binancesmartchain/images/bnb.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/binancesmartchain/images/bnb.png'
    },
    coingecko_id: 'binancecoin'
  }, {
    description: 'Wrapped BNB. As the native coin of Binance Chain, BNB has multiple use cases: fueling transactions on the Chain, paying for transaction fees on Binance Exchange, making in-store payments, and many more.',
    type_asset: 'erc20',
    address: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',
    denom_units: [{
      denom: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',
      exponent: 0
    }, {
      denom: 'wbnb',
      exponent: 18
    }],
    base: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',
    name: 'Wrapped BNB',
    display: 'wbnb',
    symbol: 'WBNB',
    traces: [{
      type: 'wrapped',
      counterparty: {
        chain_name: 'binancesmartchain',
        base_denom: 'wei'
      },
      chain: {
        contract: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c'
      },
      provider: 'Binance'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/binancesmartchain/images/wbnb.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/binancesmartchain/images/wbnb.png'
    },
    coingecko_id: 'wbnb'
  }, {
    description: 'BUSD is a 1:1 USD-backed stablecoin approved by NYDFS and issued by Paxos on Ethereum. Binance provides Binance-Peg BUSD on other chains by locking an equivalent amount of assets on Ethereum. Note that Binance-Peg BUSD is provided by Binance, which is not issued by Paxos nor regulated by the NYDFS.',
    denom_units: [{
      denom: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',
      exponent: 0
    }, {
      denom: 'busd',
      exponent: 18
    }],
    type_asset: 'erc20',
    address: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',
    base: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',
    name: 'Binance-Peg BUSD Token',
    display: 'busd',
    symbol: 'BUSD',
    traces: [{
      type: 'synthetic',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'
      },
      provider: 'Binance'
    }],
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/busd.png'
    }
  }, {
    description: 'USD Coin (known by its ticker USDC) is a stablecoin that is pegged to the U.S. dollar on a 1:1 basis.',
    denom_units: [{
      denom: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',
      exponent: 0
    }, {
      denom: 'usdc',
      exponent: 18
    }],
    type_asset: 'erc20',
    address: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',
    base: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',
    name: 'Binance-Peg USD Coin',
    display: 'usdc',
    symbol: 'USDC',
    traces: [{
      type: 'synthetic',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0x4fabb145d64652a948d72533023f6e7a623c7c53'
      },
      provider: 'Binance'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/usdc.svg'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'ethereum',
  assets: [{
    description: 'Ether is the native fee token of the Ethereum network.',
    denom_units: [{
      denom: 'wei',
      exponent: 0
    }, {
      denom: 'gwei',
      exponent: 9
    }, {
      denom: 'eth',
      exponent: 18,
      aliases: ['ether']
    }],
    base: 'wei',
    name: 'Ether',
    display: 'eth',
    symbol: 'ETH',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/eth.svg'
    },
    coingecko_id: 'ethereum'
  }, {
    description: 'Aave is an Open Source and Non-Custodial protocol to earn interest on deposits & borrow assets. It also features access to highly innovative flash loans, which let developers borrow instantly and easily; no collateral needed. With 16 different assets, 5 of which are stablecoins.',
    type_asset: 'erc20',
    address: '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9',
    denom_units: [{
      denom: '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9',
      exponent: 0,
      aliases: ['aave-wei']
    }, {
      denom: 'aave',
      exponent: 18
    }],
    base: '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9',
    name: 'Aave',
    display: 'aave',
    symbol: 'AAVE',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/aave.svg'
    },
    coingecko_id: 'aave'
  }, {
    description: 'ApeCoin found new expression in web3 through art, gaming, entertainment, and events. APE is a token made to support what’s next, controlled, and built on by the community. It will serve as a decentralized protocol layer for community-led initiatives that drive culture forward into the metaverse.',
    type_asset: 'erc20',
    address: '0x4d224452801aced8b2f0aebe155379bb5d594381',
    denom_units: [{
      denom: '0x4d224452801aced8b2f0aebe155379bb5d594381',
      exponent: 0,
      aliases: ['ape-wei']
    }, {
      denom: 'ape',
      exponent: 18
    }],
    base: '0x4d224452801aced8b2f0aebe155379bb5d594381',
    name: 'ApeCoin',
    display: 'ape',
    symbol: 'APE',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/ape.svg'
    },
    coingecko_id: 'apecoin'
  }, {
    description: 'Axie Infinity is a Pokémon-inspired digital pet universe where anyone can earn tokens through skilled gameplay and contributions to the ecosystem. Players can battle, collect, raise, and build a land-based kingdom for their pets (known as Axies).',
    type_asset: 'erc20',
    address: '0xbb0e17ef65f82ab018d8edd776e8dd940327b28b',
    denom_units: [{
      denom: '0xbb0e17ef65f82ab018d8edd776e8dd940327b28b',
      exponent: 0,
      aliases: ['axs-wei']
    }, {
      denom: 'axs',
      exponent: 18
    }],
    base: '0xbb0e17ef65f82ab018d8edd776e8dd940327b28b',
    name: 'Axie Infinity Shard',
    display: 'axs',
    symbol: 'AXS',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/axs.svg'
    },
    coingecko_id: 'axie-infinity'
  }, {
    description: 'Multi-Collateral Dai, brings a lot of new and exciting features, such as support for new CDP collateral types and Dai Savings Rate.',
    type_asset: 'erc20',
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    denom_units: [{
      denom: '0x6b175474e89094c44da98b954eedeac495271d0f',
      exponent: 0,
      aliases: ['dai-wei']
    }, {
      denom: 'dai',
      exponent: 18
    }],
    base: '0x6b175474e89094c44da98b954eedeac495271d0f',
    name: 'Dai Stablecoin',
    display: 'dai',
    symbol: 'DAI',
    traces: [{
      type: 'synthetic',
      counterparty: {
        chain_name: 'forex',
        base_denom: 'USD'
      },
      provider: 'MakerDAO'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/dai.svg'
    },
    coingecko_id: 'dai'
  }, {
    description: 'Frax is a fractional-algorithmic stablecoin protocol. It aims to provide a highly scalable, decentralized, algorithmic money in place of fixed-supply assets like BTC. Additionally, FXS is the value accrual and governance token of the entire Frax ecosystem.',
    type_asset: 'erc20',
    address: '0x853d955acef822db058eb8505911ed77f175b99e',
    denom_units: [{
      denom: '0x853d955acef822db058eb8505911ed77f175b99e',
      exponent: 0,
      aliases: ['frax-wei']
    }, {
      denom: 'frax',
      exponent: 18
    }],
    base: '0x853d955acef822db058eb8505911ed77f175b99e',
    name: 'Frax',
    display: 'frax',
    symbol: 'FRAX',
    traces: [{
      type: 'synthetic',
      counterparty: {
        chain_name: 'forex',
        base_denom: 'USD'
      },
      provider: 'Frax Protocol'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/frax.svg'
    },
    coingecko_id: 'frax'
  }, {
    description: 'A blockchain-based middleware, acting as a bridge between cryptocurrency smart contracts, data feeds, APIs and traditional bank account payments.',
    type_asset: 'erc20',
    address: '0x514910771af9ca656af840dff83e8264ecf986ca',
    denom_units: [{
      denom: '0x514910771af9ca656af840dff83e8264ecf986ca',
      exponent: 0,
      aliases: ['link-wei']
    }, {
      denom: 'link',
      exponent: 18
    }],
    base: '0x514910771af9ca656af840dff83e8264ecf986ca',
    name: 'Chainlink',
    display: 'link',
    symbol: 'LINK',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/link.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/link.svg'
    },
    coingecko_id: 'chainlink'
  }, {
    description: 'Maker is a Decentralized Autonomous Organization that creates and insures the dai stablecoin on the Ethereum blockchain',
    type_asset: 'erc20',
    address: '0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2',
    denom_units: [{
      denom: '0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2',
      exponent: 0,
      aliases: ['mkr-wei']
    }, {
      denom: 'mkr',
      exponent: 18
    }],
    base: '0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2',
    name: 'Maker',
    display: 'mkr',
    symbol: 'MKR',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/mkr.svg'
    },
    coingecko_id: 'maker'
  }, {
    description: "RAI is a non-pegged, ETH-backed stable asset. It is useful as more 'stable' collateral for other DeFi protocols (compared to ETH or BTC) or as a stable asset with an embedded interest rate.",
    type_asset: 'erc20',
    address: '0x03ab458634910aad20ef5f1c8ee96f1d6ac54919',
    denom_units: [{
      denom: '0x03ab458634910aad20ef5f1c8ee96f1d6ac54919',
      exponent: 0,
      aliases: ['rai-wei']
    }, {
      denom: 'rai',
      exponent: 18
    }],
    base: '0x03ab458634910aad20ef5f1c8ee96f1d6ac54919',
    name: 'Rai Reflex Index',
    display: 'rai',
    symbol: 'RAI',
    traces: [{
      type: 'synthetic',
      counterparty: {
        chain_name: 'forex',
        base_denom: 'USD'
      },
      provider: 'RAI Finance'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/rai.svg'
    },
    coingecko_id: 'rai'
  }, {
    description: 'SHIBA INU is a 100% decentralized community experiment with it claims that 1/2 the tokens have been sent to Vitalik and the other half were locked to a Uniswap pool and the keys burned.',
    type_asset: 'erc20',
    address: '0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce',
    denom_units: [{
      denom: '0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce',
      exponent: 0,
      aliases: ['shib-wei']
    }, {
      denom: 'shib',
      exponent: 18
    }],
    base: '0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce',
    name: 'Shiba Inu',
    display: 'shib',
    symbol: 'SHIB',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/shib.svg'
    },
    coingecko_id: 'shiba-inu'
  }, {
    description: 'stETH is a token that represents staked ether in Lido, combining the value of initial deposit + staking rewards. stETH tokens are pegged 1:1 to the ETH staked with Lido and can be used as one would use ether, allowing users to earn Eth2 staking rewards whilst benefiting from Defi yields.',
    type_asset: 'erc20',
    address: '0xae7ab96520de3a18e5e111b5eaab095312d7fe84',
    denom_units: [{
      denom: '0xae7ab96520de3a18e5e111b5eaab095312d7fe84',
      exponent: 0,
      aliases: ['steth-wei']
    }, {
      denom: 'steth',
      exponent: 18
    }],
    base: '0xae7ab96520de3a18e5e111b5eaab095312d7fe84',
    name: 'Lido Staked Ether',
    display: 'steth',
    symbol: 'stETH',
    traces: [{
      type: 'liquid-stake',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: 'wei'
      },
      provider: 'Lido'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/steth.svg'
    },
    coingecko_id: 'staked-ether'
  }, {
    description: 'UNI token served as governance token for Uniswap protocol with 1 billion UNI have been minted at genesis. 60% of the UNI genesis supply is allocated to Uniswap community members and remaining for team, investors and advisors.',
    type_asset: 'erc20',
    address: '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',
    denom_units: [{
      denom: '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',
      exponent: 0,
      aliases: ['uni-wei']
    }, {
      denom: 'uni',
      exponent: 18
    }],
    base: '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',
    name: 'Uniswap',
    display: 'uni',
    symbol: 'UNI',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/uni.svg'
    },
    coingecko_id: 'uniswap'
  }, {
    description: 'USDC is a fully collateralized US Dollar stablecoin developed by CENTRE, the open source project with Circle being the first of several forthcoming issuers.',
    type_asset: 'erc20',
    address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
    denom_units: [{
      denom: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
      exponent: 0,
      aliases: ['uusdc']
    }, {
      denom: 'usdc',
      exponent: 6
    }],
    base: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
    name: 'USD Coin',
    display: 'usdc',
    symbol: 'USDC',
    traces: [{
      type: 'synthetic',
      counterparty: {
        chain_name: 'forex',
        base_denom: 'USD'
      },
      provider: 'Circle'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/usdc.svg'
    },
    coingecko_id: 'usd-coin'
  }, {
    description: 'Tether gives you the joint benefits of open blockchain technology and traditional currency by converting your cash into a stable digital currency equivalent.',
    type_asset: 'erc20',
    address: '0xdac17f958d2ee523a2206206994597c13d831ec7',
    denom_units: [{
      denom: '0xdac17f958d2ee523a2206206994597c13d831ec7',
      exponent: 0,
      aliases: ['uusdt']
    }, {
      denom: 'usdt',
      exponent: 6
    }],
    base: '0xdac17f958d2ee523a2206206994597c13d831ec7',
    name: 'Tether USD',
    display: 'usdt',
    symbol: 'USDT',
    traces: [{
      type: 'synthetic',
      counterparty: {
        chain_name: 'forex',
        base_denom: 'USD'
      },
      provider: 'Tether'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/usdt.svg'
    },
    coingecko_id: 'tether'
  }, {
    description: 'Wrapped Bitcoin (WBTC) is an ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led.',
    type_asset: 'erc20',
    address: '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599',
    denom_units: [{
      denom: '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599',
      exponent: 0,
      aliases: ['wbtc-satoshi']
    }, {
      denom: 'wbtc',
      exponent: 8
    }],
    base: '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599',
    name: 'Wrapped Bitcoin',
    display: 'wbtc',
    symbol: 'WBTC',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'bitcoin',
        base_denom: 'sat'
      },
      provider: 'BitGo, Kyber, and Ren'
    }],
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/wbtc.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/wbtc.svg'
    },
    coingecko_id: 'wrapped-bitcoin'
  }, {
    description: "wETH is 'wrapped ETH'",
    type_asset: 'erc20',
    address: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
    denom_units: [{
      denom: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
      exponent: 0,
      aliases: ['weth-wei']
    }, {
      denom: 'weth',
      exponent: 18
    }],
    base: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
    name: 'Wrapped Ether',
    display: 'weth',
    symbol: 'WETH',
    traces: [{
      type: 'wrapped',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: 'wei'
      },
      provider: 'Ethereum'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/weth.svg'
    },
    coingecko_id: 'weth'
  }, {
    description: 'Chain is a cloud blockchain protocol that enables organizations to build better financial services from the ground up powered by Sequence and Chain Core.',
    type_asset: 'erc20',
    address: '0xa2cd3d43c775978a96bdbf12d733d5a1ed94fb18',
    denom_units: [{
      denom: '0xa2cd3d43c775978a96bdbf12d733d5a1ed94fb18',
      exponent: 0,
      aliases: ['xcn-wei']
    }, {
      denom: 'xcn',
      exponent: 18
    }],
    base: '0xa2cd3d43c775978a96bdbf12d733d5a1ed94fb18',
    name: 'Chain',
    display: 'xcn',
    symbol: 'XCN',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/xcn.svg'
    },
    coingecko_id: 'chain-2'
  }, {
    description: 'Binance USD (BUSD) is a dollar-backed stablecoin issued and custodied by Paxos Trust Company, and regulated by the New York State Department of Financial Services. BUSD is available directly for sale 1:1 with USD on Paxos.com and will be listed for trading on Binance.',
    type_asset: 'erc20',
    address: '0x4fabb145d64652a948d72533023f6e7a623c7c53',
    denom_units: [{
      denom: '0x4fabb145d64652a948d72533023f6e7a623c7c53',
      exponent: 0,
      aliases: ['busd-wei']
    }, {
      denom: 'busd',
      exponent: 18
    }],
    base: '0x4fabb145d64652a948d72533023f6e7a623c7c53',
    name: 'Binance USD',
    display: 'busd',
    symbol: 'BUSD',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/busd.png'
    },
    coingecko_id: 'binance-usd'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'moonbeam',
  assets: [{
    description: 'Glimmer (GLMR) is the utility token of the Moonbeam Network, Moonbeam’s primary deployment on the Polkadot network that serves as a developer-friendly parachain.',
    denom_units: [{
      denom: 'Wei',
      exponent: 0,
      aliases: ['wei']
    }, {
      denom: 'GLMR',
      exponent: 18,
      aliases: ['glmr']
    }],
    base: 'Wei',
    name: 'Glimmer',
    display: 'GLMR',
    symbol: 'GLMR',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/moonbeam/images/glmr.svg'
    },
    coingecko_id: 'moonbeam'
  }, {
    description: 'An ERC-20 representation of GLMR, the native token of Moonbeam.',
    type_asset: 'erc20',
    address: '0xacc15dc74880c9944775448304b263d191c6077f',
    denom_units: [{
      denom: '0xacc15dc74880c9944775448304b263d191c6077f',
      exponent: 0,
      aliases: ['wglmr-wei']
    }, {
      denom: 'wglmr',
      exponent: 18
    }],
    base: '0xacc15dc74880c9944775448304b263d191c6077f',
    name: 'Wrapped Moonbeam',
    display: 'wglmr',
    symbol: 'WGLMR',
    traces: [{
      type: 'wrapped',
      counterparty: {
        chain_name: 'moonbeam',
        base_denom: 'Wei'
      },
      provider: 'Moonbeam'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/moonbeam/images/glmr.svg'
    },
    coingecko_id: 'wrapped-moonbeam'
  }, {
    description: "Polkadot is a blockchain network designed to support various interconnected, application-specific sub-chains. Each chain built within Polkadot uses Parity Technologies' Substrate modular framework, which allows developers to select specific components that suit their application-specific chain best.",
    type_asset: 'erc20',
    address: '0xffffffff1fcacbd218edc0eba20fc2308c778080',
    denom_units: [{
      denom: '0xffffffff1fcacbd218edc0eba20fc2308c778080',
      exponent: 0,
      aliases: ['dot-planck']
    }, {
      denom: 'xcdot',
      exponent: 10
    }],
    base: '0xffffffff1fcacbd218edc0eba20fc2308c778080',
    name: 'Wrapped Polkadot',
    display: 'xcdot',
    symbol: 'xcDOT',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'polkadot',
        base_denom: 'Planck'
      },
      provider: 'Polkadot Parachain'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/moonbeam/images/dot.svg'
    }
  }, {
    description: 'Multi-Collateral Dai, brings a lot of new and exciting features, such as support for new CDP collateral types and Dai Savings Rate.',
    type_asset: 'erc20',
    address: '0x14df360966a1c4582d2b18edbdae432ea0a27575',
    denom_units: [{
      denom: '0x14df360966a1c4582d2b18edbdae432ea0a27575',
      exponent: 0,
      aliases: ['dai-wei']
    }, {
      denom: 'axldai',
      exponent: 18
    }],
    base: '0x14df360966a1c4582d2b18edbdae432ea0a27575',
    name: 'Axelar Wrapped Dai Stablecoin',
    display: 'axldai',
    symbol: 'axlDAI',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'axelar',
        base_denom: 'dai-wei'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/dai.svg'
    }
  }, {
    description: 'Frax is a fractional-algorithmic stablecoin protocol. It aims to provide a highly scalable, decentralized, algorithmic money in place of fixed-supply assets like BTC. Additionally, FXS is the value accrual and governance token of the entire Frax ecosystem.',
    type_asset: 'erc20',
    address: '0x61C82805453a989E99B544DFB7031902e9bac448',
    denom_units: [{
      denom: '0x61C82805453a989E99B544DFB7031902e9bac448',
      exponent: 0,
      aliases: ['frax-wei']
    }, {
      denom: 'axlfrax',
      exponent: 18
    }],
    base: '0x61C82805453a989E99B544DFB7031902e9bac448',
    name: 'Axelar Wrapped Frax',
    display: 'axlfrax',
    symbol: 'axlFRAX',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'axelar',
        base_denom: 'frax-wei'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/frax.svg'
    }
  }, {
    description: 'USDC is a fully collateralized US Dollar stablecoin developed by CENTRE, the open source project with Circle being the first of several forthcoming issuers.',
    type_asset: 'erc20',
    address: '0xca01a1d0993565291051daff390892518acfad3a',
    denom_units: [{
      denom: '0xca01a1d0993565291051daff390892518acfad3a',
      exponent: 0,
      aliases: ['uusdc']
    }, {
      denom: 'axlusdc',
      exponent: 6
    }],
    base: '0xca01a1d0993565291051daff390892518acfad3a',
    name: 'Axelar Wrapped USD Coin',
    display: 'axlusdc',
    symbol: 'axlUSDC',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'axelar',
        base_denom: 'uusdc'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/usdc.svg'
    }
  }, {
    description: 'Tether gives you the joint benefits of open blockchain technology and traditional currency by converting your cash into a stable digital currency equivalent.',
    type_asset: 'erc20',
    address: '0xdfd74af792bc6d45d1803f425ce62dd16f8ae038',
    denom_units: [{
      denom: '0xdfd74af792bc6d45d1803f425ce62dd16f8ae038',
      exponent: 0,
      aliases: ['uusdt']
    }, {
      denom: 'axlusdt',
      exponent: 6
    }],
    base: '0xdfd74af792bc6d45d1803f425ce62dd16f8ae038',
    name: 'Axelar Wrapped Tether USD',
    display: 'axlusdt',
    symbol: 'axlUSDT',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'axelar',
        base_denom: 'uusdt'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/usdt.svg'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'polkadot',
  assets: [{
    description: 'The native fee, governance, staking, and bonding token of the Polkadot platform.',
    denom_units: [{
      denom: 'Planck',
      exponent: 0,
      aliases: ['planck']
    }, {
      denom: 'uDOT',
      exponent: 4,
      aliases: ['udot', 'microdot', 'Microdot']
    }, {
      denom: 'mDOT',
      exponent: 7,
      aliases: ['millidot', 'Millidot']
    }, {
      denom: 'DOT',
      exponent: 10,
      aliases: ['dot', 'New DOT', 'new dot']
    }, {
      denom: 'DOT (old)',
      exponent: 12
    }, {
      denom: 'MDOT',
      exponent: 16,
      aliases: ['million', 'Million']
    }],
    base: 'Planck',
    name: 'Polkadot',
    display: 'DOT',
    symbol: 'DOT',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/polkadot/images/dot.svg'
    },
    coingecko_id: 'polkadot'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'polygon',
  assets: [{
    description: 'Polygon (formerly Matic) Network brings massive scale to Ethereum using an adapted version of Plasma with PoS based side chains. Polygon is a well-structured, easy-to-use platform for Ethereum scaling and infrastructure development.',
    denom_units: [{
      denom: 'wei',
      exponent: 0
    }, {
      denom: 'matic',
      exponent: 18,
      aliases: ['polygon']
    }],
    base: 'wei',
    name: 'Matic',
    display: 'matic',
    symbol: 'MATIC',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/polygon/images/matic.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/polygon/images/matic.svg'
    },
    coingecko_id: 'matic-network'
  }, {
    description: 'Polygon combines the best of Ethereum and sovereign blockchains into a full-fledged multi-chain system.',
    type_asset: 'erc20',
    address: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',
    denom_units: [{
      denom: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',
      exponent: 0,
      aliases: ['wmatic-wei']
    }, {
      denom: 'wmatic',
      exponent: 18,
      aliases: ['polygon']
    }],
    base: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',
    name: 'Wrapped Matic',
    display: 'wmatic',
    symbol: 'WMATIC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/polygon/images/wmatic.svg'
    },
    coingecko_id: 'wmatic'
  }, {
    description: 'Multi-Collateral Dai, brings a lot of new and exciting features, such as support for new CDP collateral types and Dai Savings Rate.',
    type_asset: 'erc20',
    address: '0xddc9e2891fa11a4cc5c223145e8d14b44f3077c9',
    denom_units: [{
      denom: '0xddc9e2891fa11a4cc5c223145e8d14b44f3077c9',
      exponent: 0,
      aliases: ['dai-wei']
    }, {
      denom: 'axldai',
      exponent: 18
    }],
    base: '0xddc9e2891fa11a4cc5c223145e8d14b44f3077c9',
    name: 'Axelar Wrapped Dai Stablecoin',
    display: 'axldai',
    symbol: 'axlDAI',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/dai.svg'
    }
  }, {
    description: 'Frax is a fractional-algorithmic stablecoin protocol. It aims to provide a highly scalable, decentralized, algorithmic money in place of fixed-supply assets like BTC. Additionally, FXS is the value accrual and governance token of the entire Frax ecosystem.',
    type_asset: 'erc20',
    address: '0x53adc464b488be8c5d7269b9abbce8ba74195c3a',
    denom_units: [{
      denom: '0x53adc464b488be8c5d7269b9abbce8ba74195c3a',
      exponent: 0,
      aliases: ['frax-wei']
    }, {
      denom: 'axlfrax',
      exponent: 18
    }],
    base: '0x53adc464b488be8c5d7269b9abbce8ba74195c3a',
    name: 'Axelar Wrapped Frax',
    display: 'axlfrax',
    symbol: 'axlFRAX',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/frax.svg'
    }
  }, {
    description: 'USDC is a fully collateralized US Dollar stablecoin developed by CENTRE, the open source project with Circle being the first of several forthcoming issuers.',
    type_asset: 'erc20',
    address: '0x750e4c4984a9e0f12978ea6742bc1c5d248f40ed',
    denom_units: [{
      denom: '0x750e4c4984a9e0f12978ea6742bc1c5d248f40ed',
      exponent: 0,
      aliases: ['uusdc']
    }, {
      denom: 'axlusdc',
      exponent: 6
    }],
    base: '0x750e4c4984a9e0f12978ea6742bc1c5d248f40ed',
    name: 'Axelar Wrapped USD Coin',
    display: 'axlusdc',
    symbol: 'axlUSDC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/usdc.svg'
    }
  }, {
    description: 'Tether gives you the joint benefits of open blockchain technology and traditional currency by converting your cash into a stable digital currency equivalent.',
    type_asset: 'erc20',
    address: '0xceed2671d8634e3ee65000edbbee66139b132fbf',
    denom_units: [{
      denom: '0xceed2671d8634e3ee65000edbbee66139b132fbf',
      exponent: 0,
      aliases: ['uusdt']
    }, {
      denom: 'axlusdt',
      exponent: 6
    }],
    base: '0xceed2671d8634e3ee65000edbbee66139b132fbf',
    name: 'Axelar Wrapped Tether USD',
    display: 'axlusdt',
    symbol: 'axlUSDT',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/usdt.svg'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'acrechain',
  assets: [{
    description: 'The native EVM, governance and staking token of the Acrechain',
    denom_units: [{
      denom: 'aacre',
      exponent: 0
    }, {
      denom: 'acre',
      exponent: 18
    }],
    base: 'aacre',
    name: 'Acre',
    display: 'acre',
    symbol: 'ACRE',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/acrechain/images/acre.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/acrechain/images/acre.png'
    },
    coingecko_id: 'arable-protocol'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'agoric',
  assets: [{
    description: 'BLD is the token used to secure the Agoric chain through staking and to backstop Inter Protocol.',
    denom_units: [{
      denom: 'ubld',
      exponent: 0
    }, {
      denom: 'bld',
      exponent: 6
    }],
    base: 'ubld',
    name: 'Agoric',
    display: 'bld',
    symbol: 'BLD',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/agoric/images/bld.png'
    },
    coingecko_id: 'agoric'
  }, {
    description: 'IST is the stable token used by the Agoric chain for execution fees and commerce.',
    denom_units: [{
      denom: 'uist',
      exponent: 0
    }, {
      denom: 'ist',
      exponent: 6
    }],
    base: 'uist',
    name: 'Inter Stable Token',
    display: 'ist',
    symbol: 'IST',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/agoric/images/ist.png'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'aioz',
  assets: [{
    description: 'The native staking and governance token of the AIOZ Network.',
    denom_units: [{
      denom: 'attoaioz',
      exponent: 0
    }, {
      denom: 'nanoaioz',
      exponent: 9
    }, {
      denom: 'aioz',
      exponent: 18
    }],
    base: 'attoaioz',
    name: 'AIOZ',
    display: 'aioz',
    symbol: 'AIOZ',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/aioz/images/aioz.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/aioz/images/aioz.png'
    },
    coingecko_id: 'aioz-network'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'akash',
  assets: [{
    description: "Akash Token (AKT) is the Akash Network's native utility token, used as the primary means to govern, secure the blockchain, incentivize participants, and provide a default mechanism to store and exchange value.",
    denom_units: [{
      denom: 'uakt',
      exponent: 0
    }, {
      denom: 'akt',
      exponent: 6
    }],
    base: 'uakt',
    name: 'Akash Network',
    display: 'akt',
    symbol: 'AKT',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/akash/images/akt.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/akash/images/akt.svg'
    },
    coingecko_id: 'akash-network'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'arkh',
  assets: [{
    description: 'The native token of Arkhadian',
    denom_units: [{
      denom: 'uarkh',
      exponent: 0
    }, {
      denom: 'arkh',
      exponent: 6
    }],
    base: 'uarkh',
    name: 'Arkh',
    display: 'arkh',
    symbol: 'ARKH',
    logo_URIs: {
      png: 'https://www.arkhadian.com/static/images/600-prism.png'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'assetmantle',
  assets: [{
    description: 'The native token of Asset Mantle',
    denom_units: [{
      denom: 'umntl',
      exponent: 0
    }, {
      denom: 'mntl',
      exponent: 6
    }],
    base: 'umntl',
    name: 'AssetMantle',
    display: 'mntl',
    symbol: 'MNTL',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/assetmantle/images/mntl.png'
    },
    coingecko_id: 'assetmantle'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'axelar',
  assets: [{
    description: 'The native token of Axelar',
    denom_units: [{
      denom: 'uaxl',
      exponent: 0
    }, {
      denom: 'axl',
      exponent: 6
    }],
    base: 'uaxl',
    name: 'Axelar',
    display: 'axl',
    symbol: 'AXL',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/axelar/images/axl.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/axelar/images/axl.svg'
    },
    coingecko_id: 'axelar'
  }, {
    description: "Circle's stablecoin on Axelar",
    denom_units: [{
      denom: 'uusdc',
      exponent: 0
    }, {
      denom: 'usdc',
      exponent: 6
    }],
    base: 'uusdc',
    name: 'USD Coin',
    display: 'usdc',
    symbol: 'USDC',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/axelar/images/usdc.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/axelar/images/usdc.png'
    },
    coingecko_id: 'usd-coin'
  }, {
    description: "Frax's fractional-algorithmic stablecoin on Axelar",
    denom_units: [{
      denom: 'frax-wei',
      exponent: 0
    }, {
      denom: 'frax',
      exponent: 18
    }],
    base: 'frax-wei',
    name: 'Frax',
    display: 'frax',
    symbol: 'FRAX',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0x853d955acef822db058eb8505911ed77f175b99e'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/axelar/images/frax.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/axelar/images/frax.png'
    },
    coingecko_id: 'frax'
  }, {
    description: 'Dai stablecoin on Axelar',
    denom_units: [{
      denom: 'dai-wei',
      exponent: 0
    }, {
      denom: 'dai',
      exponent: 18
    }],
    base: 'dai-wei',
    name: 'Dai Stablecoin',
    display: 'dai',
    symbol: 'DAI',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0x6b175474e89094c44da98b954eedeac495271d0f'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/axelar/images/dai.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/axelar/images/dai.png'
    },
    coingecko_id: 'dai'
  }, {
    description: "Tether's USD stablecoin on Axelar",
    denom_units: [{
      denom: 'uusdt',
      exponent: 0
    }, {
      denom: 'usdt',
      exponent: 6
    }],
    base: 'uusdt',
    name: 'Tether USD',
    display: 'usdt',
    symbol: 'USDT',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0xdac17f958d2ee523a2206206994597c13d831ec7'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/axelar/images/usdt.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/axelar/images/usdt.png'
    },
    coingecko_id: 'tether'
  }, {
    description: 'Wrapped Ether on Axelar',
    denom_units: [{
      denom: 'weth-wei',
      exponent: 0
    }, {
      denom: 'weth',
      exponent: 18
    }],
    base: 'weth-wei',
    name: 'Wrapped Ether',
    display: 'weth',
    symbol: 'WETH',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/axelar/images/weth.png'
    },
    coingecko_id: 'weth'
  }, {
    description: 'Wrapped Bitcoin on Axelar',
    denom_units: [{
      denom: 'wbtc-satoshi',
      exponent: 0
    }, {
      denom: 'wbtc',
      exponent: 8
    }],
    base: 'wbtc-satoshi',
    name: 'Wrapped Bitcoin',
    display: 'wbtc',
    symbol: 'WBTC',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/axelar/images/wbtc.png'
    },
    coingecko_id: 'wrapped-bitcoin'
  }, {
    description: 'Aave on Axelar',
    denom_units: [{
      denom: 'aave-wei',
      exponent: 0
    }, {
      denom: 'aave',
      exponent: 18
    }],
    base: 'aave-wei',
    name: 'Aave',
    display: 'aave',
    symbol: 'AAVE',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/aave.svg'
    },
    coingecko_id: 'aave'
  }, {
    description: 'ApeCoin on Axelar',
    denom_units: [{
      denom: 'ape-wei',
      exponent: 0
    }, {
      denom: 'ape',
      exponent: 18
    }],
    base: 'ape-wei',
    name: 'ApeCoin',
    display: 'ape',
    symbol: 'APE',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0x4d224452801aced8b2f0aebe155379bb5d594381'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/ape.svg'
    },
    coingecko_id: 'apecoin'
  }, {
    description: 'Axie Infinity Shard on Axelar',
    denom_units: [{
      denom: 'axs-wei',
      exponent: 0
    }, {
      denom: 'axs',
      exponent: 18
    }],
    base: 'axs-wei',
    name: 'Axie Infinity Shard',
    display: 'axs',
    symbol: 'AXS',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0xbb0e17ef65f82ab018d8edd776e8dd940327b28b'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/axs.svg'
    },
    coingecko_id: 'axie-infinity'
  }, {
    description: 'Chainlink on Axelar',
    denom_units: [{
      denom: 'link-wei',
      exponent: 0
    }, {
      denom: 'link',
      exponent: 18
    }],
    base: 'link-wei',
    name: 'Chainlink',
    display: 'link',
    symbol: 'LINK',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0x514910771af9ca656af840dff83e8264ecf986ca'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/link.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/link.svg'
    },
    coingecko_id: 'chainlink'
  }, {
    description: 'Maker on Axelar',
    denom_units: [{
      denom: 'mkr-wei',
      exponent: 0
    }, {
      denom: 'mkr',
      exponent: 18
    }],
    base: 'mkr-wei',
    name: 'Maker',
    display: 'mkr',
    symbol: 'MKR',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/mkr.svg'
    },
    coingecko_id: 'maker'
  }, {
    description: 'Rai Reflex Index on Axelar',
    denom_units: [{
      denom: 'rai-wei',
      exponent: 0
    }, {
      denom: 'rai',
      exponent: 18
    }],
    base: 'rai-wei',
    name: 'Rai Reflex Index',
    display: 'rai',
    symbol: 'RAI',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0x03ab458634910aad20ef5f1c8ee96f1d6ac54919'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/rai.svg'
    },
    coingecko_id: 'rai'
  }, {
    description: 'Shiba Inu on Axelar',
    denom_units: [{
      denom: 'shib-wei',
      exponent: 0
    }, {
      denom: 'shib',
      exponent: 18
    }],
    base: 'shib-wei',
    name: 'Shiba Inu',
    display: 'shib',
    symbol: 'SHIB',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/shib.svg'
    },
    coingecko_id: 'shiba-inu'
  }, {
    description: 'Lido Staked Ether on Axelar',
    denom_units: [{
      denom: 'steth-wei',
      exponent: 0
    }, {
      denom: 'steth',
      exponent: 18
    }],
    base: 'steth-wei',
    name: 'Lido Staked Ether',
    display: 'steth',
    symbol: 'stETH',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0xae7ab96520de3a18e5e111b5eaab095312d7fe84'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/steth.svg'
    },
    coingecko_id: 'staked-ether'
  }, {
    description: 'Uniswap on Axelar',
    denom_units: [{
      denom: 'uni-wei',
      exponent: 0
    }, {
      denom: 'uni',
      exponent: 18
    }],
    base: 'uni-wei',
    name: 'Uniswap',
    display: 'uni',
    symbol: 'UNI',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/uni.svg'
    },
    coingecko_id: 'uniswap'
  }, {
    description: 'Chain on Axelar',
    denom_units: [{
      denom: 'xcn-wei',
      exponent: 0
    }, {
      denom: 'xcn',
      exponent: 18
    }],
    base: 'xcn-wei',
    name: 'Chain',
    display: 'xcn',
    symbol: 'XCN',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0xa2cd3d43c775978a96bdbf12d733d5a1ed94fb18'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/xcn.svg'
    },
    coingecko_id: 'chain-2'
  }, {
    description: 'Wrapped Polkadot on Axelar',
    denom_units: [{
      denom: 'dot-planck',
      exponent: 0
    }, {
      denom: 'dot',
      exponent: 10
    }],
    base: 'dot-planck',
    name: 'Wrapped Polkadot',
    display: 'dot',
    symbol: 'DOT',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'moonbeam',
        base_denom: '0xffffffff1fcacbd218edc0eba20fc2308c778080'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/polkadot/images/dot.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/polkadot/images/dot.png'
    },
    coingecko_id: 'polkadot'
  }, {
    description: 'Wrapped Moonbeam on Axelar',
    denom_units: [{
      denom: 'wglmr-wei',
      exponent: 0
    }, {
      denom: 'wglmr',
      exponent: 18
    }],
    base: 'wglmr-wei',
    name: 'Wrapped Moonbeam',
    display: 'wglmr',
    symbol: 'WGLMR',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'moonbeam',
        base_denom: '0xacc15dc74880c9944775448304b263d191c6077f'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/moonbeam/images/glmr.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/moonbeam/images/glmr.png'
    },
    coingecko_id: 'wrapped-moonbeam'
  }, {
    description: 'Wrapped Matic on Axelar',
    denom_units: [{
      denom: 'wmatic-wei',
      exponent: 0
    }, {
      denom: 'wmatic',
      exponent: 18
    }],
    base: 'wmatic-wei',
    name: 'Wrapped Matic',
    display: 'wmatic',
    symbol: 'WMATIC',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'polygon',
        base_denom: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/polygon/images/wmatic.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/polygon/images/wmatic.svg'
    },
    coingecko_id: 'matic-network'
  }, {
    description: 'Wrapped BNB on Axelar',
    denom_units: [{
      denom: 'wbnb-wei',
      exponent: 0
    }, {
      denom: 'wbnb',
      exponent: 18
    }],
    base: 'wbnb-wei',
    name: 'Wrapped BNB',
    display: 'wbnb',
    symbol: 'WBNB',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'binancesmartchain',
        base_denom: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/binancesmartchain/images/wbnb.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/binancesmartchain/images/wbnb.png'
    },
    coingecko_id: 'wbnb'
  }, {
    description: 'Binance USD on Axelar.',
    denom_units: [{
      denom: 'busd-wei',
      exponent: 0
    }, {
      denom: 'busd',
      exponent: 18
    }],
    base: 'busd-wei',
    name: 'Binance USD',
    display: 'busd',
    symbol: 'BUSD',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0x4fabb145d64652a948d72533023f6e7a623c7c53'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/busd.png'
    },
    coingecko_id: 'binance-usd'
  }, {
    description: 'Wrapped AVAX on Axelar.',
    denom_units: [{
      denom: 'wavax-wei',
      exponent: 0
    }, {
      denom: 'avax',
      exponent: 18
    }],
    base: 'wavax-wei',
    name: 'Wrapped AVAX',
    display: 'avax',
    symbol: 'WAVAX',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'avalanche',
        base_denom: '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/avalanche/images/wavax.svg'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'bandchain',
  assets: [{
    description: 'The native token of BandChain',
    denom_units: [{
      denom: 'uband',
      exponent: 0
    }, {
      denom: 'band',
      exponent: 6
    }],
    base: 'uband',
    display: 'band',
    name: 'Band Protocol',
    symbol: 'BAND',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/bandchain/images/band.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/bandchain/images/band.svg'
    },
    coingecko_id: 'band-protocol'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'beezee',
  assets: [{
    description: 'BeeZee native blockchain',
    denom_units: [{
      denom: 'ubze',
      exponent: 0
    }, {
      denom: 'bze',
      exponent: 6
    }],
    base: 'ubze',
    name: 'BeeZee',
    display: 'bze',
    symbol: 'BZE',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/beezee/images/bze.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/beezee/images/bze.svg'
    },
    coingecko_id: 'bzedge'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'bitcanna',
  assets: [{
    description: 'The BCNA coin is the transactional token within the BitCanna network, serving the legal cannabis industry through its payment network, supply chain and trust network.',
    denom_units: [{
      denom: 'ubcna',
      exponent: 0
    }, {
      denom: 'bcna',
      exponent: 6
    }],
    base: 'ubcna',
    display: 'bcna',
    name: 'BitCanna',
    symbol: 'BCNA',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/bitcanna/images/bcna.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/bitcanna/images/bcna.svg'
    },
    coingecko_id: 'bitcanna'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'bitsong',
  assets: [{
    description: 'BitSong Native Token',
    denom_units: [{
      denom: 'ubtsg',
      exponent: 0
    }, {
      denom: 'btsg',
      exponent: 6
    }],
    base: 'ubtsg',
    name: 'BitSong',
    display: 'btsg',
    symbol: 'BTSG',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/bitsong/images/btsg.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/bitsong/images/btsg.svg'
    },
    type_asset: 'sdk.coin',
    coingecko_id: 'bitsong'
  }, {
    description: 'Adam Clay a BitSong Music FanToken',
    denom_units: [{
      denom: 'ft2D8E7041556CE93E1EFD66C07C45D551A6AAAE09',
      exponent: 0
    }, {
      denom: 'clay',
      exponent: 6
    }],
    base: 'ft2D8E7041556CE93E1EFD66C07C45D551A6AAAE09',
    name: 'Adam Clay FanToken',
    display: 'clay',
    symbol: 'CLAY',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/bitsong/images/ft2D8E7041556CE93E1EFD66C07C45D551A6AAAE09.png'
    }
  }, {
    description: 'Nicola Fasano a BitSong Music FanToken',
    denom_units: [{
      denom: 'ft25B30C386CDDEBD1413D5AE1180956AE9EB3B9F7',
      exponent: 0
    }, {
      denom: 'fasano',
      exponent: 6
    }],
    base: 'ft25B30C386CDDEBD1413D5AE1180956AE9EB3B9F7',
    name: 'Nicola Fasano Fantoken',
    display: 'fasano',
    symbol: 'FASANO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/bitsong/images/ft25B30C386CDDEBD1413D5AE1180956AE9EB3B9F7.png'
    }
  }, {
    description: 'Delta 9 a BitSong Music FanToken',
    denom_units: [{
      denom: 'ft575B10B0CEE2C164D9ED6A96313496F164A9607C',
      exponent: 0
    }, {
      denom: 'd9x',
      exponent: 6
    }],
    base: 'ft575B10B0CEE2C164D9ED6A96313496F164A9607C',
    name: 'Delta 9 Fantoken',
    display: 'd9x',
    symbol: 'D9X',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/bitsong/images/ft575B10B0CEE2C164D9ED6A96313496F164A9607C.png'
    }
  }, {
    description: 'FONTI a BitSong Music FanToken',
    denom_units: [{
      denom: 'ft56664FC98A2CF5F4FBAC3566D1A11D891AD88305',
      exponent: 0
    }, {
      denom: 'fonti',
      exponent: 6
    }],
    base: 'ft56664FC98A2CF5F4FBAC3566D1A11D891AD88305',
    name: 'FONTI Fantoken',
    display: 'fonti',
    symbol: 'FONTI',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/bitsong/images/ft56664FC98A2CF5F4FBAC3566D1A11D891AD88305.png'
    }
  }, {
    description: 'BlackJack a BitSong Music FanToken',
    denom_units: [{
      denom: 'ft52EEB0EE509AC546ED92EAC8591F731F213DDD16',
      exponent: 0
    }, {
      denom: 'bjks',
      exponent: 6
    }],
    base: 'ft52EEB0EE509AC546ED92EAC8591F731F213DDD16',
    name: 'BlackJack Fantoken',
    display: 'bjks',
    symbol: 'BJKS',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/bitsong/images/ft52EEB0EE509AC546ED92EAC8591F731F213DDD16.png'
    }
  }, {
    description: 'Rawanne a BitSong Music FanToken',
    denom_units: [{
      denom: 'ftE4903ECC861CA45F2C2BC7EAB8255D2E6E87A33A',
      exponent: 0
    }, {
      denom: 'rwne',
      exponent: 6
    }],
    base: 'ftE4903ECC861CA45F2C2BC7EAB8255D2E6E87A33A',
    name: 'Rawanne Fantoken',
    display: 'rwne',
    symbol: 'RWNE',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/bitsong/images/ftE4903ECC861CA45F2C2BC7EAB8255D2E6E87A33A.png'
    }
  }, {
    description: 'Enmoda a BitSong Music FanToken',
    denom_units: [{
      denom: 'ft85AE1716C5E39EA6D64BBD7898C3899A7B500626',
      exponent: 0
    }, {
      denom: 'enmoda',
      exponent: 6
    }],
    base: 'ft85AE1716C5E39EA6D64BBD7898C3899A7B500626',
    name: 'Enmoda Fantoken',
    display: 'enmoda',
    symbol: 'ENMODA',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/bitsong/images/ft85AE1716C5E39EA6D64BBD7898C3899A7B500626.png'
    }
  }, {
    description: '404Deep Records a BitSong Music FanToken',
    denom_units: [{
      denom: 'ft99091610CCC66F4277C66D14AF2BC4C5EE52E27A',
      exponent: 0
    }, {
      denom: '404dr',
      exponent: 6
    }],
    base: 'ft99091610CCC66F4277C66D14AF2BC4C5EE52E27A',
    name: '404Deep Records Fantoken',
    display: '404dr',
    symbol: '404DR',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/bitsong/images/ft99091610CCC66F4277C66D14AF2BC4C5EE52E27A.png'
    }
  }, {
    description: 'N43 a BitSong Music FanToken',
    denom_units: [{
      denom: 'ft387C1C279D962ED80C09C1D592A92C4275FD7C5D',
      exponent: 0
    }, {
      denom: 'n43',
      exponent: 6
    }],
    base: 'ft387C1C279D962ED80C09C1D592A92C4275FD7C5D',
    name: 'N43 Fantoken',
    display: 'n43',
    symbol: 'N43',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/bitsong/images/ft387C1C279D962ED80C09C1D592A92C4275FD7C5D.png'
    }
  }, {
    description: 'Puro Lobo a BitSong Music FanToken',
    denom_units: [{
      denom: 'ft24C9FA4F10B0F235F4A815B15FC774E046A2B2EB',
      exponent: 0
    }, {
      denom: 'lobo',
      exponent: 6
    }],
    base: 'ft24C9FA4F10B0F235F4A815B15FC774E046A2B2EB',
    name: 'Puro Lobo Fantoken',
    display: 'lobo',
    symbol: 'LOBO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/bitsong/images/ft24C9FA4F10B0F235F4A815B15FC774E046A2B2EB.png'
    }
  }, {
    description: 'Vibranium a BitSong Music FanToken',
    denom_units: [{
      denom: 'ft7020C2A8E984EEBCBB383E91CD6FBB067BB2272B',
      exponent: 0
    }, {
      denom: 'vibra',
      exponent: 6
    }],
    base: 'ft7020C2A8E984EEBCBB383E91CD6FBB067BB2272B',
    name: 'Vibranium Fantoken',
    display: 'vibra',
    symbol: 'VIBRA',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/bitsong/images/ft7020C2A8E984EEBCBB383E91CD6FBB067BB2272B.png'
    }
  }, {
    description: 'Karina a BitSong Music FanToken',
    denom_units: [{
      denom: 'ft2DD67F5D99E9A141142B48474FA7B6B3FF00A3FE',
      exponent: 0
    }, {
      denom: 'karina',
      exponent: 6
    }],
    base: 'ft2DD67F5D99E9A141142B48474FA7B6B3FF00A3FE',
    name: 'Karina Fantoken',
    display: 'karina',
    symbol: 'KARINA',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/bitsong/images/ft2DD67F5D99E9A141142B48474FA7B6B3FF00A3FE.png'
    }
  }, {
    description: 'Luca Testa a BitSong Music FanToken',
    denom_units: [{
      denom: 'ft4B030260D99E3ABE2B604EA2B33BAF3C085CDA12',
      exponent: 0
    }, {
      denom: 'testa',
      exponent: 6
    }],
    base: 'ft4B030260D99E3ABE2B604EA2B33BAF3C085CDA12',
    name: 'Luca Testa Fantoken',
    display: 'testa',
    symbol: 'TESTA',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/bitsong/images/ft4B030260D99E3ABE2B604EA2B33BAF3C085CDA12.png'
    }
  }, {
    description: 'Carolina Marquez a BitSong Music FanToken',
    denom_units: [{
      denom: 'ftD4B6290EDEE1EC7B97AB5A1DC6C177EFD08ADCC3',
      exponent: 0
    }, {
      denom: 'cmqz',
      exponent: 6
    }],
    base: 'ftD4B6290EDEE1EC7B97AB5A1DC6C177EFD08ADCC3',
    name: 'Carolina Marquez Fantoken',
    display: 'cmqz',
    symbol: 'CMQZ',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/bitsong/images/ftD4B6290EDEE1EC7B97AB5A1DC6C177EFD08ADCC3.png'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'bostrom',
  assets: [{
    description: 'The staking token of Bostrom',
    denom_units: [{
      denom: 'boot',
      exponent: 0
    }],
    base: 'boot',
    name: 'Bostrom',
    display: 'boot',
    symbol: 'BOOT',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/bostrom/images/boot.png'
    },
    coingecko_id: 'bostrom'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'canto',
  assets: [{
    description: 'Canto is a Layer-1 blockchain built to deliver on the promise of DeFi',
    denom_units: [{
      denom: 'acanto',
      exponent: 0
    }, {
      denom: 'canto',
      exponent: 18
    }],
    base: 'acanto',
    name: 'Canto',
    display: 'canto',
    symbol: 'CANTO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/canto/images/canto.png'
    },
    coingecko_id: 'canto'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'carbon',
  assets: [{
    description: 'The native token of Carbon',
    denom_units: [{
      denom: 'swth',
      exponent: 0,
      aliases: []
    }, {
      denom: 'dswth',
      exponent: 8,
      aliases: ['SWTH']
    }],
    base: 'swth',
    name: 'Carbon',
    display: 'dswth',
    symbol: 'SWTH',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/carbon/images/swth.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/carbon/images/swth.svg'
    },
    coingecko_id: 'switcheo'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'cerberus',
  assets: [{
    description: 'The native token of Cerberus Chain',
    denom_units: [{
      denom: 'ucrbrus',
      exponent: 0
    }, {
      denom: 'crbrus',
      exponent: 6
    }],
    base: 'ucrbrus',
    name: 'Cerberus',
    display: 'crbrus',
    symbol: 'CRBRUS',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/cerberus/images/crbrus.png'
    },
    coingecko_id: 'cerberus-2'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'chain4energy',
  assets: [{
    description: 'The native token of Chain4Energy',
    denom_units: [{
      denom: 'uc4e',
      exponent: 0
    }, {
      denom: 'c4e',
      exponent: 6
    }],
    base: 'uc4e',
    name: 'Chain4Energy',
    display: 'c4e',
    symbol: 'C4E',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/chain4energy/images/c4e.png'
    },
    coingecko_id: ''
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'cheqd',
  assets: [{
    description: 'Native token for the cheqd network',
    denom_units: [{
      denom: 'ncheq',
      exponent: 0
    }, {
      denom: 'cheq',
      exponent: 9
    }],
    base: 'ncheq',
    display: 'cheq',
    name: 'cheqd',
    symbol: 'CHEQ',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/cheqd/images/cheq.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/cheqd/images/cheq.svg'
    },
    coingecko_id: 'cheqd-network'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'chihuahua',
  assets: [{
    description: 'The native token of Chihuahua Chain',
    denom_units: [{
      denom: 'uhuahua',
      exponent: 0
    }, {
      denom: 'huahua',
      exponent: 6
    }],
    base: 'uhuahua',
    name: 'Chihuahua',
    display: 'huahua',
    symbol: 'HUAHUA',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/chihuahua/images/huahua.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/chihuahua/images/huahua.svg'
    },
    coingecko_id: 'chihuahua-token'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'chronicnetwork',
  assets: [{
    description: 'The CHT coin is the governance token within the Chronic Chain network, aimed to serve the entire cannabis community through its payment network, supply chain and trust network.',
    denom_units: [{
      denom: 'ucht',
      exponent: 0
    }, {
      denom: 'cht',
      exponent: 6
    }],
    base: 'ucht',
    display: 'cht',
    name: 'Chronic Token',
    symbol: 'CHT',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/chronicnetwork/images/cht.png'
    },
    coingecko_id: 'cht'
  }, {
    description: 'The CGAS coin is the transactional token within the Chronic Chain network, aimed to serve the entire cannabis community through its payment network, supply chain and trust network.',
    denom_units: [{
      denom: 'ucgas',
      exponent: 0
    }, {
      denom: 'cgas',
      exponent: 6
    }],
    base: 'ucgas',
    display: 'cgas',
    name: 'Chronic Gas',
    symbol: 'CGAS',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/chronicnetwork/images/cgas.png'
    },
    coingecko_id: 'cgas'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'comdex',
  assets: [{
    description: 'Native Token of Comdex Protocol',
    denom_units: [{
      denom: 'ucmdx',
      exponent: 0
    }, {
      denom: 'cmdx',
      exponent: 6
    }],
    base: 'ucmdx',
    name: 'Comdex',
    display: 'cmdx',
    symbol: 'CMDX',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/comdex/images/cmdx.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/comdex/images/cmdx.svg'
    },
    coingecko_id: 'comdex'
  }, {
    description: 'Governance Token of Harbor protocol on Comdex network',
    denom_units: [{
      denom: 'uharbor',
      exponent: 0
    }, {
      denom: 'harbor',
      exponent: 6
    }],
    base: 'uharbor',
    name: 'Harbor',
    display: 'harbor',
    symbol: 'HARBOR',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/comdex/images/harbor.png'
    },
    coingecko_id: ''
  }, {
    description: 'Stable Token of Harbor protocol on Comdex network',
    denom_units: [{
      denom: 'ucmst',
      exponent: 0
    }, {
      denom: 'cmst',
      exponent: 6
    }],
    base: 'ucmst',
    name: 'CMST',
    display: 'cmst',
    symbol: 'CMST',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/comdex/images/cmst.png'
    },
    coingecko_id: 'composite'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'commercionetwork',
  assets: [{
    description: 'The native token of Commercio.network',
    denom_units: [{
      denom: 'ucommercio',
      exponent: 0,
      aliases: []
    }, {
      denom: 'commercio',
      exponent: 6,
      aliases: []
    }],
    base: 'ucommercio',
    display: 'commercio',
    name: 'Commercio',
    symbol: 'COM',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/commercionetwork/images/com.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/commercionetwork/images/com.svg'
    }
  }, {
    description: 'The cash credit token of Commercio.network',
    denom_units: [{
      denom: 'uccc',
      exponent: 0,
      aliases: []
    }, {
      denom: 'ccc',
      exponent: 6,
      aliases: []
    }],
    base: 'uccc',
    display: 'ccc',
    name: 'Commercio Cash Credit',
    symbol: 'CCC',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/commercionetwork/images/ccc.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/commercionetwork/images/ccc.svg'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'cosmoshub',
  assets: [{
    description: 'The native staking and governance token of the Cosmos Hub.',
    denom_units: [{
      denom: 'uatom',
      exponent: 0
    }, {
      denom: 'atom',
      exponent: 6
    }],
    base: 'uatom',
    name: 'Cosmos Hub Atom',
    display: 'atom',
    symbol: 'ATOM',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.svg'
    },
    coingecko_id: 'cosmos'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'crescent',
  assets: [{
    description: 'The native token of Crescent',
    denom_units: [{
      denom: 'ucre',
      exponent: 0
    }, {
      denom: 'cre',
      exponent: 6
    }],
    base: 'ucre',
    name: 'Crescent',
    display: 'cre',
    symbol: 'CRE',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/crescent/images/cre.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/crescent/images/cre.svg'
    },
    coingecko_id: 'crescent-network'
  }, {
    description: 'The bonded token of Crescent',
    denom_units: [{
      denom: 'ubcre',
      exponent: 0
    }, {
      denom: 'bcre',
      exponent: 6
    }],
    base: 'ubcre',
    name: 'Bonded Crescent',
    display: 'bcre',
    symbol: 'bCRE',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/crescent/images/bcre.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/crescent/images/bcre.svg'
    },
    coingecko_id: 'liquid-staking-crescent'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'cronos',
  assets: [{
    description: 'Cronos Chain - Get Instant DApp Portability with EVM Support',
    denom_units: [{
      denom: 'basecro',
      exponent: 0
    }, {
      denom: 'cro',
      exponent: 18
    }],
    base: 'basecro',
    name: 'Cronos',
    display: 'cro',
    symbol: 'CRO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/cronos/images/cronos.png'
    },
    coingecko_id: 'crypto-com-chain'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'cryptoorgchain',
  assets: [{
    description: 'CRO coin is the token for the Crypto.com platform.',
    denom_units: [{
      denom: 'basecro',
      exponent: 0
    }, {
      denom: 'cro',
      exponent: 8
    }],
    base: 'basecro',
    name: 'Cronos',
    display: 'cro',
    symbol: 'CRO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/cronos/images/cronos.png'
    },
    coingecko_id: 'crypto-com-chain'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'cudos',
  assets: [{
    description: 'The native token of the Cudos blockchain',
    denom_units: [{
      denom: 'acudos',
      exponent: 0,
      aliases: ['attocudos']
    }, {
      denom: 'cudos',
      exponent: 18
    }],
    base: 'acudos',
    name: 'Cudos',
    display: 'cudos',
    symbol: 'CUDOS',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/cudos/images/cudos.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/cudos/images/cudos.svg'
    },
    coingecko_id: 'cudos'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'decentr',
  assets: [{
    description: 'The native token of Decentr',
    denom_units: [{
      denom: 'udec',
      exponent: 0
    }, {
      denom: 'dec',
      exponent: 6
    }],
    base: 'udec',
    name: 'Decentr',
    display: 'dec',
    symbol: 'DEC',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/decentr/images/dec.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/decentr/images/dec.svg'
    },
    coingecko_id: 'decentr'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'desmos',
  assets: [{
    description: 'The native token of Desmos',
    denom_units: [{
      denom: 'udsm',
      exponent: 0
    }, {
      denom: 'dsm',
      exponent: 6
    }],
    base: 'udsm',
    name: 'Desmos',
    display: 'dsm',
    symbol: 'DSM',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/desmos/images/dsm.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/desmos/images/dsm.svg'
    },
    coingecko_id: 'desmos'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'dig',
  assets: [{
    description: 'Native token of Dig Chain',
    denom_units: [{
      denom: 'udig',
      exponent: 0
    }, {
      denom: 'dig',
      exponent: 6
    }],
    base: 'udig',
    name: 'Dig Chain',
    display: 'dig',
    symbol: 'DIG',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/dig/images/dig.png'
    },
    coingecko_id: 'dig-chain'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'dyson',
  assets: [{
    description: 'The native staking and governance token of the Dyson Protocol',
    denom_units: [{
      denom: 'dys',
      exponent: 0
    }],
    base: 'dys',
    name: 'Dys',
    display: 'dys',
    symbol: 'DYS',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/dyson/images/dys.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/dyson/images/dys.svg'
    },
    coingecko_id: ''
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'echelon',
  assets: [{
    description: 'Echelon - a scalable EVM on Cosmos, built on Proof-of-Stake with fast-finality that prioritizes interoperability and novel economics',
    denom_units: [{
      denom: 'aechelon',
      exponent: 0
    }, {
      denom: 'echelon',
      exponent: 18
    }],
    base: 'aechelon',
    name: 'Echelon',
    display: 'echelon',
    symbol: 'ECH',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/echelon/images/echelon.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/echelon/images/logo.png'
    },
    coingecko_id: 'echelon'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'emoney',
  assets: [{
    description: 'e-Money NGM staking token. In addition to earning staking rewards the token is bought back and burned based on e-Money stablecoin inflation.',
    denom_units: [{
      denom: 'ungm',
      exponent: 0
    }, {
      denom: 'ngm',
      exponent: 6
    }],
    base: 'ungm',
    name: 'e-Money',
    display: 'ngm',
    symbol: 'NGM',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/emoney/images/ngm.png'
    },
    coingecko_id: 'e-money'
  }, {
    description: 'e-Money EUR stablecoin. Audited and backed by fiat EUR deposits and government bonds.',
    denom_units: [{
      denom: 'eeur',
      exponent: 0
    }, {
      denom: 'eur',
      exponent: 6
    }],
    base: 'eeur',
    name: 'e-Money EUR',
    display: 'eur',
    symbol: 'EEUR',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/emoney/images/eeur.png'
    },
    coingecko_id: 'e-money-eur'
  }, {
    description: 'e-Money CHF stablecoin. Audited and backed by fiat CHF deposits and government bonds.',
    denom_units: [{
      denom: 'echf',
      exponent: 0
    }, {
      denom: 'echf',
      exponent: 6
    }],
    base: 'echf',
    name: 'e-Money CHF',
    display: 'chf',
    symbol: 'ECHF',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/emoney/images/echf.png'
    },
    coingecko_id: ''
  }, {
    description: 'e-Money NOK stablecoin. Audited and backed by fiat NOK deposits and government bonds.',
    denom_units: [{
      denom: 'enok',
      exponent: 0
    }, {
      denom: 'enok',
      exponent: 6
    }],
    base: 'enok',
    name: 'e-Money NOK',
    display: 'nok',
    symbol: 'ENOK',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/emoney/images/enok.png'
    },
    coingecko_id: ''
  }, {
    description: 'e-Money DKK stablecoin. Audited and backed by fiat DKK deposits and government bonds.',
    denom_units: [{
      denom: 'edkk',
      exponent: 0
    }, {
      denom: 'edkk',
      exponent: 6
    }],
    base: 'edkk',
    name: 'e-Money DKK',
    display: 'dkk',
    symbol: 'EDKK',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/emoney/images/edkk.png'
    },
    coingecko_id: ''
  }, {
    description: 'e-Money SEK stablecoin. Audited and backed by fiat SEK deposits and government bonds.',
    denom_units: [{
      denom: 'esek',
      exponent: 0
    }, {
      denom: 'esek',
      exponent: 6
    }],
    base: 'esek',
    name: 'e-Money SEK',
    display: 'sek',
    symbol: 'ESEK',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/emoney/images/esek.png'
    },
    coingecko_id: ''
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'ethos',
  assets: [{
    description: 'The native token of Ethos',
    denom_units: [{
      denom: 'aRYT',
      exponent: 0
    }, {
      denom: 'RYT',
      exponent: 18
    }],
    base: 'aRYT',
    name: 'RYT',
    display: 'RYT',
    symbol: 'RYT',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/ethos/images/ethos.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/ethos/images/ethos.png'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'evmos',
  assets: [{
    description: 'The native EVM, governance and staking token of the Evmos Hub',
    denom_units: [{
      denom: 'aevmos',
      exponent: 0
    }, {
      denom: 'evmos',
      exponent: 18
    }],
    base: 'aevmos',
    name: 'Evmos',
    display: 'evmos',
    symbol: 'EVMOS',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/evmos/images/evmos.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/evmos/images/evmos.png'
    },
    coingecko_id: 'evmos'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'fetchhub',
  assets: [{
    description: 'The native staking and governance token of the Fetch Hub.',
    denom_units: [{
      denom: 'afet',
      exponent: 0
    }, {
      denom: 'fet',
      exponent: 18
    }],
    base: 'afet',
    name: 'fetch-ai',
    display: 'fet',
    symbol: 'FET',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/fetchhub/images/fet.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/fetchhub/images/fet.svg'
    },
    coingecko_id: 'fetch-ai'
  }, {
    description: 'The MOBX coin rewards the use of eco-friendly micromobility transportation.',
    denom_units: [{
      denom: 'nanomobx',
      exponent: 0
    }, {
      denom: 'mobx',
      exponent: 9
    }],
    base: 'nanomobx',
    name: 'MOBIX',
    display: 'mobx',
    symbol: 'MOBX',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/fetchhub/images/mobx.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/fetchhub/images/mobx.png'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'firmachain',
  assets: [{
    description: 'The native token of FirmaChain',
    denom_units: [{
      denom: 'ufct',
      exponent: 0
    }, {
      denom: 'fct',
      exponent: 6
    }],
    base: 'ufct',
    name: 'FirmaChain',
    display: 'fct',
    symbol: 'FCT',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/firmachain/images/fct.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/firmachain/images/fct.svg'
    },
    coingecko_id: 'firmachain'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'galaxy',
  assets: [{
    description: 'GLX is the staking token of the Galaxy Chain',
    denom_units: [{
      denom: 'uglx',
      exponent: 0
    }, {
      denom: 'glx',
      exponent: 6
    }],
    base: 'uglx',
    name: 'Galaxy',
    display: 'glx',
    symbol: 'GLX',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/galaxy/images/glx.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/galaxy/images/glx.png'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'genesisl1',
  assets: [{
    description: 'L1 coin is the GenesisL1 blockchain utility, governance and EVM token',
    denom_units: [{
      denom: 'el1',
      exponent: 0
    }, {
      denom: 'l1',
      exponent: 18
    }],
    base: 'el1',
    name: 'GenesisL1',
    display: 'l1',
    symbol: 'L1',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/genesisl1/images/l1.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/genesisl1/images/l1.png'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'gravitybridge',
  assets: [{
    description: 'The native token of Gravity Bridge',
    denom_units: [{
      denom: 'ugraviton',
      exponent: 0
    }, {
      denom: 'graviton',
      exponent: 6
    }],
    base: 'ugraviton',
    name: 'Graviton',
    display: 'graviton',
    symbol: 'GRAV',
    coingecko_id: 'graviton',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/gravitybridge/images/grav.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/gravitybridge/images/grav.png'
    }
  }, {
    description: 'pSTAKE is a liquid staking protocol unlocking the liquidity of staked assets.',
    denom_units: [{
      denom: 'gravity0xfB5c6815cA3AC72Ce9F5006869AE67f18bF77006',
      exponent: 0
    }, {
      denom: 'pstake',
      exponent: 18
    }],
    base: 'gravity0xfB5c6815cA3AC72Ce9F5006869AE67f18bF77006',
    name: 'pSTAKE Finance',
    display: 'pstake',
    symbol: 'PSTAKE',
    traces: [{
      type: 'liquid-stake',
      counterparty: {
        chain_name: 'persistence',
        base_denom: 'uxprt'
      },
      provider: 'Persistence'
    }, {
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0xfB5c6815cA3AC72Ce9F5006869AE67f18bF77006'
      },
      provider: 'Gravity Bridge'
    }],
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/persistence/images/pstake.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/persistence/images/pstake.svg'
    },
    coingecko_id: 'pstake-finance'
  }, {
    description: 'Gravity Bridge WETH',
    denom_units: [{
      denom: 'gravity0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
      exponent: 0
    }, {
      denom: 'gweth',
      exponent: 18
    }],
    base: 'gravity0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
    name: 'Wrapped Ethereum',
    display: 'gweth',
    symbol: 'WETH',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/weth.svg'
    },
    traces: [{
      type: 'wrapped',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: 'wei'
      },
      provider: 'Ethereum'
    }, {
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
      },
      provider: 'Gravity Bridge'
    }]
  }, {
    description: 'Gravity Bridge USDC',
    denom_units: [{
      denom: 'gravity0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',
      exponent: 0
    }, {
      denom: 'gusdc',
      exponent: 6
    }],
    base: 'gravity0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',
    name: 'USD Coin',
    display: 'gusdc',
    symbol: 'USDC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/usdc.svg'
    },
    traces: [{
      type: 'synthetic',
      counterparty: {
        chain_name: 'forex',
        base_denom: 'USD'
      },
      provider: 'Circle'
    }, {
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'
      },
      provider: 'Gravity Bridge'
    }]
  }, {
    description: 'Gravity Bridge USDT',
    denom_units: [{
      denom: 'gravity0xdAC17F958D2ee523a2206206994597C13D831ec7',
      exponent: 0
    }, {
      denom: 'gusdt',
      exponent: 6
    }],
    base: 'gravity0xdAC17F958D2ee523a2206206994597C13D831ec7',
    name: 'Tether USD',
    display: 'gusdt',
    symbol: 'USDT',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/usdt.svg'
    },
    traces: [{
      type: 'synthetic',
      counterparty: {
        chain_name: 'forex',
        base_denom: 'USD'
      },
      provider: 'Tether'
    }, {
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0xdac17f958d2ee523a2206206994597c13d831ec7'
      },
      provider: 'Gravity Bridge'
    }]
  }, {
    description: 'Gravity Bridge WBTC',
    denom_units: [{
      denom: 'gravity0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599',
      exponent: 0
    }, {
      denom: 'gwbtc',
      exponent: 8
    }],
    base: 'gravity0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599',
    name: 'Wrapped Bitcoin',
    display: 'gwbtc',
    symbol: 'WBTC',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/wbtc.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/wbtc.svg'
    },
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'bitcoin',
        base_denom: 'sat'
      },
      provider: 'BitGo, Kyber, and Ren'
    }, {
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599'
      },
      provider: 'Gravity Bridge'
    }]
  }, {
    description: 'Gravity Bridge DAI',
    denom_units: [{
      denom: 'gravity0x6B175474E89094C44Da98b954EedeAC495271d0F',
      exponent: 0
    }, {
      denom: 'gdai',
      exponent: 18
    }],
    base: 'gravity0x6B175474E89094C44Da98b954EedeAC495271d0F',
    name: 'Dai Stablecoin',
    display: 'gdai',
    symbol: 'DAI',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/dai.svg'
    },
    traces: [{
      type: 'synthetic',
      counterparty: {
        chain_name: 'forex',
        base_denom: 'USD'
      },
      provider: 'MakerDAO'
    }, {
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0x6b175474e89094c44da98b954eedeac495271d0f'
      },
      provider: 'Gravity Bridge'
    }]
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'idep',
  assets: [{
    description: 'The native token of IDEP chain',
    denom_units: [{
      denom: 'IDEP',
      exponent: 6,
      aliases: []
    }, {
      denom: 'idep',
      exponent: 0,
      aliases: []
    }],
    base: 'idep',
    name: 'IDEP',
    display: 'IDEP',
    symbol: 'IDEP',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/idep/images/idep.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/idep/images/idep.png'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'impacthub',
  assets: [{
    description: 'The native token of IXO Chain',
    denom_units: [{
      denom: 'uixo',
      exponent: 0
    }, {
      denom: 'ixo',
      exponent: 6
    }],
    base: 'uixo',
    name: 'IXO',
    display: 'ixo',
    symbol: 'IXO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/impacthub/images/ixo.png'
    },
    coingecko_id: 'ixo'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'imversed',
  assets: [{
    description: 'The native EVM, governance and staking token of the Imversed',
    denom_units: [{
      denom: 'aimv',
      exponent: 0
    }, {
      denom: 'imv',
      exponent: 18
    }],
    base: 'aimv',
    name: 'IMV',
    display: 'imv',
    symbol: 'IMV',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/imversed/images/imversed.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/imversed/images/imversed.png'
    },
    coingecko_id: 'imv'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'injective',
  assets: [{
    description: 'The INJ token is the native governance token for the Injective chain.',
    denom_units: [{
      denom: 'inj',
      exponent: 0
    }, {
      denom: 'INJ',
      exponent: 18
    }],
    base: 'inj',
    name: 'Injective',
    display: 'INJ',
    symbol: 'INJ',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/injective/images/inj.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/injective/images/inj.svg'
    },
    coingecko_id: 'injective-protocol'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'irisnet',
  assets: [{
    description: 'The IRIS token is the native governance token for the IrisNet chain.',
    denom_units: [{
      denom: 'uiris',
      exponent: 0
    }, {
      denom: 'iris',
      exponent: 6
    }],
    base: 'uiris',
    name: 'IRISnet',
    display: 'iris',
    symbol: 'IRIS',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/irisnet/images/iris.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/irisnet/images/iris.svg'
    },
    coingecko_id: 'iris-network'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'jackal',
  assets: [{
    description: 'The native staking and governance token of Jackal.',
    denom_units: [{
      denom: 'ujkl',
      exponent: 0
    }, {
      denom: 'jkl',
      exponent: 6
    }],
    base: 'ujkl',
    name: 'Jackal',
    display: 'jkl',
    symbol: 'JKL',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/jackal/images/jkl.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/jackal/images/jkl.svg'
    },
    coingecko_id: 'jackal-protocol'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'juno',
  assets: [{
    description: 'The native token of JUNO Chain',
    denom_units: [{
      denom: 'ujuno',
      exponent: 0
    }, {
      denom: 'juno',
      exponent: 6
    }],
    base: 'ujuno',
    name: 'Juno',
    display: 'juno',
    symbol: 'JUNO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/juno.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/juno.svg'
    },
    coingecko_id: 'juno-network'
  }, {
    description: 'The native token cw20 for Neta on Juno Chain',
    type_asset: 'cw20',
    address: 'juno168ctmpyppk90d34p3jjy658zf5a5l3w8wk35wht6ccqj4mr0yv8s4j5awr',
    denom_units: [{
      denom: 'cw20:juno168ctmpyppk90d34p3jjy658zf5a5l3w8wk35wht6ccqj4mr0yv8s4j5awr',
      exponent: 0
    }, {
      denom: 'neta',
      exponent: 6
    }],
    base: 'cw20:juno168ctmpyppk90d34p3jjy658zf5a5l3w8wk35wht6ccqj4mr0yv8s4j5awr',
    name: 'Neta',
    display: 'neta',
    symbol: 'NETA',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/neta.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/neta.svg'
    },
    coingecko_id: 'neta'
  }, {
    description: 'The native token cw20 for Marble DAO on Juno Chain',
    type_asset: 'cw20',
    address: 'juno1g2g7ucurum66d42g8k5twk34yegdq8c82858gz0tq2fc75zy7khssgnhjl',
    denom_units: [{
      denom: 'cw20:juno1g2g7ucurum66d42g8k5twk34yegdq8c82858gz0tq2fc75zy7khssgnhjl',
      exponent: 0
    }, {
      denom: 'marble',
      exponent: 3
    }],
    base: 'cw20:juno1g2g7ucurum66d42g8k5twk34yegdq8c82858gz0tq2fc75zy7khssgnhjl',
    name: 'Marble',
    display: 'marble',
    symbol: 'MARBLE',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/marble.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/marble.svg'
    },
    coingecko_id: 'marble'
  }, {
    description: 'Hope Galaxy is an NFT collection based on its own native Token $HOPE, a cw20 token on Juno chain.',
    type_asset: 'cw20',
    address: 'juno1re3x67ppxap48ygndmrc7har2cnc7tcxtm9nplcas4v0gc3wnmvs3s807z',
    denom_units: [{
      denom: 'cw20:juno1re3x67ppxap48ygndmrc7har2cnc7tcxtm9nplcas4v0gc3wnmvs3s807z',
      exponent: 0
    }, {
      denom: 'hope',
      exponent: 6
    }],
    base: 'cw20:juno1re3x67ppxap48ygndmrc7har2cnc7tcxtm9nplcas4v0gc3wnmvs3s807z',
    name: 'Hope Galaxy',
    display: 'hope',
    symbol: 'HOPE',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/hope.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/hope.svg'
    },
    coingecko_id: 'hope-galaxy'
  }, {
    description: 'Racoon aims to simplify accessibility to AI, NFTs and Gambling on the Cosmos Ecosystem',
    type_asset: 'cw20',
    address: 'juno1r4pzw8f9z0sypct5l9j906d47z998ulwvhvqe5xdwgy8wf84583sxwh0pa',
    denom_units: [{
      denom: 'cw20:juno1r4pzw8f9z0sypct5l9j906d47z998ulwvhvqe5xdwgy8wf84583sxwh0pa',
      exponent: 0
    }, {
      denom: 'rac',
      exponent: 6
    }],
    base: 'cw20:juno1r4pzw8f9z0sypct5l9j906d47z998ulwvhvqe5xdwgy8wf84583sxwh0pa',
    name: 'Racoon',
    display: 'rac',
    symbol: 'RAC',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/rac.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/rac.svg'
    },
    coingecko_id: 'racoon'
  }, {
    description: 'The native token of Marble DEX on Juno Chain',
    type_asset: 'cw20',
    address: 'juno1y9rf7ql6ffwkv02hsgd4yruz23pn4w97p75e2slsnkm0mnamhzysvqnxaq',
    denom_units: [{
      denom: 'cw20:juno1y9rf7ql6ffwkv02hsgd4yruz23pn4w97p75e2slsnkm0mnamhzysvqnxaq',
      exponent: 0
    }, {
      denom: 'block',
      exponent: 6
    }],
    base: 'cw20:juno1y9rf7ql6ffwkv02hsgd4yruz23pn4w97p75e2slsnkm0mnamhzysvqnxaq',
    name: 'Block',
    display: 'block',
    symbol: 'BLOCK',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/block.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/block.svg'
    }
  }, {
    description: 'The DAO token to build consensus among Hong Kong People',
    type_asset: 'cw20',
    address: 'juno1tdjwrqmnztn2j3sj2ln9xnyps5hs48q3ddwjrz7jpv6mskappjys5czd49',
    denom_units: [{
      denom: 'cw20:juno1tdjwrqmnztn2j3sj2ln9xnyps5hs48q3ddwjrz7jpv6mskappjys5czd49',
      exponent: 0,
      aliases: ['dhk']
    }],
    base: 'cw20:juno1tdjwrqmnztn2j3sj2ln9xnyps5hs48q3ddwjrz7jpv6mskappjys5czd49',
    name: 'DHK',
    display: 'dhk',
    symbol: 'DHK',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/dhk.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/dhk.svg'
    }
  }, {
    description: 'Token governance for Junoswap',
    type_asset: 'cw20',
    address: 'juno15u3dt79t6sxxa3x3kpkhzsy56edaa5a66wvt3kxmukqjz2sx0hes5sn38g',
    denom_units: [{
      denom: 'cw20:juno15u3dt79t6sxxa3x3kpkhzsy56edaa5a66wvt3kxmukqjz2sx0hes5sn38g',
      exponent: 0
    }, {
      denom: 'raw',
      exponent: 6
    }],
    base: 'cw20:juno15u3dt79t6sxxa3x3kpkhzsy56edaa5a66wvt3kxmukqjz2sx0hes5sn38g',
    name: 'JunoSwap',
    display: 'raw',
    symbol: 'RAW',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/raw.png'
    },
    coingecko_id: 'junoswap-raw-dao'
  }, {
    description: 'Profit sharing token for Another.Software validator. Hold and receive dividends from Another.Software validator commissions!',
    type_asset: 'cw20',
    address: 'juno17wzaxtfdw5em7lc94yed4ylgjme63eh73lm3lutp2rhcxttyvpwsypjm4w',
    denom_units: [{
      denom: 'cw20:juno17wzaxtfdw5em7lc94yed4ylgjme63eh73lm3lutp2rhcxttyvpwsypjm4w',
      exponent: 0
    }, {
      denom: 'asvt',
      exponent: 6
    }],
    base: 'cw20:juno17wzaxtfdw5em7lc94yed4ylgjme63eh73lm3lutp2rhcxttyvpwsypjm4w',
    name: 'Another.Software Validator Token',
    display: 'asvt',
    symbol: 'ASVT',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/asvt.png'
    }
  }, {
    description: 'IBC HNS is HNS, coin of Handshake, decentralized root namesystem, but wrapped to cosmos for IBC support by Another.Software through Juno netowrk.',
    type_asset: 'cw20',
    address: 'juno1ur4jx0sxchdevahep7fwq28yk4tqsrhshdtylz46yka3uf6kky5qllqp4k',
    denom_units: [{
      denom: 'cw20:juno1ur4jx0sxchdevahep7fwq28yk4tqsrhshdtylz46yka3uf6kky5qllqp4k',
      exponent: 0
    }, {
      denom: 'hns',
      exponent: 6
    }],
    base: 'cw20:juno1ur4jx0sxchdevahep7fwq28yk4tqsrhshdtylz46yka3uf6kky5qllqp4k',
    name: 'IBC HNS (Handshake)',
    display: 'hns',
    symbol: 'HNS',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/hns.svg'
    }
  }, {
    description: 'DAO dedicated to building tools on the Juno Network',
    type_asset: 'cw20',
    address: 'juno1n7n7d5088qlzlj37e9mgmkhx6dfgtvt02hqxq66lcap4dxnzdhwqfmgng3',
    denom_units: [{
      denom: 'cw20:juno1n7n7d5088qlzlj37e9mgmkhx6dfgtvt02hqxq66lcap4dxnzdhwqfmgng3',
      exponent: 0
    }, {
      denom: 'joe',
      exponent: 6
    }],
    base: 'cw20:juno1n7n7d5088qlzlj37e9mgmkhx6dfgtvt02hqxq66lcap4dxnzdhwqfmgng3',
    name: 'JoeDAO',
    display: 'joe',
    symbol: 'JOE',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/joe.png'
    }
  }, {
    description: 'Governance Token for Digital Land Acquisition DAO',
    type_asset: 'cw20',
    address: 'juno1sfwye65qxcfsc837gu5qcprcz7w49gkv3wnat04764ld76hy3arqs779tr',
    denom_units: [{
      denom: 'cw20:juno1sfwye65qxcfsc837gu5qcprcz7w49gkv3wnat04764ld76hy3arqs779tr',
      exponent: 0
    }, {
      denom: 'dla',
      exponent: 6
    }],
    base: 'cw20:juno1sfwye65qxcfsc837gu5qcprcz7w49gkv3wnat04764ld76hy3arqs779tr',
    name: 'Digital Land Acquisition DAO',
    display: 'dla',
    symbol: 'DLA',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/dla.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/dla.svg'
    }
  }, {
    description: 'DeFi gaming platform built on Juno',
    type_asset: 'cw20',
    address: 'juno1j0a9ymgngasfn3l5me8qpd53l5zlm9wurfdk7r65s5mg6tkxal3qpgf5se',
    denom_units: [{
      denom: 'cw20:juno1j0a9ymgngasfn3l5me8qpd53l5zlm9wurfdk7r65s5mg6tkxal3qpgf5se',
      exponent: 0
    }, {
      denom: 'glto',
      exponent: 6
    }],
    base: 'cw20:juno1j0a9ymgngasfn3l5me8qpd53l5zlm9wurfdk7r65s5mg6tkxal3qpgf5se',
    name: 'Gelotto',
    display: 'glto',
    symbol: 'GLTO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/glto.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/glto.svg'
    }
  }, {
    description: 'Gelotto Year 1 Grand Prize Token',
    type_asset: 'cw20',
    address: 'juno1gz8cf86zr4vw9cjcyyv432vgdaecvr9n254d3uwwkx9rermekddsxzageh',
    denom_units: [{
      denom: 'cw20:juno1gz8cf86zr4vw9cjcyyv432vgdaecvr9n254d3uwwkx9rermekddsxzageh',
      exponent: 0
    }, {
      denom: 'gkey',
      exponent: 6
    }],
    base: 'cw20:juno1gz8cf86zr4vw9cjcyyv432vgdaecvr9n254d3uwwkx9rermekddsxzageh',
    name: 'GKey',
    display: 'gkey',
    symbol: 'GKEY',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/gkey.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/gkey.svg'
    }
  }, {
    description: 'The native token cw20 for BlackHole on Juno Chain',
    type_asset: 'cw20',
    address: 'juno1t46z6hg8vvsena7sue0vg6w85ljar3cundplkre9sz0skeqkap9sxyyy6m',
    denom_units: [{
      denom: 'cw20:juno1t46z6hg8vvsena7sue0vg6w85ljar3cundplkre9sz0skeqkap9sxyyy6m',
      exponent: 0
    }, {
      denom: 'hole',
      exponent: 6
    }],
    base: 'cw20:juno1t46z6hg8vvsena7sue0vg6w85ljar3cundplkre9sz0skeqkap9sxyyy6m',
    name: 'BlackHole',
    display: 'hole',
    symbol: 'HOLE',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/hole.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/hole.svg'
    }
  }, {
    description: 'Staking derivative seJUNO for staked JUNO',
    type_asset: 'cw20',
    address: 'juno1dd0k0um5rqncfueza62w9sentdfh3ec4nw4aq4lk5hkjl63vljqscth9gv',
    denom_units: [{
      denom: 'cw20:juno1dd0k0um5rqncfueza62w9sentdfh3ec4nw4aq4lk5hkjl63vljqscth9gv',
      exponent: 0
    }, {
      denom: 'sejuno',
      exponent: 6
    }],
    base: 'cw20:juno1dd0k0um5rqncfueza62w9sentdfh3ec4nw4aq4lk5hkjl63vljqscth9gv',
    name: 'StakeEasy seJUNO',
    display: 'sejuno',
    symbol: 'SEJUNO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/sejuno.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/sejuno.svg'
    },
    coingecko_id: 'stakeeasy-juno-derivative'
  }, {
    description: 'Staking derivative bJUNO for staked JUNO',
    type_asset: 'cw20',
    address: 'juno1wwnhkagvcd3tjz6f8vsdsw5plqnw8qy2aj3rrhqr2axvktzv9q2qz8jxn3',
    denom_units: [{
      denom: 'cw20:juno1wwnhkagvcd3tjz6f8vsdsw5plqnw8qy2aj3rrhqr2axvktzv9q2qz8jxn3',
      exponent: 0
    }, {
      denom: 'bjuno',
      exponent: 6
    }],
    base: 'cw20:juno1wwnhkagvcd3tjz6f8vsdsw5plqnw8qy2aj3rrhqr2axvktzv9q2qz8jxn3',
    name: 'StakeEasy bJUNO',
    display: 'bjuno',
    symbol: 'BJUNO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/bjuno.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/bjuno.svg'
    },
    coingecko_id: 'stakeeasy-bjuno'
  }, {
    description: 'Solarbank DAO Governance Token for speeding up the shift to renewable and green energy',
    type_asset: 'cw20',
    address: 'juno159q8t5g02744lxq8lfmcn6f78qqulq9wn3y9w7lxjgkz4e0a6kvsfvapse',
    denom_units: [{
      denom: 'cw20:juno159q8t5g02744lxq8lfmcn6f78qqulq9wn3y9w7lxjgkz4e0a6kvsfvapse',
      exponent: 0
    }, {
      denom: 'solar',
      exponent: 6
    }],
    base: 'cw20:juno159q8t5g02744lxq8lfmcn6f78qqulq9wn3y9w7lxjgkz4e0a6kvsfvapse',
    name: 'Solarbank DAO',
    display: 'solar',
    symbol: 'SOLAR',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/solar.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/solar.svg'
    }
  }, {
    description: 'StakeEasy governance token',
    type_asset: 'cw20',
    address: 'juno19rqljkh95gh40s7qdx40ksx3zq5tm4qsmsrdz9smw668x9zdr3lqtg33mf',
    denom_units: [{
      denom: 'cw20:juno19rqljkh95gh40s7qdx40ksx3zq5tm4qsmsrdz9smw668x9zdr3lqtg33mf',
      exponent: 0
    }, {
      denom: 'seasy',
      exponent: 6
    }],
    base: 'cw20:juno19rqljkh95gh40s7qdx40ksx3zq5tm4qsmsrdz9smw668x9zdr3lqtg33mf',
    name: 'StakeEasy SEASY',
    display: 'seasy',
    symbol: 'SEASY',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/seasy.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/seasy.svg'
    },
    coingecko_id: 'seasy'
  }, {
    description: 'The native token cw20 for MuseDAO on Juno Chain',
    type_asset: 'cw20',
    address: 'juno1p8x807f6h222ur0vssqy3qk6mcpa40gw2pchquz5atl935t7kvyq894ne3',
    denom_units: [{
      denom: 'cw20:juno1p8x807f6h222ur0vssqy3qk6mcpa40gw2pchquz5atl935t7kvyq894ne3',
      exponent: 0
    }, {
      denom: 'muse',
      exponent: 6
    }],
    base: 'cw20:juno1p8x807f6h222ur0vssqy3qk6mcpa40gw2pchquz5atl935t7kvyq894ne3',
    name: 'MuseDAO',
    display: 'muse',
    symbol: 'MUSE',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/muse.png'
    }
  }, {
    description: 'The native token cw20 for Loop Finance on Juno Chain',
    type_asset: 'cw20',
    address: 'juno1qsrercqegvs4ye0yqg93knv73ye5dc3prqwd6jcdcuj8ggp6w0us66deup',
    denom_units: [{
      denom: 'cw20:juno1qsrercqegvs4ye0yqg93knv73ye5dc3prqwd6jcdcuj8ggp6w0us66deup',
      exponent: 0
    }, {
      denom: 'loop',
      exponent: 6
    }],
    base: 'cw20:juno1qsrercqegvs4ye0yqg93knv73ye5dc3prqwd6jcdcuj8ggp6w0us66deup',
    name: 'Loop Finance',
    display: 'loop',
    symbol: 'LOOP',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/loop.png'
    },
    coingecko_id: 'loop'
  }, {
    description: 'The native token cw20 for Fanfury on Juno Chain',
    type_asset: 'cw20',
    address: 'juno1cltgm8v842gu54srmejewghnd6uqa26lzkpa635wzra9m9xuudkqa2gtcz',
    denom_units: [{
      denom: 'cw20:juno1cltgm8v842gu54srmejewghnd6uqa26lzkpa635wzra9m9xuudkqa2gtcz',
      exponent: 0
    }, {
      denom: 'fury',
      exponent: 6
    }],
    base: 'cw20:juno1cltgm8v842gu54srmejewghnd6uqa26lzkpa635wzra9m9xuudkqa2gtcz',
    name: 'Fanfury',
    display: 'fury',
    symbol: 'FURY',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/fanfury.png'
    },
    coingecko_id: 'fanfury'
  }, {
    description: 'The native token cw20 for PHMN on Juno Chain',
    type_asset: 'cw20',
    address: 'juno1rws84uz7969aaa7pej303udhlkt3j9ca0l3egpcae98jwak9quzq8szn2l',
    denom_units: [{
      denom: 'cw20:juno1rws84uz7969aaa7pej303udhlkt3j9ca0l3egpcae98jwak9quzq8szn2l',
      exponent: 0
    }, {
      denom: 'phmn',
      exponent: 6
    }],
    base: 'cw20:juno1rws84uz7969aaa7pej303udhlkt3j9ca0l3egpcae98jwak9quzq8szn2l',
    name: 'POSTHUMAN',
    display: 'phmn',
    symbol: 'PHMN',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/phmn.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/phmn.svg'
    },
    coingecko_id: 'posthuman'
  }, {
    description: 'The native token cw20 for Hopers on Juno Chain',
    type_asset: 'cw20',
    address: 'juno1u45shlp0q4gcckvsj06ss4xuvsu0z24a0d0vr9ce6r24pht4e5xq7q995n',
    denom_units: [{
      denom: 'cw20:juno1u45shlp0q4gcckvsj06ss4xuvsu0z24a0d0vr9ce6r24pht4e5xq7q995n',
      exponent: 0
    }, {
      denom: 'hopers',
      exponent: 6
    }],
    base: 'cw20:juno1u45shlp0q4gcckvsj06ss4xuvsu0z24a0d0vr9ce6r24pht4e5xq7q995n',
    name: 'HOPERS',
    display: 'HOPERS',
    symbol: 'hopers',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/hopers.png'
    }
  }, {
    description: 'RED',
    type_asset: 'cw20',
    address: 'juno1g647t78y2ulqlm3lss8rs3d0spzd0teuwhdvnqn92tr79yltk9dq2h24za',
    denom_units: [{
      denom: 'cw20:juno1g647t78y2ulqlm3lss8rs3d0spzd0teuwhdvnqn92tr79yltk9dq2h24za',
      exponent: 0
    }, {
      denom: 'red',
      exponent: 6
    }],
    base: 'cw20:juno1g647t78y2ulqlm3lss8rs3d0spzd0teuwhdvnqn92tr79yltk9dq2h24za',
    name: 'Red',
    display: 'red',
    symbol: 'RED',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/red.png'
    }
  }, {
    description: 'BLUE',
    type_asset: 'cw20',
    address: 'juno14q8kk464fafql2fwmlsgvgcdl6h2csqpzv4hr025fmcvgjahpess32k0j7',
    denom_units: [{
      denom: 'cw20:juno14q8kk464fafql2fwmlsgvgcdl6h2csqpzv4hr025fmcvgjahpess32k0j7',
      exponent: 0
    }, {
      denom: 'blue',
      exponent: 6
    }],
    base: 'cw20:juno14q8kk464fafql2fwmlsgvgcdl6h2csqpzv4hr025fmcvgjahpess32k0j7',
    name: 'Blue',
    display: 'blue',
    symbol: 'BLUE',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/blue.png'
    }
  }, {
    description: 'The native token cw20 for Neta on Juno Chain',
    type_asset: 'cw20',
    address: 'juno168ctmpyppk90d34p3jjy658zf5a5l3w8wk35wht6ccqj4mr0yv8s4j5awr',
    denom_units: [{
      denom: 'ibc/297C64CC42B5A8D8F82FE2EBE208A6FE8F94B86037FA28C4529A23701C228F7A',
      exponent: 0,
      aliases: ['uneta']
    }, {
      denom: 'neta',
      exponent: 6
    }],
    base: 'ibc/297C64CC42B5A8D8F82FE2EBE208A6FE8F94B86037FA28C4529A23701C228F7A',
    name: 'Neta',
    display: 'neta',
    symbol: 'NETA',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/osmosis-labs/assetlists/main/images/neta.png'
    },
    coingecko_id: 'neta'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'kava',
  assets: [{
    description: 'The native staking and governance token of Kava',
    denom_units: [{
      denom: 'ukava',
      exponent: 0
    }, {
      denom: 'kava',
      exponent: 6
    }],
    base: 'ukava',
    name: 'Kava',
    display: 'kava',
    symbol: 'KAVA',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/kava/images/kava.png'
    },
    coingecko_id: 'kava'
  }, {
    description: 'Governance token of Kava Lend Protocol',
    denom_units: [{
      denom: 'hard',
      exponent: 0
    }, {
      denom: 'HARD',
      exponent: 6
    }],
    base: 'hard',
    name: 'Hard',
    display: 'HARD',
    symbol: 'HARD',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/kava/images/hard.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/kava/images/hard.svg'
    },
    coingecko_id: 'kava-lend'
  }, {
    description: 'Governance token of Kava Swap Protocol',
    denom_units: [{
      denom: 'swp',
      exponent: 0
    }, {
      denom: 'SWP',
      exponent: 6
    }],
    base: 'swp',
    name: 'Swap',
    display: 'SWP',
    symbol: 'SWP',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/kava/images/swp.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/kava/images/swp.svg'
    },
    coingecko_id: 'kava-swap'
  }, {
    description: 'The native stablecoin of Kava',
    denom_units: [{
      denom: 'usdx',
      exponent: 0
    }, {
      denom: 'USDX',
      exponent: 6
    }],
    base: 'usdx',
    name: 'USDX',
    display: 'USDX',
    symbol: 'USDX',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/kava/images/usdx.png'
    },
    coingecko_id: 'usdx'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'kichain',
  assets: [{
    description: 'The native token of Ki Chain',
    denom_units: [{
      denom: 'uxki',
      exponent: 0
    }, {
      denom: 'xki',
      exponent: 6
    }],
    base: 'uxki',
    name: 'Ki',
    display: 'xki',
    symbol: 'XKI',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/kichain/images/xki.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/kichain/images/xki.svg'
    },
    coingecko_id: 'ki'
  }, {
    description: 'ELEVENPARIS loyalty token on KiChain',
    type_asset: 'cw20',
    address: 'ki1dt3lk455ed360pna38fkhqn0p8y44qndsr77qu73ghyaz2zv4whq83mwdy',
    denom_units: [{
      denom: 'cw20:ki1dt3lk455ed360pna38fkhqn0p8y44qndsr77qu73ghyaz2zv4whq83mwdy',
      exponent: 0
    }, {
      denom: 'lvn',
      exponent: 6
    }],
    base: 'cw20:ki1dt3lk455ed360pna38fkhqn0p8y44qndsr77qu73ghyaz2zv4whq83mwdy',
    name: 'LVN',
    display: 'lvn',
    symbol: 'LVN',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/kichain/images/lvn.png'
    },
    coingecko_id: 'lvn'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'konstellation',
  assets: [{
    description: 'The native token of Konstellation Network',
    denom_units: [{
      denom: 'udarc',
      exponent: 0
    }, {
      denom: 'darc',
      exponent: 6
    }],
    base: 'udarc',
    name: 'DARC',
    display: 'darc',
    symbol: 'DARC',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/konstellation/images/darc.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/konstellation/images/darc.svg'
    },
    coingecko_id: 'darcmatter-coin'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'kujira',
  assets: [{
    description: 'The native staking and governance token of the Kujira chain.',
    denom_units: [{
      denom: 'ukuji',
      exponent: 0
    }, {
      denom: 'kuji',
      exponent: 6
    }],
    base: 'ukuji',
    name: 'Kuji',
    display: 'kuji',
    symbol: 'KUJI',
    coingecko_id: 'kujira',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/kujira/images/kuji.png'
    }
  }, {
    description: 'The native over-collateralized stablecoin from the Kujira chain.',
    denom_units: [{
      denom: 'factory/kujira1qk00h5atutpsv900x202pxx42npjr9thg58dnqpa72f2p7m2luase444a7/uusk',
      exponent: 0
    }, {
      denom: 'usk',
      exponent: 6
    }],
    base: 'factory/kujira1qk00h5atutpsv900x202pxx42npjr9thg58dnqpa72f2p7m2luase444a7/uusk',
    name: 'USK',
    display: 'USK',
    symbol: 'USK',
    coingecko_id: 'usk',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/kujira/images/usk.png'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'lambda',
  assets: [{
    description: 'The native token of Lambda',
    denom_units: [{
      denom: 'ulamb',
      exponent: 0
    }, {
      denom: 'lamb',
      exponent: 18
    }],
    base: 'ulamb',
    name: 'Lambda',
    display: 'lamb',
    symbol: 'LAMB',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/lambda/images/lambda.png'
    },
    coingecko_id: 'lambda'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'likecoin',
  assets: [{
    description: 'LIKE is the native staking and governance token of LikeCoin chain, a Decentralized Publishing Infrastructure to empower content ownership, authenticity, and provenance.',
    denom_units: [{
      denom: 'nanolike',
      exponent: 0
    }, {
      denom: 'like',
      exponent: 9
    }],
    base: 'nanolike',
    name: 'LikeCoin',
    display: 'like',
    symbol: 'LIKE',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/likecoin/images/like.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/likecoin/images/like.svg'
    },
    coingecko_id: 'likecoin'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'logos',
  assets: [{
    description: 'The native token of Logos',
    denom_units: [{
      denom: 'aLYT',
      exponent: 0
    }, {
      denom: 'LYT',
      exponent: 18
    }],
    base: 'aLYT',
    name: 'LYT',
    display: 'LYT',
    symbol: 'LYT',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/logos/images/logos.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/logos/images/logos.png'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'loyal',
  assets: [{
    description: 'Native token of Loyal',
    denom_units: [{
      denom: 'ulyl',
      exponent: 0
    }, {
      denom: 'lyl',
      exponent: 6
    }],
    base: 'ulyl',
    name: 'Loyal',
    display: 'lyl',
    symbol: 'LYL'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'lumenx',
  assets: [{
    description: 'The native token of Lumen Network',
    denom_units: [{
      denom: 'ulumen',
      exponent: 0
    }, {
      denom: 'lumen',
      exponent: 6
    }],
    base: 'ulumen',
    name: 'LUMEN',
    display: 'lumen',
    symbol: 'LUMEN',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/lumenx/images/lumen.png'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'lumnetwork',
  assets: [{
    description: 'Native token of the Lum Network',
    denom_units: [{
      denom: 'ulum',
      exponent: 0
    }, {
      denom: 'lum',
      exponent: 6
    }],
    base: 'ulum',
    name: 'Lum',
    display: 'lum',
    symbol: 'LUM',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/lumnetwork/images/lum.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/lumnetwork/images/lum.svg'
    },
    coingecko_id: 'lum-network'
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'medasdigital-1',
  assets: [{
    description: 'The native token of Medas Digital Network',
    denom_units: [{
      denom: 'umedas',
      exponent: 0
    }, {
      denom: 'medas',
      exponent: 6
    }],
    base: 'umedas',
    name: 'Medas Digital',
    display: 'medas',
    symbol: 'MEDAS',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/medasdigital/images/medas.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/medasdigital/images/medas.svg'
    },
    keywords: ['medas']
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'meme',
  assets: [{
    description: 'MEME Token (MEME) is the native staking token of the MEME Chain',
    denom_units: [{
      denom: 'umeme',
      exponent: 0
    }, {
      denom: 'meme',
      exponent: 6
    }],
    base: 'umeme',
    name: 'MEME',
    display: 'meme',
    symbol: 'MEME',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/meme/images/meme.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/meme/images/meme.svg'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'microtick',
  assets: [{
    description: 'TICK coin is the token for the Microtick Price Discovery & Oracle App',
    denom_units: [{
      denom: 'utick',
      exponent: 0
    }, {
      denom: 'tick',
      exponent: 6
    }],
    base: 'utick',
    display: 'tick',
    name: 'Microtick',
    symbol: 'TICK',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/microtick/images/tick.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/microtick/images/tick.svg'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'mises',
  assets: [{
    description: 'The native staking and gov token of the Mises Network.',
    denom_units: [{
      denom: 'umis',
      exponent: 0,
      aliases: ['micromis']
    }, {
      denom: 'mmis',
      exponent: 3,
      aliases: ['millimis']
    }, {
      denom: 'mis',
      exponent: 6,
      aliases: []
    }],
    base: 'umis',
    display: 'mis',
    name: 'mises network MIS',
    symbol: 'MIS',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/mises/images/mises.png'
    },
    coingecko_id: ''
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'mythos',
  assets: [{
    description: 'The native token of Mythos',
    denom_units: [{
      denom: 'aMYT',
      exponent: 0
    }, {
      denom: 'MYT',
      exponent: 18
    }],
    base: 'aMYT',
    name: 'MYT',
    display: 'MYT',
    symbol: 'MYT',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/mythos/images/mythos.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/mythos/images/mythos.png'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'nomic',
  assets: [{
    description: "Nomic Token (NOM) is the Nomic's native utility token, used as the primary means to govern, secure the blockchain, incentivize participants, and provide a default mechanism to store and exchange value.",
    denom_units: [{
      denom: 'unom',
      exponent: 0
    }, {
      denom: 'nom',
      exponent: 6
    }],
    base: 'unom',
    name: 'Nomic',
    display: 'nom',
    symbol: 'NOM',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/nomic/images/nomic.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/nomic/images/nomic.svg'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'nyx',
  assets: [{
    description: "NYM Token (NYM) is the Nym Network's native utility token, used as the primary means to incentivize mixnet node operators.",
    denom_units: [{
      denom: 'unym',
      exponent: 0
    }, {
      denom: 'NYM',
      exponent: 6
    }],
    base: 'unym',
    name: 'Nym',
    display: 'nym',
    symbol: 'NYM',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/nyx/images/nyx.png'
    },
    coingecko_id: 'nym'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'octa',
  assets: [{
    description: 'The native token of Octa Chain',
    denom_units: [{
      denom: 'uocta',
      exponent: 0,
      aliases: []
    }, {
      denom: 'octa',
      exponent: 6,
      aliases: []
    }],
    base: 'uocta',
    display: 'octa',
    name: 'Octa',
    symbol: 'OCTA',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/octa/images/octa.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/octa/images/octa.svg'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'odin',
  assets: [{
    description: 'Staking and goverance token for ODIN Protocol',
    denom_units: [{
      denom: 'loki',
      exponent: 0
    }, {
      denom: 'odin',
      exponent: 6
    }],
    base: 'loki',
    name: 'ODIN',
    display: 'odin',
    symbol: 'ODIN',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/odin/images/odin.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/odin/images/odin.png'
    },
    coingecko_id: 'odin-protocol'
  }, {
    description: 'GEO token for ODIN Protocol',
    denom_units: [{
      denom: 'mGeo',
      exponent: 0
    }, {
      denom: 'geo',
      exponent: 6
    }],
    base: 'mGeo',
    name: 'GEO',
    display: 'geo',
    symbol: 'GEO',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/odin/images/geo.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/odin/images/geo.png'
    }
  }, {
    description: 'O9W token for ODIN Protocol',
    denom_units: [{
      denom: 'mO9W',
      exponent: 0
    }, {
      denom: 'O9W',
      exponent: 6
    }],
    base: 'mO9W',
    name: 'O9W',
    display: 'O9W',
    symbol: 'O9W',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/odin/images/o9w.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/odin/images/o9w.png'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'okexchain',
  assets: [{
    description: 'The native token of OKExChain',
    denom_units: [{
      denom: 'wei',
      exponent: 0
    }, {
      denom: 'okt',
      exponent: 18
    }],
    base: 'wei',
    name: 'OKExChain',
    display: 'okt',
    symbol: 'OKT',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/okexchain/images/okc.png'
    },
    coingecko_id: 'oec-token'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'omniflixhub',
  assets: [{
    description: 'The native staking token of OmniFlix Hub.',
    denom_units: [{
      denom: 'uflix',
      exponent: 0
    }, {
      denom: 'flix',
      exponent: 6
    }],
    base: 'uflix',
    name: 'Flix',
    display: 'flix',
    symbol: 'FLIX',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/omniflixhub/images/flix.png'
    },
    coingecko_id: 'omniflix-network'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'onomy',
  assets: [{
    description: 'The native token of Onomy Protocol',
    denom_units: [{
      denom: 'anom',
      exponent: 0
    }, {
      denom: 'nom',
      exponent: 18
    }],
    base: 'anom',
    name: 'Nom',
    display: 'nom',
    symbol: 'NOM',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/onomy/images/nom.png'
    },
    keywords: ['dex', 'stablecoin', 'bridge', 'staking']
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'oraichain',
  assets: [{
    description: 'The native token of Oraichain',
    denom_units: [{
      denom: 'orai',
      exponent: 0
    }, {
      denom: 'ORAI',
      exponent: 6
    }],
    base: 'orai',
    name: 'Oraichain',
    display: 'ORAI',
    symbol: 'ORAI',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/oraichain/images/orai-white.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/oraichain/images/orai-white.svg'
    },
    coingecko_id: 'oraichain-token'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'osmosis',
  assets: [{
    description: 'The native token of Osmosis',
    denom_units: [{
      denom: 'uosmo',
      exponent: 0
    }, {
      denom: 'osmo',
      exponent: 6
    }],
    base: 'uosmo',
    name: 'Osmosis',
    display: 'osmo',
    symbol: 'OSMO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.svg'
    },
    coingecko_id: 'osmosis',
    keywords: ['dex', 'staking']
  }, {
    denom_units: [{
      denom: 'uion',
      exponent: 0
    }, {
      denom: 'ion',
      exponent: 6
    }],
    base: 'uion',
    name: 'Ion',
    display: 'ion',
    symbol: 'ION',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.svg'
    },
    coingecko_id: 'ion',
    keywords: ['memecoin']
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'panacea',
  assets: [{
    description: 'Panacea is a public blockchain launched by MediBloc, which is the key infrastructure for reinventing the patient-centered healthcare data ecosystem',
    denom_units: [{
      denom: 'umed',
      exponent: 0
    }, {
      denom: 'med',
      exponent: 6
    }],
    base: 'umed',
    name: 'MediBloc',
    display: 'med',
    symbol: 'MED',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/panacea/images/med.png'
    },
    coingecko_id: 'medibloc'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'passage',
  assets: [{
    description: 'The native staking and governance token of the Passage chain.',
    denom_units: [{
      denom: 'upasg',
      exponent: 0
    }, {
      denom: 'pasg',
      exponent: 6
    }],
    base: 'upasg',
    name: 'Passage',
    display: 'pasg',
    symbol: 'PASG',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/passage/images/pasg.png'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'persistence',
  assets: [{
    description: 'The XPRT token is primarily a governance token for the Persistence chain.',
    denom_units: [{
      denom: 'uxprt',
      exponent: 0
    }, {
      denom: 'xprt',
      exponent: 6
    }],
    base: 'uxprt',
    name: 'Persistence',
    display: 'xprt',
    symbol: 'XPRT',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/persistence/images/xprt.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/persistence/images/xprt.svg'
    },
    coingecko_id: 'persistence'
  }, {
    description: 'PSTAKE Liquid-Staked ATOM',
    denom_units: [{
      denom: 'stk/uatom',
      exponent: 0,
      aliases: []
    }, {
      denom: 'stkatom',
      exponent: 6,
      aliases: ['stk/atom']
    }],
    base: 'stk/uatom',
    name: 'PSTAKE staked ATOM',
    display: 'stkatom',
    symbol: 'stkATOM',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/persistence/images/stkatom.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/persistence/images/stkatom.svg'
    }
  }, {
    description: 'pSTAKE is a liquid staking protocol unlocking the liquidity of staked assets.',
    denom_units: [{
      denom: 'ibc/A6E3AF63B3C906416A9AF7A556C59EA4BD50E617EFFE6299B99700CCB780E444',
      exponent: 0,
      aliases: ['gravity0xfB5c6815cA3AC72Ce9F5006869AE67f18bF77006', '0xfB5c6815cA3AC72Ce9F5006869AE67f18bF77006']
    }, {
      denom: 'pstake',
      exponent: 18
    }],
    base: 'ibc/A6E3AF63B3C906416A9AF7A556C59EA4BD50E617EFFE6299B99700CCB780E444',
    name: 'pSTAKE Finance',
    display: 'pstake',
    symbol: 'PSTAKE',
    traces: [{
      type: 'liquid-stake',
      counterparty: {
        chain_name: 'persistence',
        base_denom: 'XPRT'
      },
      provider: 'Persistence'
    }, {
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereum',
        base_denom: '0xfB5c6815cA3AC72Ce9F5006869AE67f18bF77006'
      },
      provider: 'Gravity Bridge'
    }, {
      type: 'ibc',
      counterparty: {
        chain_name: 'gravitybridge',
        base_denom: 'gravity0xfB5c6815cA3AC72Ce9F5006869AE67f18bF77006',
        channel_id: 'channel-24'
      },
      chain: {
        channel_id: 'channel-38',
        path: 'transfer/channel-38/gravity0xfB5c6815cA3AC72Ce9F5006869AE67f18bF77006'
      }
    }],
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/persistence/images/pstake.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/persistence/images/pstake.svg'
    },
    coingecko_id: 'pstake-finance'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'planq',
  assets: [{
    description: 'The native EVM, governance and staking token of the Planq Network',
    denom_units: [{
      denom: 'aplanq',
      exponent: 0
    }, {
      denom: 'planq',
      exponent: 18
    }],
    base: 'aplanq',
    name: 'Planq',
    display: 'planq',
    symbol: 'PLQ',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/planq/images/planq.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/planq/images/planq.png'
    },
    coingecko_id: ''
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'point',
  assets: [{
    description: 'The native governance and staking token of the Point network',
    denom_units: [{
      denom: 'apoint',
      exponent: 0
    }, {
      denom: 'point',
      exponent: 18
    }],
    base: 'apoint',
    name: 'Point',
    display: 'point',
    symbol: 'POINT',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/point/images/point-logo.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/point/images/point-logo.png'
    },
    coingecko_id: 'point-network'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'provenance',
  assets: [{
    description: 'Hash is the staking token of the Provenance Blockchain',
    denom_units: [{
      denom: 'nhash',
      exponent: 0
    }, {
      denom: 'hash',
      exponent: 9
    }],
    base: 'nhash',
    name: 'Hash',
    display: 'hash',
    symbol: 'HASH',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/provenance/images/hash.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/provenance/images/hash.svg'
    },
    coingecko_id: 'provenance-blockchain'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'quicksilver',
  assets: [{
    description: 'QCK - native token of Quicksilver',
    denom_units: [{
      denom: 'uqck',
      exponent: 0,
      aliases: []
    }, {
      denom: 'qck',
      exponent: 6,
      aliases: []
    }],
    base: 'uqck',
    name: 'Quicksilver',
    display: 'qck',
    symbol: 'QCK',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/quicksilver/images/qck.png'
    },
    coingecko_id: 'quicksilver'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'rebus',
  assets: [{
    description: 'REBUS, the native coin of the Rebus chain.',
    denom_units: [{
      denom: 'arebus',
      exponent: 0
    }, {
      denom: 'rebus',
      exponent: 18
    }],
    base: 'arebus',
    name: 'Rebus',
    display: 'rebus',
    symbol: 'REBUS',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/rebus/images/rebus.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/rebus/images/rebus.svg'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'regen',
  assets: [{
    description: 'REGEN coin is the token for the Regen Network Platform',
    denom_units: [{
      denom: 'uregen',
      exponent: 0
    }, {
      denom: 'regen',
      exponent: 6
    }],
    base: 'uregen',
    name: 'Regen Network',
    display: 'regen',
    symbol: 'REGEN',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/regen/images/regen.png'
    },
    coingecko_id: 'regen'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'rizon',
  assets: [{
    description: 'Native token of Rizon Chain',
    denom_units: [{
      denom: 'uatolo',
      exponent: 0
    }, {
      denom: 'atolo',
      exponent: 6
    }],
    base: 'uatolo',
    name: 'Rizon Chain',
    display: 'atolo',
    symbol: 'ATOLO',
    coingecko_id: 'rizon',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/rizon/images/atolo.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/rizon/images/atolo.svg'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'secretnetwork',
  assets: [{
    description: 'The native token of Secret Network',
    denom_units: [{
      denom: 'uscrt',
      exponent: 0
    }, {
      denom: 'scrt',
      exponent: 6
    }],
    base: 'uscrt',
    name: 'Secret Network',
    display: 'scrt',
    symbol: 'SCRT',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/secretnetwork/images/scrt.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/secretnetwork/images/scrt.svg'
    },
    coingecko_id: 'secret'
  }, {
    description: 'The native token cw20 for SIENNA on Secret Network',
    denom_units: [{
      denom: 'cw20:secret1rgm2m5t530tdzyd99775n6vzumxa5luxcllml4',
      exponent: 0
    }, {
      denom: 'sienna',
      exponent: 18
    }],
    type_asset: 'snip20',
    address: 'secret1rgm2m5t530tdzyd99775n6vzumxa5luxcllml4',
    base: 'cw20:secret1rgm2m5t530tdzyd99775n6vzumxa5luxcllml4',
    name: 'SIENNA',
    display: 'sienna',
    symbol: 'SIENNA',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/secretnetwork/images/sienna.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/secretnetwork/images/sienna.svg'
    },
    coingecko_id: 'sienna'
  }, {
    description: 'The native token cw20 for Shade on Secret Network',
    denom_units: [{
      denom: 'cw20:secret1qfql357amn448duf5gvp9gr48sxx9tsnhupu3d',
      exponent: 0
    }, {
      denom: 'shd',
      exponent: 8
    }],
    type_asset: 'snip20',
    address: 'secret1qfql357amn448duf5gvp9gr48sxx9tsnhupu3d',
    base: 'cw20:secret1qfql357amn448duf5gvp9gr48sxx9tsnhupu3d',
    name: 'Shade',
    display: 'shd',
    symbol: 'SHD',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/secretnetwork/images/shd.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/secretnetwork/images/shd.svg'
    },
    coingecko_id: 'shade-protocol'
  }, {
    description: 'The native token cw20 for SCRT Staking Derivatives on Secret Network',
    denom_units: [{
      denom: 'cw20:secret1k6u0cy4feepm6pehnz804zmwakuwdapm69tuc4',
      exponent: 0
    }, {
      denom: 'stkd-scrt',
      exponent: 6
    }],
    type_asset: 'snip20',
    address: 'secret1k6u0cy4feepm6pehnz804zmwakuwdapm69tuc4',
    base: 'cw20:secret1k6u0cy4feepm6pehnz804zmwakuwdapm69tuc4',
    name: 'SCRT Staking Derivatives',
    display: 'stkd-scrt',
    symbol: 'stkd-SCRT',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/secretnetwork/images/stkd-scrt.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/secretnetwork/images/stkd-scrt.svg'
    },
    coingecko_id: 'stkd-scrt'
  }, {
    description: 'The native token cw20 for Button on Secret Network',
    denom_units: [{
      denom: 'cw20:secret1yxcexylwyxlq58umhgsjgstgcg2a0ytfy4d9lt',
      exponent: 0
    }, {
      denom: 'butt',
      exponent: 6
    }],
    type_asset: 'snip20',
    address: 'secret1yxcexylwyxlq58umhgsjgstgcg2a0ytfy4d9lt',
    base: 'cw20:secret1yxcexylwyxlq58umhgsjgstgcg2a0ytfy4d9lt',
    name: 'Button',
    display: 'butt',
    symbol: 'BUTT',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/secretnetwork/images/butt.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/secretnetwork/images/butt.svg'
    },
    coingecko_id: 'buttcoin-2'
  }, {
    description: 'The native token cw20 for Alter on Secret Network',
    denom_units: [{
      denom: 'cw20:secret12rcvz0umvk875kd6a803txhtlu7y0pnd73kcej',
      exponent: 0
    }, {
      denom: 'alter',
      exponent: 6
    }],
    base: 'cw20:secret12rcvz0umvk875kd6a803txhtlu7y0pnd73kcej',
    name: 'Alter',
    display: 'alter',
    symbol: 'ALTER',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/secretnetwork/images/alter.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/secretnetwork/images/alter.svg'
    },
    coingecko_id: 'alter'
  }, {
    description: 'The native token cw20 for Amber on Secret Network',
    denom_units: [{
      denom: 'cw20:secret1s09x2xvfd2lp2skgzm29w2xtena7s8fq98v852',
      exponent: 0
    }, {
      denom: 'amber',
      exponent: 6
    }],
    type_asset: 'snip20',
    address: 'secret1s09x2xvfd2lp2skgzm29w2xtena7s8fq98v852',
    base: 'cw20:secret1s09x2xvfd2lp2skgzm29w2xtena7s8fq98v852',
    name: 'Amber',
    display: 'amber',
    symbol: 'AMBER',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/secretnetwork/images/amber.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/secretnetwork/images/amber.svg'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'sentinel',
  assets: [{
    description: 'DVPN is the native token of the Sentinel Hub.',
    denom_units: [{
      denom: 'udvpn',
      exponent: 0
    }, {
      denom: 'dvpn',
      exponent: 6
    }],
    base: 'udvpn',
    name: 'Sentinel',
    display: 'dvpn',
    symbol: 'DVPN',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/sentinel/images/dvpn.png'
    },
    coingecko_id: 'sentinel'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'shareledger',
  assets: [{
    description: 'The native token of Shareledger',
    denom_units: [{
      denom: 'nshr',
      exponent: 0
    }, {
      denom: 'shr',
      exponent: 9
    }],
    base: 'nshr',
    name: 'Shareledger',
    display: 'shr',
    symbol: 'SHR',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/shareledger/images/token.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/shareledger/images/token.svg'
    },
    coingecko_id: 'shareledger',
    keywords: ['id']
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'shentu',
  assets: [{
    description: 'The native token of Shentu',
    denom_units: [{
      denom: 'uctk',
      exponent: 0
    }, {
      denom: 'ctk',
      exponent: 6
    }],
    base: 'uctk',
    name: 'Shentu',
    display: 'ctk',
    symbol: 'CTK',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/shentu/images/ctk.png'
    },
    coingecko_id: 'certik'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'sifchain',
  assets: [{
    description: "Rowan Token (ROWAN) is the Sifchain Network's native utility token, used as the primary means to govern, provide liquidity, secure the blockchain, incentivize participants, and provide a default mechanism to store and exchange value.",
    denom_units: [{
      denom: 'rowan',
      exponent: 0
    }, {
      denom: 'ROWAN',
      exponent: 18
    }],
    base: 'rowan',
    name: 'Sifchain Rowan',
    display: 'ROWAN',
    symbol: 'ROWAN',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/sifchain/images/rowan.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/sifchain/images/rowan.png'
    },
    coingecko_id: 'sifchain'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'sommelier',
  assets: [{
    description: 'Somm Token (SOMM) is the native staking token of the Sommelier Chain',
    denom_units: [{
      denom: 'usomm',
      exponent: 0,
      aliases: ['microsomm']
    }, {
      denom: 'msomm',
      exponent: 3,
      aliases: ['millisomm']
    }, {
      denom: 'somm',
      exponent: 6
    }],
    base: 'usomm',
    name: 'Somm',
    display: 'somm',
    symbol: 'SOMM',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/sommelier/images/somm.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/sommelier/images/somm.svg'
    },
    coingecko_id: 'sommelier'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'stafihub',
  assets: [{
    description: 'The native staking and governance token of the StaFi Hub.',
    denom_units: [{
      denom: 'ufis',
      exponent: 0
    }, {
      denom: 'fis',
      exponent: 6
    }],
    base: 'ufis',
    name: 'FIS',
    display: 'fis',
    symbol: 'FIS',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/stafihub/images/stafihub.png'
    },
    coingecko_id: 'stafi'
  }, {
    description: 'A liquid staking representation of staked ATOMs',
    denom_units: [{
      denom: 'uratom',
      exponent: 0
    }, {
      denom: 'ratom',
      exponent: 6
    }],
    base: 'uratom',
    name: 'rATOM',
    display: 'ratom',
    symbol: 'rATOM',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/stafihub/images/ratom.svg'
    },
    coingecko_id: ''
  }, {
    description: 'A liquid staking representation of staked IRISs',
    denom_units: [{
      denom: 'uriris',
      exponent: 0
    }, {
      denom: 'riris',
      exponent: 6
    }],
    base: 'uriris',
    name: 'rIRIS',
    display: 'riris',
    symbol: 'rIRIS',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/stafihub/images/riris.svg'
    },
    coingecko_id: ''
  }, {
    description: 'A liquid staking representation of staked HUAHUAs',
    denom_units: [{
      denom: 'urhuahua',
      exponent: 0
    }, {
      denom: 'rhuahua',
      exponent: 6
    }],
    base: 'urhuahua',
    name: 'rHUAHUA',
    display: 'rhuahua',
    symbol: 'rHUAHUA',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/stafihub/images/rhuahua.svg'
    },
    coingecko_id: ''
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'stargaze',
  assets: [{
    description: 'The native token of Stargaze',
    denom_units: [{
      denom: 'ustars',
      exponent: 0
    }, {
      denom: 'stars',
      exponent: 6
    }],
    base: 'ustars',
    name: 'Stargaze',
    display: 'stars',
    symbol: 'STARS',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/stargaze/images/stars.png'
    },
    coingecko_id: 'stargaze'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'starname',
  assets: [{
    description: 'IOV coin is the token for the Starname (IOV) Asset Name Service',
    denom_units: [{
      denom: 'uiov',
      exponent: 0
    }, {
      denom: 'iov',
      exponent: 6
    }],
    base: 'uiov',
    name: 'Starname',
    display: 'iov',
    symbol: 'IOV',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/starname/images/iov.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/starname/images/iov.svg'
    },
    coingecko_id: 'starname'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'stride',
  assets: [{
    description: 'The native token of Stride',
    denom_units: [{
      denom: 'ustrd',
      exponent: 0
    }, {
      denom: 'strd',
      exponent: 6
    }],
    base: 'ustrd',
    name: 'Stride',
    display: 'strd',
    symbol: 'STRD',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/stride/images/strd.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/stride/images/strd.svg'
    },
    coingecko_id: 'stride'
  }, {
    denom_units: [{
      denom: 'stuatom',
      exponent: 0
    }, {
      denom: 'statom',
      exponent: 6
    }],
    base: 'stuatom',
    name: 'stATOM',
    display: 'statom',
    symbol: 'stATOM',
    traces: [{
      type: 'liquid-stake',
      counterparty: {
        chain_name: 'cosmoshub',
        base_denom: 'uatom'
      },
      provider: 'Stride'
    }],
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/stride/images/statom.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/stride/images/statom.svg'
    },
    coingecko_id: 'stride-staked-atom'
  }, {
    denom_units: [{
      denom: 'stustars',
      exponent: 0
    }, {
      denom: 'ststars',
      exponent: 6
    }],
    base: 'stustars',
    name: 'stSTARS',
    display: 'ststars',
    symbol: 'stSTARS',
    traces: [{
      type: 'liquid-stake',
      counterparty: {
        chain_name: 'stargaze',
        base_denom: 'ustars'
      },
      provider: 'Stride'
    }],
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/stride/images/ststars.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/stride/images/ststars.svg'
    }
  }, {
    denom_units: [{
      denom: 'stuosmo',
      exponent: 0
    }, {
      denom: 'stosmo',
      exponent: 6
    }],
    base: 'stuosmo',
    name: 'stOSMO',
    display: 'stosmo',
    symbol: 'stOSMO',
    traces: [{
      type: 'liquid-stake',
      counterparty: {
        chain_name: 'osmosis',
        base_denom: 'uosmo'
      },
      provider: 'Stride'
    }],
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/stride/images/stosmo.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/stride/images/stosmo.svg'
    }
  }, {
    denom_units: [{
      denom: 'stujuno',
      exponent: 0
    }, {
      denom: 'stjuno',
      exponent: 6
    }],
    base: 'stujuno',
    name: 'stJUNO',
    display: 'stjuno',
    symbol: 'stJUNO',
    traces: [{
      type: 'liquid-stake',
      counterparty: {
        chain_name: 'juno',
        base_denom: 'ujuno'
      },
      provider: 'Stride'
    }],
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/stride/images/stjuno.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/stride/images/stjuno.svg'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'teritori',
  assets: [{
    description: 'Tori token (TORI) is the Teritoti Network’s native utility token, used as the primary means to govern, secure the blockchain, incentivize ecosystem contributors and use the various Teritori dApp features.',
    denom_units: [{
      denom: 'utori',
      exponent: 0
    }, {
      denom: 'tori',
      exponent: 6
    }],
    base: 'utori',
    name: 'Teritori',
    display: 'tori',
    symbol: 'TORI',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/teritori/images/utori.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/teritori/images/utori.svg'
    },
    coingecko_id: 'teritori'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'terra',
  assets: [{
    description: 'The native staking token of Terra Classic.',
    denom_units: [{
      denom: 'uluna',
      exponent: 0,
      aliases: ['microluna']
    }, {
      denom: 'mluna',
      exponent: 3,
      aliases: ['milliluna']
    }, {
      denom: 'luna',
      exponent: 6,
      aliases: ['lunc']
    }],
    base: 'uluna',
    name: 'Luna Classic',
    display: 'luna',
    symbol: 'LUNC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/luna.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/luna.png'
    },
    coingecko_id: 'terra-luna'
  }, {
    description: 'The USD stablecoin of Terra Classic.',
    denom_units: [{
      denom: 'uusd',
      exponent: 0,
      aliases: ['microusd']
    }, {
      denom: 'musd',
      exponent: 3,
      aliases: ['milliusd']
    }, {
      denom: 'ust',
      exponent: 6,
      aliases: ['ustc']
    }],
    base: 'uusd',
    name: 'TerraClassicUSD',
    display: 'ust',
    symbol: 'USTC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/ust.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/ust.png'
    },
    coingecko_id: 'terrausd'
  }, {
    description: 'The KRW stablecoin of Terra Classic.',
    denom_units: [{
      denom: 'ukrw',
      exponent: 0,
      aliases: ['microkrw']
    }, {
      denom: 'mkrw',
      exponent: 3,
      aliases: ['millikrw']
    }, {
      denom: 'krt',
      exponent: 6,
      aliases: ['krtc']
    }],
    base: 'ukrw',
    name: 'TerraClassicKRW',
    display: 'krt',
    symbol: 'KRTC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/krt.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/krt.png'
    },
    coingecko_id: 'terrakrw'
  }, {
    description: 'The governance token of the White Whale protocol on Terra.',
    type_asset: 'cw20',
    address: 'terra1php5m8a6qd68z02t3zpw4jv2pj4vgw4wz0t8mz',
    denom_units: [{
      denom: 'cw20:terra1php5m8a6qd68z02t3zpw4jv2pj4vgw4wz0t8mz',
      exponent: 0
    }, {
      denom: 'whale',
      exponent: 6
    }],
    base: 'cw20:terra1php5m8a6qd68z02t3zpw4jv2pj4vgw4wz0t8mz',
    name: 'Whale Token',
    display: 'whale',
    symbol: 'WHALE',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/whale.png'
    },
    coingecko_id: 'white-whale'
  }, {
    denom_units: [{
      denom: 'cw20:terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp',
      exponent: 0
    }, {
      denom: 'bluna',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp',
    base: 'cw20:terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp',
    name: 'Bonded Luna',
    display: 'bluna',
    symbol: 'bLuna',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/bluna.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun',
      exponent: 0
    }, {
      denom: 'beth',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun',
    base: 'cw20:terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun',
    name: 'Bonded ETH',
    display: 'beth',
    symbol: 'bETH',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/beth.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu',
      exponent: 0
    }, {
      denom: 'aust',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu',
    base: 'cw20:terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu',
    name: 'Anchor Terra USD',
    display: 'aust',
    symbol: 'aUST',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/aust.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra14z56l0fp2lsf86zy3hty2z47ezkhnthtr9yq76',
      exponent: 0
    }, {
      denom: 'anc',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra14z56l0fp2lsf86zy3hty2z47ezkhnthtr9yq76',
    base: 'cw20:terra14z56l0fp2lsf86zy3hty2z47ezkhnthtr9yq76',
    name: 'Anchor Token',
    display: 'anc',
    symbol: 'ANC',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/anc.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra15gwkyepfc6xgca5t5zefzwy42uts8l2m4g40k6',
      exponent: 0
    }, {
      denom: 'mir',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra15gwkyepfc6xgca5t5zefzwy42uts8l2m4g40k6',
    base: 'cw20:terra15gwkyepfc6xgca5t5zefzwy42uts8l2m4g40k6',
    name: 'Mirror',
    display: 'mir',
    symbol: 'MIR',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mir.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1vxtwu4ehgzz77mnfwrntyrmgl64qjs75mpwqaz',
      exponent: 0
    }, {
      denom: 'maapl',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1vxtwu4ehgzz77mnfwrntyrmgl64qjs75mpwqaz',
    base: 'cw20:terra1vxtwu4ehgzz77mnfwrntyrmgl64qjs75mpwqaz',
    name: 'Apple Inc.',
    display: 'maapl',
    symbol: 'mAAPL',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/maapl.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1g4x2pzmkc9z3mseewxf758rllg08z3797xly0n',
      exponent: 0
    }, {
      denom: 'mabnb',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1g4x2pzmkc9z3mseewxf758rllg08z3797xly0n',
    base: 'cw20:terra1g4x2pzmkc9z3mseewxf758rllg08z3797xly0n',
    name: 'Airbnb Inc.',
    display: 'mabnb',
    symbol: 'mABNB',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mabnb.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1qelfthdanju7wavc5tq0k5r0rhsyzyyrsn09qy',
      exponent: 0
    }, {
      denom: 'mamc',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1qelfthdanju7wavc5tq0k5r0rhsyzyyrsn09qy',
    base: 'cw20:terra1qelfthdanju7wavc5tq0k5r0rhsyzyyrsn09qy',
    name: 'AMC Entertainment Holdings Inc.',
    display: 'mamc',
    symbol: 'mAMC',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mamc.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra18ej5nsuu867fkx4tuy2aglpvqjrkcrjjslap3z',
      exponent: 0
    }, {
      denom: 'mamd',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra18ej5nsuu867fkx4tuy2aglpvqjrkcrjjslap3z',
    base: 'cw20:terra18ej5nsuu867fkx4tuy2aglpvqjrkcrjjslap3z',
    name: 'Advanced Micro Devices, Inc.',
    display: 'mamd',
    symbol: 'mAMD',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mamd.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra165nd2qmrtszehcfrntlplzern7zl4ahtlhd5t2',
      exponent: 0
    }, {
      denom: 'mamzn',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra165nd2qmrtszehcfrntlplzern7zl4ahtlhd5t2',
    base: 'cw20:terra165nd2qmrtszehcfrntlplzern7zl4ahtlhd5t2',
    name: 'Amazon.com, Inc.',
    display: 'mamzn',
    symbol: 'mAMZN',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mamzn.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1qqfx5jph0rsmkur2zgzyqnfucra45rtjae5vh6',
      exponent: 0
    }, {
      denom: 'markk',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1qqfx5jph0rsmkur2zgzyqnfucra45rtjae5vh6',
    base: 'cw20:terra1qqfx5jph0rsmkur2zgzyqnfucra45rtjae5vh6',
    name: 'ARK Innovation ETF',
    display: 'markk',
    symbol: 'mARKK',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/markk.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1w7zgkcyt7y4zpct9dw8mw362ywvdlydnum2awa',
      exponent: 0
    }, {
      denom: 'mbaba',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1w7zgkcyt7y4zpct9dw8mw362ywvdlydnum2awa',
    base: 'cw20:terra1w7zgkcyt7y4zpct9dw8mw362ywvdlydnum2awa',
    name: 'Alibaba Group Holding Limited',
    display: 'mbaba',
    symbol: 'mBABA',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mbaba.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1rhhvx8nzfrx5fufkuft06q5marfkucdqwq5sjw',
      exponent: 0
    }, {
      denom: 'mbtc',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1rhhvx8nzfrx5fufkuft06q5marfkucdqwq5sjw',
    base: 'cw20:terra1rhhvx8nzfrx5fufkuft06q5marfkucdqwq5sjw',
    name: 'Bitcoin',
    display: 'mbtc',
    symbol: 'mBTC',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mbtc.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra18wayjpyq28gd970qzgjfmsjj7dmgdk039duhph',
      exponent: 0
    }, {
      denom: 'mcoin',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra18wayjpyq28gd970qzgjfmsjj7dmgdk039duhph',
    base: 'cw20:terra18wayjpyq28gd970qzgjfmsjj7dmgdk039duhph',
    name: 'Coinbase Global, Inc.',
    display: 'mcoin',
    symbol: 'mCOIN',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mcoin.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra149755r3y0rve30e209awkhn5cxgkn5c8ju9pm5',
      exponent: 0
    }, {
      denom: 'mdis',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra149755r3y0rve30e209awkhn5cxgkn5c8ju9pm5',
    base: 'cw20:terra149755r3y0rve30e209awkhn5cxgkn5c8ju9pm5',
    name: 'The Walt Disney Company',
    display: 'mdis',
    symbol: 'mDIS',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mdis.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra19ya4jpvjvvtggepvmmj6ftmwly3p7way0tt08r',
      exponent: 0
    }, {
      denom: 'mdot',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra19ya4jpvjvvtggepvmmj6ftmwly3p7way0tt08r',
    base: 'cw20:terra19ya4jpvjvvtggepvmmj6ftmwly3p7way0tt08r',
    name: 'Polkadot',
    display: 'mdot',
    symbol: 'mDOT',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mdot.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1dk3g53js3034x4v5c3vavhj2738une880yu6kx',
      exponent: 0
    }, {
      denom: 'meth',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1dk3g53js3034x4v5c3vavhj2738une880yu6kx',
    base: 'cw20:terra1dk3g53js3034x4v5c3vavhj2738une880yu6kx',
    name: 'Ether',
    display: 'meth',
    symbol: 'mETH',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/meth.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1mqsjugsugfprn3cvgxsrr8akkvdxv2pzc74us7',
      exponent: 0
    }, {
      denom: 'mfb',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1mqsjugsugfprn3cvgxsrr8akkvdxv2pzc74us7',
    base: 'cw20:terra1mqsjugsugfprn3cvgxsrr8akkvdxv2pzc74us7',
    name: 'Facebook Inc.',
    display: 'mfb',
    symbol: 'mFB',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mfb.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1l5lrxtwd98ylfy09fn866au6dp76gu8ywnudls',
      exponent: 0
    }, {
      denom: 'mglxy',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1l5lrxtwd98ylfy09fn866au6dp76gu8ywnudls',
    base: 'cw20:terra1l5lrxtwd98ylfy09fn866au6dp76gu8ywnudls',
    name: 'Galaxy Digital Holdings Ltd',
    display: 'mglxy',
    symbol: 'mGLXY',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mglxy.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1m6j6j9gw728n82k78s0j9kq8l5p6ne0xcc820p',
      exponent: 0
    }, {
      denom: 'mgme',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1m6j6j9gw728n82k78s0j9kq8l5p6ne0xcc820p',
    base: 'cw20:terra1m6j6j9gw728n82k78s0j9kq8l5p6ne0xcc820p',
    name: 'GameStop Corp',
    display: 'mgme',
    symbol: 'mGME',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mgme.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1h8arz2k547uvmpxctuwush3jzc8fun4s96qgwt',
      exponent: 0
    }, {
      denom: 'mgoogl',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1h8arz2k547uvmpxctuwush3jzc8fun4s96qgwt',
    base: 'cw20:terra1h8arz2k547uvmpxctuwush3jzc8fun4s96qgwt',
    name: 'Alphabet Inc.',
    display: 'mgoogl',
    symbol: 'mGOOGL',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mgoogl.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra137drsu8gce5thf6jr5mxlfghw36rpljt3zj73v',
      exponent: 0
    }, {
      denom: 'mgs',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra137drsu8gce5thf6jr5mxlfghw36rpljt3zj73v',
    base: 'cw20:terra137drsu8gce5thf6jr5mxlfghw36rpljt3zj73v',
    name: 'Goldman Sachs Group Inc.',
    display: 'mgs',
    symbol: 'mGS',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mgs.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra18yqdfzfhnguerz9du5mnvxsh5kxlknqhcxzjfr',
      exponent: 0
    }, {
      denom: 'mhood',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra18yqdfzfhnguerz9du5mnvxsh5kxlknqhcxzjfr',
    base: 'cw20:terra18yqdfzfhnguerz9du5mnvxsh5kxlknqhcxzjfr',
    name: 'Robinhood Markets, Inc.',
    display: 'mhood',
    symbol: 'mHOOD',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mhood.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra10h7ry7apm55h4ez502dqdv9gr53juu85nkd4aq',
      exponent: 0
    }, {
      denom: 'miau',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra10h7ry7apm55h4ez502dqdv9gr53juu85nkd4aq',
    base: 'cw20:terra10h7ry7apm55h4ez502dqdv9gr53juu85nkd4aq',
    name: 'iShares Gold Trust',
    display: 'miau',
    symbol: 'mIAU',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/miau.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra15hp9pr8y4qsvqvxf3m4xeptlk7l8h60634gqec',
      exponent: 0
    }, {
      denom: 'miau',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra15hp9pr8y4qsvqvxf3m4xeptlk7l8h60634gqec',
    base: 'cw20:terra15hp9pr8y4qsvqvxf3m4xeptlk7l8h60634gqec',
    name: 'iShares Gold Trust',
    display: 'miau',
    symbol: 'mIAU',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/miau.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1ptdxmj3xmmljzx02nr4auwfuelmj0cnkh8egs2',
      exponent: 0
    }, {
      denom: 'mjnj',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1ptdxmj3xmmljzx02nr4auwfuelmj0cnkh8egs2',
    base: 'cw20:terra1ptdxmj3xmmljzx02nr4auwfuelmj0cnkh8egs2',
    name: 'Johnson & Johnson',
    display: 'mjnj',
    symbol: 'mJNJ',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mjnj.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1qsnj5gvq8rgs7yws8x5u02gwd5wvtu4tks0hjm',
      exponent: 0
    }, {
      denom: 'mko',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1qsnj5gvq8rgs7yws8x5u02gwd5wvtu4tks0hjm',
    base: 'cw20:terra1qsnj5gvq8rgs7yws8x5u02gwd5wvtu4tks0hjm',
    name: 'Coca-Cola',
    display: 'mko',
    symbol: 'mKO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mko.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1227ppwxxj3jxz8cfgq00jgnxqcny7ryenvkwj6',
      exponent: 0
    }, {
      denom: 'mmsft',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1227ppwxxj3jxz8cfgq00jgnxqcny7ryenvkwj6',
    base: 'cw20:terra1227ppwxxj3jxz8cfgq00jgnxqcny7ryenvkwj6',
    name: 'Microsoft Corporation',
    display: 'mmsft',
    symbol: 'mMSFT',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mmsft.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1jsxngqasf2zynj5kyh0tgq9mj3zksa5gk35j4k',
      exponent: 0
    }, {
      denom: 'mnflx',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1jsxngqasf2zynj5kyh0tgq9mj3zksa5gk35j4k',
    base: 'cw20:terra1jsxngqasf2zynj5kyh0tgq9mj3zksa5gk35j4k',
    name: 'Netflix, Inc.',
    display: 'mnflx',
    symbol: 'mNFLX',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mnflx.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1dj2cj02zak0nvwy3uj9r9dhhxhdwxnw6psse6p',
      exponent: 0
    }, {
      denom: 'mnio',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1dj2cj02zak0nvwy3uj9r9dhhxhdwxnw6psse6p',
    base: 'cw20:terra1dj2cj02zak0nvwy3uj9r9dhhxhdwxnw6psse6p',
    name: 'NIO Inc.',
    display: 'mnio',
    symbol: 'mNIO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mnio.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra17ana8hvzea0q7w367dm0dw48sxwql39qekpt7g',
      exponent: 0
    }, {
      denom: 'mnke',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra17ana8hvzea0q7w367dm0dw48sxwql39qekpt7g',
    base: 'cw20:terra17ana8hvzea0q7w367dm0dw48sxwql39qekpt7g',
    name: 'NIKE, Inc.',
    display: 'mnke',
    symbol: 'mNKE',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mnke.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1drsjzvzej4h4qlehcfwclxg4w5l3h5tuvd3jd8',
      exponent: 0
    }, {
      denom: 'mnvda',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1drsjzvzej4h4qlehcfwclxg4w5l3h5tuvd3jd8',
    base: 'cw20:terra1drsjzvzej4h4qlehcfwclxg4w5l3h5tuvd3jd8',
    name: 'NVIDIA Corporation',
    display: 'mnvda',
    symbol: 'mNVDA',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mnvda.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1rh2907984nudl7vh56qjdtvv7947z4dujj92sx',
      exponent: 0
    }, {
      denom: 'mpypl',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1rh2907984nudl7vh56qjdtvv7947z4dujj92sx',
    base: 'cw20:terra1rh2907984nudl7vh56qjdtvv7947z4dujj92sx',
    name: 'PayPal Holdings Inc',
    display: 'mpypl',
    symbol: 'mPYPL',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mpypl.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1csk6tc7pdmpr782w527hwhez6gfv632tyf72cp',
      exponent: 0
    }, {
      denom: 'mqqq',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1csk6tc7pdmpr782w527hwhez6gfv632tyf72cp',
    base: 'cw20:terra1csk6tc7pdmpr782w527hwhez6gfv632tyf72cp',
    name: 'Invesco QQQ Trust',
    display: 'mqqq',
    symbol: 'mQQQ',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mqqq.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1246zy658dfgtausf0c4a6ly8sc2e285q4kxqga',
      exponent: 0
    }, {
      denom: 'msbux',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1246zy658dfgtausf0c4a6ly8sc2e285q4kxqga',
    base: 'cw20:terra1246zy658dfgtausf0c4a6ly8sc2e285q4kxqga',
    name: 'Starbucks Corporation',
    display: 'msbux',
    symbol: 'mSBUX',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/msbux.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1kscs6uhrqwy6rx5kuw5lwpuqvm3t6j2d6uf2lp',
      exponent: 0
    }, {
      denom: 'mslv',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1kscs6uhrqwy6rx5kuw5lwpuqvm3t6j2d6uf2lp',
    base: 'cw20:terra1kscs6uhrqwy6rx5kuw5lwpuqvm3t6j2d6uf2lp',
    name: 'iShares Silver Trust',
    display: 'mslv',
    symbol: 'mSLV',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mslv.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1aa00lpfexyycedfg5k2p60l9djcmw0ue5l8fhc',
      exponent: 0
    }, {
      denom: 'mspy',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1aa00lpfexyycedfg5k2p60l9djcmw0ue5l8fhc',
    base: 'cw20:terra1aa00lpfexyycedfg5k2p60l9djcmw0ue5l8fhc',
    name: 'SPDR S&P 500',
    display: 'mspy',
    symbol: 'mSPY',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mspy.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1u43zu5amjlsgty5j64445fr9yglhm53m576ugh',
      exponent: 0
    }, {
      denom: 'msq',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1u43zu5amjlsgty5j64445fr9yglhm53m576ugh',
    base: 'cw20:terra1u43zu5amjlsgty5j64445fr9yglhm53m576ugh',
    name: 'Square, Inc.',
    display: 'msq',
    symbol: 'mSQ',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/msq.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra14y5affaarufk3uscy2vr6pe6w6zqf2wpjzn5sh',
      exponent: 0
    }, {
      denom: 'mtsla',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra14y5affaarufk3uscy2vr6pe6w6zqf2wpjzn5sh',
    base: 'cw20:terra14y5affaarufk3uscy2vr6pe6w6zqf2wpjzn5sh',
    name: 'Tesla, Inc.',
    display: 'mtsla',
    symbol: 'mTSLA',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mtsla.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1cc3enj9qgchlrj34cnzhwuclc4vl2z3jl7tkqg',
      exponent: 0
    }, {
      denom: 'mtwtr',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1cc3enj9qgchlrj34cnzhwuclc4vl2z3jl7tkqg',
    base: 'cw20:terra1cc3enj9qgchlrj34cnzhwuclc4vl2z3jl7tkqg',
    name: 'Twitter, Inc.',
    display: 'mtwtr',
    symbol: 'mTWTR',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mtwtr.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1lvmx8fsagy70tv0fhmfzdw9h6s3sy4prz38ugf',
      exponent: 0
    }, {
      denom: 'muso',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1lvmx8fsagy70tv0fhmfzdw9h6s3sy4prz38ugf',
    base: 'cw20:terra1lvmx8fsagy70tv0fhmfzdw9h6s3sy4prz38ugf',
    name: 'United States Oil Fund, LP',
    display: 'muso',
    symbol: 'mUSO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/muso.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra19cmt6vzvhnnnfsmccaaxzy2uaj06zjktu6yzjx',
      exponent: 0
    }, {
      denom: 'mvixy',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra19cmt6vzvhnnnfsmccaaxzy2uaj06zjktu6yzjx',
    base: 'cw20:terra19cmt6vzvhnnnfsmccaaxzy2uaj06zjktu6yzjx',
    name: 'ProShares VIX Short-Term Futures ETF',
    display: 'mvixy',
    symbol: 'mVIXY',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mvixy.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1zp3a6q6q4953cz376906g5qfmxnlg77hx3te45',
      exponent: 0
    }, {
      denom: 'mvixy',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1zp3a6q6q4953cz376906g5qfmxnlg77hx3te45',
    base: 'cw20:terra1zp3a6q6q4953cz376906g5qfmxnlg77hx3te45',
    name: 'ProShares VIX Short-Term Futures ETF',
    display: 'mvixy',
    symbol: 'mVIXY',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mvixy.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1ez46kxtulsdv07538fh5ra5xj8l68mu8eg24vr',
      exponent: 0
    }, {
      denom: 'lota',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1ez46kxtulsdv07538fh5ra5xj8l68mu8eg24vr',
    base: 'cw20:terra1ez46kxtulsdv07538fh5ra5xj8l68mu8eg24vr',
    name: 'loterra',
    display: 'lota',
    symbol: 'LOTA',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/lota.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra17jnhankdfl8vyzj6vejt7ag8uz0cjc9crkl2h7',
      exponent: 0
    }, {
      denom: 'dph',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra17jnhankdfl8vyzj6vejt7ag8uz0cjc9crkl2h7',
    base: 'cw20:terra17jnhankdfl8vyzj6vejt7ag8uz0cjc9crkl2h7',
    name: 'Digipharm',
    display: 'dph',
    symbol: 'DPH',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/dph.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1kcthelkax4j9x8d3ny6sdag0qmxxynl3qtcrpy',
      exponent: 0
    }, {
      denom: 'mine',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1kcthelkax4j9x8d3ny6sdag0qmxxynl3qtcrpy',
    base: 'cw20:terra1kcthelkax4j9x8d3ny6sdag0qmxxynl3qtcrpy',
    name: 'Pylon MINE Token',
    display: 'mine',
    symbol: 'MINE',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mine.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1zsaswh926ey8qa5x4vj93kzzlfnef0pstuca0y',
      exponent: 0
    }, {
      denom: 'bpsidp-24m',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1zsaswh926ey8qa5x4vj93kzzlfnef0pstuca0y',
    base: 'cw20:terra1zsaswh926ey8qa5x4vj93kzzlfnef0pstuca0y',
    name: 'Pylon bDP Token for Gateway Psi 24m Pool',
    display: 'bpsidp-24m',
    symbol: 'bPsiDP-24m',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/bpsidp-24m.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1s5eczhe0h0jutf46re52x5z4r03c8hupacxmdr',
      exponent: 0
    }, {
      denom: 'spec',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1s5eczhe0h0jutf46re52x5z4r03c8hupacxmdr',
    base: 'cw20:terra1s5eczhe0h0jutf46re52x5z4r03c8hupacxmdr',
    name: 'Spectrum Token',
    display: 'spec',
    symbol: 'SPEC',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/spec.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1nef5jf6c7js9x6gkntlehgywvjlpytm7pcgkn4',
      exponent: 0
    }, {
      denom: 'loop',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1nef5jf6c7js9x6gkntlehgywvjlpytm7pcgkn4',
    base: 'cw20:terra1nef5jf6c7js9x6gkntlehgywvjlpytm7pcgkn4',
    name: 'LOOP token',
    display: 'loop',
    symbol: 'LOOP',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/loop.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1jx4lmmke2srcvpjeereetc9hgegp4g5j0p9r2q',
      exponent: 0
    }, {
      denom: 'loopr',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1jx4lmmke2srcvpjeereetc9hgegp4g5j0p9r2q',
    base: 'cw20:terra1jx4lmmke2srcvpjeereetc9hgegp4g5j0p9r2q',
    name: 'LOOPR token',
    display: 'loopr',
    symbol: 'LOOPR',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/loopr.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra13xujxcrc9dqft4p9a8ls0w3j0xnzm6y2uvve8n',
      exponent: 0
    }, {
      denom: 'stt',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra13xujxcrc9dqft4p9a8ls0w3j0xnzm6y2uvve8n',
    base: 'cw20:terra13xujxcrc9dqft4p9a8ls0w3j0xnzm6y2uvve8n',
    name: 'StarTerra Token',
    display: 'stt',
    symbol: 'STT',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/stt.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra19djkaepjjswucys4npd5ltaxgsntl7jf0xz7w6',
      exponent: 0
    }, {
      denom: 'twd',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra19djkaepjjswucys4npd5ltaxgsntl7jf0xz7w6',
    base: 'cw20:terra19djkaepjjswucys4npd5ltaxgsntl7jf0xz7w6',
    name: 'TWD Token',
    display: 'twd',
    symbol: 'TWD',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/twd.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1kvjscdgwuvwc6uzm4rqfjl6nlmuhj28tequlnc',
      exponent: 0
    }, {
      denom: 'xtra',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1kvjscdgwuvwc6uzm4rqfjl6nlmuhj28tequlnc',
    base: 'cw20:terra1kvjscdgwuvwc6uzm4rqfjl6nlmuhj28tequlnc',
    name: 'xterra Token',
    display: 'xtra',
    symbol: 'XTRA',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/xtra.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1vtr50tw0pgqpes34zqu60n554p9x4950wk8f63',
      exponent: 0
    }, {
      denom: 'miaw',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1vtr50tw0pgqpes34zqu60n554p9x4950wk8f63',
    base: 'cw20:terra1vtr50tw0pgqpes34zqu60n554p9x4950wk8f63',
    name: 'MIAW Token',
    display: 'miaw',
    symbol: 'MIAW',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/miaw.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra12897djskt9rge8dtmm86w654g7kzckkd698608',
      exponent: 0
    }, {
      denom: 'psi',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra12897djskt9rge8dtmm86w654g7kzckkd698608',
    base: 'cw20:terra12897djskt9rge8dtmm86w654g7kzckkd698608',
    name: 'Nexus Governance Token',
    display: 'psi',
    symbol: 'Psi',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/psi.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra10f2mt82kjnkxqj2gepgwl637u2w4ue2z5nhz5j',
      exponent: 0
    }, {
      denom: 'nluna',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra10f2mt82kjnkxqj2gepgwl637u2w4ue2z5nhz5j',
    base: 'cw20:terra10f2mt82kjnkxqj2gepgwl637u2w4ue2z5nhz5j',
    name: 'Nexus nLuna Token',
    display: 'nluna',
    symbol: 'nLuna',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/nluna.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra178v546c407pdnx5rer3hu8s2c0fc924k74ymnn',
      exponent: 0
    }, {
      denom: 'neth',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra178v546c407pdnx5rer3hu8s2c0fc924k74ymnn',
    base: 'cw20:terra178v546c407pdnx5rer3hu8s2c0fc924k74ymnn',
    name: 'Nexus nETH Token',
    display: 'neth',
    symbol: 'nETH',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/neth.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1u553zk43jd4rwzc53qrdrq4jc2p8rextyq09dj',
      exponent: 0
    }, {
      denom: 'cnluna',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1u553zk43jd4rwzc53qrdrq4jc2p8rextyq09dj',
    base: 'cw20:terra1u553zk43jd4rwzc53qrdrq4jc2p8rextyq09dj',
    name: 'nLuna autocompounder share representation',
    display: 'cnluna',
    symbol: 'cnLuna',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/cnluna.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1nagqpmyw55yjphea4rhntlfv87ugmeaj8ym756',
      exponent: 0
    }, {
      denom: 'cneth',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1nagqpmyw55yjphea4rhntlfv87ugmeaj8ym756',
    base: 'cw20:terra1nagqpmyw55yjphea4rhntlfv87ugmeaj8ym756',
    name: 'nETH autocompounder share representation',
    display: 'cneth',
    symbol: 'cnETH',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/cneth.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra13k62n0285wj8ug0ngcgpf7dgnkzqeu279tz636',
      exponent: 0
    }, {
      denom: 'navax',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra13k62n0285wj8ug0ngcgpf7dgnkzqeu279tz636',
    base: 'cw20:terra13k62n0285wj8ug0ngcgpf7dgnkzqeu279tz636',
    name: 'Nexus nAVAX Token',
    display: 'navax',
    symbol: 'nAVAX',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/navax.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1jtdc6zpf95tvh9peuaxwp3v0yqszcnwl8j5ade',
      exponent: 0
    }, {
      denom: 'natom',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1jtdc6zpf95tvh9peuaxwp3v0yqszcnwl8j5ade',
    base: 'cw20:terra1jtdc6zpf95tvh9peuaxwp3v0yqszcnwl8j5ade',
    name: 'Nexus nATOM Token',
    display: 'natom',
    symbol: 'nATOM',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/natom.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1dy9kmlm4anr92e42mrkjwzyvfqwz66un00rwr5',
      exponent: 0
    }, {
      denom: 'vkr',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1dy9kmlm4anr92e42mrkjwzyvfqwz66un00rwr5',
    base: 'cw20:terra1dy9kmlm4anr92e42mrkjwzyvfqwz66un00rwr5',
    name: 'VKR Token',
    display: 'vkr',
    symbol: 'VKR',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/vkr.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1mddcdx0ujx89f38gu7zspk2r2ffdl5enyz2u03',
      exponent: 0
    }, {
      denom: 'orion',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1mddcdx0ujx89f38gu7zspk2r2ffdl5enyz2u03',
    base: 'cw20:terra1mddcdx0ujx89f38gu7zspk2r2ffdl5enyz2u03',
    name: 'Orion Money (Portal)',
    display: 'orion',
    symbol: 'ORION',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/orion.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1r5506ckw5tfr3z52jwlek8vg9sn3yflrqrzfsc',
      exponent: 0
    }, {
      denom: 'tland',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1r5506ckw5tfr3z52jwlek8vg9sn3yflrqrzfsc',
    base: 'cw20:terra1r5506ckw5tfr3z52jwlek8vg9sn3yflrqrzfsc',
    name: 'TerraLand Token',
    display: 'tland',
    symbol: 'TLAND',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/tland.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1w0p5zre38ecdy3ez8efd5h9fvgum5s206xknrg',
      exponent: 0
    }, {
      denom: 'vust',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1w0p5zre38ecdy3ez8efd5h9fvgum5s206xknrg',
    base: 'cw20:terra1w0p5zre38ecdy3ez8efd5h9fvgum5s206xknrg',
    name: 'Vault UST',
    display: 'vust',
    symbol: 'vUST',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/vust.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra14tl83xcwqjy0ken9peu4pjjuu755lrry2uy25r',
      exponent: 0
    }, {
      denom: 'eth',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra14tl83xcwqjy0ken9peu4pjjuu755lrry2uy25r',
    base: 'cw20:terra14tl83xcwqjy0ken9peu4pjjuu755lrry2uy25r',
    name: 'Ether (Portal)',
    display: 'eth',
    symbol: 'ETH',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/eth.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1aa7upykmmqqc63l924l5qfap8mrmx5rfdm0v55',
      exponent: 0
    }, {
      denom: 'wbtc',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1aa7upykmmqqc63l924l5qfap8mrmx5rfdm0v55',
    base: 'cw20:terra1aa7upykmmqqc63l924l5qfap8mrmx5rfdm0v55',
    name: 'Wrapped BTC (Portal)',
    display: 'wbtc',
    symbol: 'WBTC',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/wbtc.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra190tqwgqx7s8qrknz6kckct7v607cu068gfujpk',
      exponent: 0
    }, {
      denom: 'sol',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra190tqwgqx7s8qrknz6kckct7v607cu068gfujpk',
    base: 'cw20:terra190tqwgqx7s8qrknz6kckct7v607cu068gfujpk',
    name: 'SOL (Portal)',
    display: 'sol',
    symbol: 'SOL',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/sol.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1dfasranqm4uyaz72r960umxy0w8t6zewqlnkuq',
      exponent: 0
    }, {
      denom: 'maticet',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1dfasranqm4uyaz72r960umxy0w8t6zewqlnkuq',
    base: 'cw20:terra1dfasranqm4uyaz72r960umxy0w8t6zewqlnkuq',
    name: 'MATIC (Portal from Ethereum)',
    display: 'maticet',
    symbol: 'MATICet',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/maticet.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1cetg5wruw2wsdjp7j46rj44xdel00z006e9yg8',
      exponent: 0
    }, {
      denom: 'bnb',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1cetg5wruw2wsdjp7j46rj44xdel00z006e9yg8',
    base: 'cw20:terra1cetg5wruw2wsdjp7j46rj44xdel00z006e9yg8',
    name: 'Binance Coin (Portal)',
    display: 'bnb',
    symbol: 'BNB',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/bnb.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1xvqlpjl2dxyel9qrp6qvtrg04xe3jh9cyxc6av',
      exponent: 0
    }, {
      denom: 'cake',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1xvqlpjl2dxyel9qrp6qvtrg04xe3jh9cyxc6av',
    base: 'cw20:terra1xvqlpjl2dxyel9qrp6qvtrg04xe3jh9cyxc6av',
    name: 'PancakeSwap Token (Portal)',
    display: 'cake',
    symbol: 'CAKE',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/cake.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra12dfv3f0e6m22z6cnhfn3nxk2en3z3zeqy6ctym',
      exponent: 0
    }, {
      denom: 'link',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra12dfv3f0e6m22z6cnhfn3nxk2en3z3zeqy6ctym',
    base: 'cw20:terra12dfv3f0e6m22z6cnhfn3nxk2en3z3zeqy6ctym',
    name: 'Chainlink (Portal)',
    display: 'link',
    symbol: 'LINK',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/link.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1csvuzlf92nyemu6tv25h0l79etpe8hz3h5vn4a',
      exponent: 0
    }, {
      denom: 'sushi',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1csvuzlf92nyemu6tv25h0l79etpe8hz3h5vn4a',
    base: 'cw20:terra1csvuzlf92nyemu6tv25h0l79etpe8hz3h5vn4a',
    name: 'SushiToken (Portal)',
    display: 'sushi',
    symbol: 'SUSHI',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/sushi.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1wyxkuy5jq545fn7xfn3enpvs5zg9f9dghf6gxf',
      exponent: 0
    }, {
      denom: 'uni',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1wyxkuy5jq545fn7xfn3enpvs5zg9f9dghf6gxf',
    base: 'cw20:terra1wyxkuy5jq545fn7xfn3enpvs5zg9f9dghf6gxf',
    name: 'Uniswap (Portal)',
    display: 'uni',
    symbol: 'UNI',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/uni.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1ce06wkrdm4vl6t0hvc0g86rsy27pu8yadg3dva',
      exponent: 0
    }, {
      denom: 'usdtet',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1ce06wkrdm4vl6t0hvc0g86rsy27pu8yadg3dva',
    base: 'cw20:terra1ce06wkrdm4vl6t0hvc0g86rsy27pu8yadg3dva',
    name: 'Tether USD (Portal from Ethereum)',
    display: 'usdtet',
    symbol: 'USDTet',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/usdtet.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1pepwcav40nvj3kh60qqgrk8k07ydmc00xyat06',
      exponent: 0
    }, {
      denom: 'usdcet',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1pepwcav40nvj3kh60qqgrk8k07ydmc00xyat06',
    base: 'cw20:terra1pepwcav40nvj3kh60qqgrk8k07ydmc00xyat06',
    name: 'USD Coin (Portal from Ethereum)',
    display: 'usdcet',
    symbol: 'USDCet',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/usdcet.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1xfsdgcemqwxp4hhnyk4rle6wr22sseq7j07dnn',
      exponent: 0
    }, {
      denom: 'kuji',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1xfsdgcemqwxp4hhnyk4rle6wr22sseq7j07dnn',
    base: 'cw20:terra1xfsdgcemqwxp4hhnyk4rle6wr22sseq7j07dnn',
    name: 'Kujira Token',
    display: 'kuji',
    symbol: 'KUJI',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/kuji.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra188w26t95tf4dz77raftme8p75rggatxjxfeknw',
      exponent: 0
    }, {
      denom: 'skuji',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra188w26t95tf4dz77raftme8p75rggatxjxfeknw',
    base: 'cw20:terra188w26t95tf4dz77raftme8p75rggatxjxfeknw',
    name: 'Staked KUJI',
    display: 'skuji',
    symbol: 'sKUJI',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/skuji.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra133chr09wu8sakfte5v7vd8qzq9vghtkv4tn0ur',
      exponent: 0
    }, {
      denom: 'wsteth',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra133chr09wu8sakfte5v7vd8qzq9vghtkv4tn0ur',
    base: 'cw20:terra133chr09wu8sakfte5v7vd8qzq9vghtkv4tn0ur',
    name: 'Lido wstETH (Portal)',
    display: 'wsteth',
    symbol: 'wstETH',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/wsteth.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1t9ul45l7m6jw6sxgvnp8e5hj8xzkjsg82g84ap',
      exponent: 0
    }, {
      denom: 'wstsol',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1t9ul45l7m6jw6sxgvnp8e5hj8xzkjsg82g84ap',
    base: 'cw20:terra1t9ul45l7m6jw6sxgvnp8e5hj8xzkjsg82g84ap',
    name: 'Lido wstSOL (Portal)',
    display: 'wstsol',
    symbol: 'wstSOL',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/wstsol.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1c3xd5s2j3ejx2d94tvcjfkrdeu6rmz48ghzznj',
      exponent: 0
    }, {
      denom: 'wsbsol',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1c3xd5s2j3ejx2d94tvcjfkrdeu6rmz48ghzznj',
    base: 'cw20:terra1c3xd5s2j3ejx2d94tvcjfkrdeu6rmz48ghzznj',
    name: 'Lido bonded SOL (Portal)',
    display: 'wsbsol',
    symbol: 'wsbSOL',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/wsbsol.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1jxypgnfa07j6w92wazzyskhreq2ey2a5crgt6z',
      exponent: 0
    }, {
      denom: 'ldo',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1jxypgnfa07j6w92wazzyskhreq2ey2a5crgt6z',
    base: 'cw20:terra1jxypgnfa07j6w92wazzyskhreq2ey2a5crgt6z',
    name: 'Lido DAO (Portal)',
    display: 'ldo',
    symbol: 'LDO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/ldo.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1u5szg038ur9kzuular3cae8hq6q5rk5u27tuvz',
      exponent: 0
    }, {
      denom: 'webeth',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1u5szg038ur9kzuular3cae8hq6q5rk5u27tuvz',
    base: 'cw20:terra1u5szg038ur9kzuular3cae8hq6q5rk5u27tuvz',
    name: 'Lido Bonded ETH (Wormhole)',
    display: 'webeth',
    symbol: 'webETH',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/webeth.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1yg3j2s986nyp5z7r2lvt0hx3r0lnd7kwvwwtsc',
      exponent: 0
    }, {
      denom: 'stluna',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1yg3j2s986nyp5z7r2lvt0hx3r0lnd7kwvwwtsc',
    base: 'cw20:terra1yg3j2s986nyp5z7r2lvt0hx3r0lnd7kwvwwtsc',
    name: 'Lido staked Luna',
    display: 'stluna',
    symbol: 'stLuna',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/stluna.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra169edevav3pdrtjcx35j6pvzuv54aevewar4nlh',
      exponent: 0
    }, {
      denom: 'xdefi',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra169edevav3pdrtjcx35j6pvzuv54aevewar4nlh',
    base: 'cw20:terra169edevav3pdrtjcx35j6pvzuv54aevewar4nlh',
    name: 'XDEFI (Portal)',
    display: 'xdefi',
    symbol: 'XDEFI'
  }, {
    denom_units: [{
      denom: 'cw20:terra193c42lfwmlkasvcw22l9qqzc5q2dx208tkd7wl',
      exponent: 0
    }, {
      denom: 'btl',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra193c42lfwmlkasvcw22l9qqzc5q2dx208tkd7wl',
    base: 'cw20:terra193c42lfwmlkasvcw22l9qqzc5q2dx208tkd7wl',
    name: 'Bitlocus Token',
    display: 'btl',
    symbol: 'BTL',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/btl.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra17y9qkl8dfkeg4py7n0g5407emqnemc3yqk5rup',
      exponent: 0
    }, {
      denom: 'lunax',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra17y9qkl8dfkeg4py7n0g5407emqnemc3yqk5rup',
    base: 'cw20:terra17y9qkl8dfkeg4py7n0g5407emqnemc3yqk5rup',
    name: 'LunaX Token',
    display: 'lunax',
    symbol: 'LunaX',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/lunax.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1m3tdguf59xq3pa2twk5fjte5g6szj5y9x5npy7',
      exponent: 0
    }, {
      denom: 'luni',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1m3tdguf59xq3pa2twk5fjte5g6szj5y9x5npy7',
    base: 'cw20:terra1m3tdguf59xq3pa2twk5fjte5g6szj5y9x5npy7',
    name: 'LUNI',
    display: 'luni',
    symbol: 'LUNI',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/luni.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra13awdgcx40tz5uygkgm79dytez3x87rpg4uhnvu',
      exponent: 0
    }, {
      denom: 'ply',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra13awdgcx40tz5uygkgm79dytez3x87rpg4uhnvu',
    base: 'cw20:terra13awdgcx40tz5uygkgm79dytez3x87rpg4uhnvu',
    name: 'PlayNity Token',
    display: 'ply',
    symbol: 'PLY',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/ply.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1u2k0nkenw0p25ljsr4ksh7rxm65y466vkdewwj',
      exponent: 0
    }, {
      denom: 'tfloki',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1u2k0nkenw0p25ljsr4ksh7rxm65y466vkdewwj',
    base: 'cw20:terra1u2k0nkenw0p25ljsr4ksh7rxm65y466vkdewwj',
    name: 'TFLOKI',
    display: 'tfloki',
    symbol: 'TFLOKI',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/tfloki.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1a8k3jyv3wf6k3zngza5h6srrxcckdf7zv90p6u',
      exponent: 0
    }, {
      denom: 'tftic',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1a8k3jyv3wf6k3zngza5h6srrxcckdf7zv90p6u',
    base: 'cw20:terra1a8k3jyv3wf6k3zngza5h6srrxcckdf7zv90p6u',
    name: 'TFLOKI Genesis Ticket',
    display: 'tftic',
    symbol: 'TFTIC',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/tftic.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1xt9fgu7965kgvunnjts9zkprd8986kcc444q86',
      exponent: 0
    }, {
      denom: 'tfticii',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1xt9fgu7965kgvunnjts9zkprd8986kcc444q86',
    base: 'cw20:terra1xt9fgu7965kgvunnjts9zkprd8986kcc444q86',
    name: 'TFLOKI New World Ticket',
    display: 'tfticii',
    symbol: 'TFTICII',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/tfticii.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1vte2xv7dr8sfnrnwdf9arcyprqgr0hty5ads28',
      exponent: 0
    }, {
      denom: 'tfticiii',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1vte2xv7dr8sfnrnwdf9arcyprqgr0hty5ads28',
    base: 'cw20:terra1vte2xv7dr8sfnrnwdf9arcyprqgr0hty5ads28',
    name: 'TFLOKI Aviator Ticket',
    display: 'tfticiii',
    symbol: 'TFTICIII',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/tfticiii.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1hmxxq0y8h79f3228vs0czc4uz5jdgjt0appp26',
      exponent: 0
    }, {
      denom: 'moon',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1hmxxq0y8h79f3228vs0czc4uz5jdgjt0appp26',
    base: 'cw20:terra1hmxxq0y8h79f3228vs0czc4uz5jdgjt0appp26',
    name: 'Moon Token',
    display: 'moon',
    symbol: 'MOON',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/moon.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1xj49zyqrwpv5k928jwfpfy2ha668nwdgkwlrg3',
      exponent: 0
    }, {
      denom: 'astro',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1xj49zyqrwpv5k928jwfpfy2ha668nwdgkwlrg3',
    base: 'cw20:terra1xj49zyqrwpv5k928jwfpfy2ha668nwdgkwlrg3',
    name: 'Astroport Token',
    display: 'astro',
    symbol: 'ASTRO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/astro.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra14lpnyzc9z4g3ugr4lhm8s4nle0tq8vcltkhzh7',
      exponent: 0
    }, {
      denom: 'xastro',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra14lpnyzc9z4g3ugr4lhm8s4nle0tq8vcltkhzh7',
    base: 'cw20:terra14lpnyzc9z4g3ugr4lhm8s4nle0tq8vcltkhzh7',
    name: 'Staked Astroport Token',
    display: 'xastro',
    symbol: 'xASTRO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/xastro.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1w8kvd6cqpsthupsk4l0clwnmek4l3zr7c84kwq',
      exponent: 0
    }, {
      denom: 'halo',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1w8kvd6cqpsthupsk4l0clwnmek4l3zr7c84kwq',
    base: 'cw20:terra1w8kvd6cqpsthupsk4l0clwnmek4l3zr7c84kwq',
    name: 'Angel Protocol Token',
    display: 'halo',
    symbol: 'HALO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/halo.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1kdfsdm3c4reun9j3m4mk3nmyw4a4ns7mj24q3j',
      exponent: 0
    }, {
      denom: 'pug',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1kdfsdm3c4reun9j3m4mk3nmyw4a4ns7mj24q3j',
    base: 'cw20:terra1kdfsdm3c4reun9j3m4mk3nmyw4a4ns7mj24q3j',
    name: 'AstroPug Token',
    display: 'pug',
    symbol: 'PUG',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/pug.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1hnezwjqlhzawcrfysczcxs6xqxu2jawn729kkf',
      exponent: 0
    }, {
      denom: 'orne',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1hnezwjqlhzawcrfysczcxs6xqxu2jawn729kkf',
    base: 'cw20:terra1hnezwjqlhzawcrfysczcxs6xqxu2jawn729kkf',
    name: 'Orne Token',
    display: 'orne',
    symbol: 'ORNE',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/orne.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra14vz4v8adanzph278xyeggll4tfww7teh0xtw2y',
      exponent: 0
    }, {
      denom: 'tns',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra14vz4v8adanzph278xyeggll4tfww7teh0xtw2y',
    base: 'cw20:terra14vz4v8adanzph278xyeggll4tfww7teh0xtw2y',
    name: 'Terra Name Service',
    display: 'tns',
    symbol: 'TNS',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/tns.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1td743l5k5cmfy7tqq202g7vkmdvq35q48u2jfm',
      exponent: 0
    }, {
      denom: 'xrune',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1td743l5k5cmfy7tqq202g7vkmdvq35q48u2jfm',
    base: 'cw20:terra1td743l5k5cmfy7tqq202g7vkmdvq35q48u2jfm',
    name: 'Thorstarter',
    display: 'xrune',
    symbol: 'XRUNE',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/xrune.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1366wmr8t8rrkh6mag8fagqxntmf2qe4kyte784',
      exponent: 0
    }, {
      denom: 'alot',
      exponent: 0
    }],
    type_asset: 'cw20',
    address: 'terra1366wmr8t8rrkh6mag8fagqxntmf2qe4kyte784',
    base: 'cw20:terra1366wmr8t8rrkh6mag8fagqxntmf2qe4kyte784',
    name: 'Alpha Pack Token',
    display: 'alot',
    symbol: 'aLOT',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/alot.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1z09gnzufuflz6ckd9k0u456l9dnpgsynu0yyhe',
      exponent: 0
    }, {
      denom: 'sity',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1z09gnzufuflz6ckd9k0u456l9dnpgsynu0yyhe',
    base: 'cw20:terra1z09gnzufuflz6ckd9k0u456l9dnpgsynu0yyhe',
    name: 'CurioSITY play to earn token',
    display: 'sity',
    symbol: 'SITY',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/sity.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra13zx49nk8wjavedjzu8xkk95r3t0ta43c9ptul7',
      exponent: 0
    }, {
      denom: 'glow',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra13zx49nk8wjavedjzu8xkk95r3t0ta43c9ptul7',
    base: 'cw20:terra13zx49nk8wjavedjzu8xkk95r3t0ta43c9ptul7',
    name: 'Glow Token',
    display: 'glow',
    symbol: 'GLOW',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/glow.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra100yeqvww74h4yaejj6h733thgcafdaukjtw397',
      exponent: 0
    }, {
      denom: 'apollo',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra100yeqvww74h4yaejj6h733thgcafdaukjtw397',
    base: 'cw20:terra100yeqvww74h4yaejj6h733thgcafdaukjtw397',
    name: 'Apollo DAO Token',
    display: 'apollo',
    symbol: 'APOLLO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/apollo.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1a7ye2splpfzyenu0yrdu8t83uzgusx2malkc7u',
      exponent: 0
    }, {
      denom: 'abr',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1a7ye2splpfzyenu0yrdu8t83uzgusx2malkc7u',
    base: 'cw20:terra1a7ye2splpfzyenu0yrdu8t83uzgusx2malkc7u',
    name: 'Allbridge',
    display: 'abr',
    symbol: 'ABR',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/abr.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1y3d5qexmyac0fg53pfglh2pjk0664ymfvcq9mc',
      exponent: 0
    }, {
      denom: 'whgtps',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1y3d5qexmyac0fg53pfglh2pjk0664ymfvcq9mc',
    base: 'cw20:terra1y3d5qexmyac0fg53pfglh2pjk0664ymfvcq9mc',
    name: 'Global Transaction Payment Solu',
    display: 'whgtps',
    symbol: 'whGTPS'
  }, {
    denom_units: [{
      denom: 'cw20:terra1dh9478k2qvqhqeajhn75a2a7dsnf74y5ukregw',
      exponent: 0
    }, {
      denom: 'prism',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1dh9478k2qvqhqeajhn75a2a7dsnf74y5ukregw',
    base: 'cw20:terra1dh9478k2qvqhqeajhn75a2a7dsnf74y5ukregw',
    name: 'Prism Protocol Token',
    display: 'prism',
    symbol: 'PRISM',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/prism.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1l0y8yg0s86x299nqw0p6fhh7ngex3r4phtjeuq',
      exponent: 0
    }, {
      denom: 'sdollar',
      exponent: 2
    }],
    type_asset: 'cw20',
    address: 'terra1l0y8yg0s86x299nqw0p6fhh7ngex3r4phtjeuq',
    base: 'cw20:terra1l0y8yg0s86x299nqw0p6fhh7ngex3r4phtjeuq',
    name: 'Space Dollar',
    display: 'sdollar',
    symbol: 'SDOLLAR'
  }, {
    denom_units: [{
      denom: 'cw20:terra1ku5e0dhutxhuxudsmsn5647wwcz6ndr3rsh90k',
      exponent: 0
    }, {
      denom: 'whsail',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1ku5e0dhutxhuxudsmsn5647wwcz6ndr3rsh90k',
    base: 'cw20:terra1ku5e0dhutxhuxudsmsn5647wwcz6ndr3rsh90k',
    name: 'SAIL',
    display: 'whsail',
    symbol: 'whSAIL',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/whsail.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1rl0cpwgtwl4utnaynugevdje37fnmsea7rv4uu',
      exponent: 0
    }, {
      denom: 'whgsail',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1rl0cpwgtwl4utnaynugevdje37fnmsea7rv4uu',
    base: 'cw20:terra1rl0cpwgtwl4utnaynugevdje37fnmsea7rv4uu',
    name: 'SolanaSail Governance Token V2',
    display: 'whgsail',
    symbol: 'whgSAIL',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/whgsail.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1042wzrwg2uk6jqxjm34ysqquyr9esdgm5qyswz',
      exponent: 0
    }, {
      denom: 'xprism',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1042wzrwg2uk6jqxjm34ysqquyr9esdgm5qyswz',
    base: 'cw20:terra1042wzrwg2uk6jqxjm34ysqquyr9esdgm5qyswz',
    name: 'Prism Governance Token',
    display: 'xprism',
    symbol: 'xPRISM',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/xprism.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra13fs83g5atgjwuh7c5ydzh6n7gecel6xyhhy2t5',
      exponent: 0
    }, {
      denom: 'cde',
      exponent: 9
    }],
    type_asset: 'cw20',
    address: 'terra13fs83g5atgjwuh7c5ydzh6n7gecel6xyhhy2t5',
    base: 'cw20:terra13fs83g5atgjwuh7c5ydzh6n7gecel6xyhhy2t5',
    name: 'CAPITRADE TOKEN',
    display: 'cde',
    symbol: 'CDE'
  }, {
    denom_units: [{
      denom: 'cw20:terra1rl20t79ffsrqfa29rke48tj05gj9jxumm92vg8',
      exponent: 0
    }, {
      denom: 'ctx',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1rl20t79ffsrqfa29rke48tj05gj9jxumm92vg8',
    base: 'cw20:terra1rl20t79ffsrqfa29rke48tj05gj9jxumm92vg8',
    name: 'C2X Token',
    display: 'ctx',
    symbol: 'CTX',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/ctx.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra13zaagrrrxj47qjwczsczujlvnnntde7fdt0mau',
      exponent: 0
    }, {
      denom: 'cluna',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra13zaagrrrxj47qjwczsczujlvnnntde7fdt0mau',
    base: 'cw20:terra13zaagrrrxj47qjwczsczujlvnnntde7fdt0mau',
    name: 'Prism cLuna Token',
    display: 'cluna',
    symbol: 'cLuna',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/cluna.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1tlgelulz9pdkhls6uglfn5lmxarx7f2gxtdzh2',
      exponent: 0
    }, {
      denom: 'pluna',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1tlgelulz9pdkhls6uglfn5lmxarx7f2gxtdzh2',
    base: 'cw20:terra1tlgelulz9pdkhls6uglfn5lmxarx7f2gxtdzh2',
    name: 'Prism pLuna Token',
    display: 'pluna',
    symbol: 'pLuna',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/pluna.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra17wkadg0tah554r35x6wvff0y5s7ve8npcjfuhz',
      exponent: 0
    }, {
      denom: 'yluna',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra17wkadg0tah554r35x6wvff0y5s7ve8npcjfuhz',
    base: 'cw20:terra17wkadg0tah554r35x6wvff0y5s7ve8npcjfuhz',
    name: 'Prism yLuna Token',
    display: 'yluna',
    symbol: 'yLuna',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/yluna.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1cl7whtrqmz5ldr553q69qahck8xvk80fm33qjx',
      exponent: 0
    }, {
      denom: 'atlo',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1cl7whtrqmz5ldr553q69qahck8xvk80fm33qjx',
    base: 'cw20:terra1cl7whtrqmz5ldr553q69qahck8xvk80fm33qjx',
    name: 'Atlo Token',
    display: 'atlo',
    symbol: 'ATLO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/atlo.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1vchw83qt25j89zqwdpmdzj722sqxthnckqzxxp',
      exponent: 0
    }, {
      denom: 'local',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1vchw83qt25j89zqwdpmdzj722sqxthnckqzxxp',
    base: 'cw20:terra1vchw83qt25j89zqwdpmdzj722sqxthnckqzxxp',
    name: 'LOCAL Token',
    display: 'local',
    symbol: 'LOCAL',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/local.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra15k5r9r8dl8r7xlr29pry8a9w7sghehcnv5mgp6',
      exponent: 0
    }, {
      denom: 'luv',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra15k5r9r8dl8r7xlr29pry8a9w7sghehcnv5mgp6',
    base: 'cw20:terra15k5r9r8dl8r7xlr29pry8a9w7sghehcnv5mgp6',
    name: 'Lunaverse',
    display: 'luv',
    symbol: 'LUV',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/luv.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1f62tqesptvmhtzr8sudru00gsdtdz24srgm7wp',
      exponent: 0
    }, {
      denom: 'robo',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1f62tqesptvmhtzr8sudru00gsdtdz24srgm7wp',
    base: 'cw20:terra1f62tqesptvmhtzr8sudru00gsdtdz24srgm7wp',
    name: 'RoboHero',
    display: 'robo',
    symbol: 'ROBO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/robo.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1vwz7t30q76s7xx6qgtxdqnu6vpr3ak3vw62ygk',
      exponent: 0
    }, {
      denom: 'luart',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1vwz7t30q76s7xx6qgtxdqnu6vpr3ak3vw62ygk',
    base: 'cw20:terra1vwz7t30q76s7xx6qgtxdqnu6vpr3ak3vw62ygk',
    name: 'Luart Token',
    display: 'luart',
    symbol: 'LUART',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/luart.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra12hgwnpupflfpuual532wgrxu2gjp0tcagzgx4n',
      exponent: 0
    }, {
      denom: 'mars',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra12hgwnpupflfpuual532wgrxu2gjp0tcagzgx4n',
    base: 'cw20:terra12hgwnpupflfpuual532wgrxu2gjp0tcagzgx4n',
    name: 'Mars Token',
    display: 'mars',
    symbol: 'MARS',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mars.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1a04v570f9cxp49mk06vjsm8axsswndpwwt67k4',
      exponent: 0
    }, {
      denom: 'xmars',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1a04v570f9cxp49mk06vjsm8axsswndpwwt67k4',
    base: 'cw20:terra1a04v570f9cxp49mk06vjsm8axsswndpwwt67k4',
    name: 'xMars Token',
    display: 'xmars',
    symbol: 'XMARS',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/xmars.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1vpws4hmpmpsqwnz3gljn8zj42rv7rkpc5atgt4',
      exponent: 0
    }, {
      denom: 'dfiat',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1vpws4hmpmpsqwnz3gljn8zj42rv7rkpc5atgt4',
    base: 'cw20:terra1vpws4hmpmpsqwnz3gljn8zj42rv7rkpc5atgt4',
    name: 'DeFiato',
    display: 'dfiat',
    symbol: 'DFIAT'
  }, {
    denom_units: [{
      denom: 'cw20:terra1hppnw4jppmrzzga4yvd8s87y3dwkhe27xwwl5d',
      exponent: 0
    }, {
      denom: 'ceres',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1hppnw4jppmrzzga4yvd8s87y3dwkhe27xwwl5d',
    base: 'cw20:terra1hppnw4jppmrzzga4yvd8s87y3dwkhe27xwwl5d',
    name: 'Ceres Governance Token',
    display: 'ceres',
    symbol: 'CERES',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/ceres.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1z3e2e4jpk4n0xzzwlkgcfvc95pc5ldq0xcny58',
      exponent: 0
    }, {
      denom: 'wasavax',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1z3e2e4jpk4n0xzzwlkgcfvc95pc5ldq0xcny58',
    base: 'cw20:terra1z3e2e4jpk4n0xzzwlkgcfvc95pc5ldq0xcny58',
    name: 'BENQI Staked AVAX (Portal)',
    display: 'wasavax',
    symbol: 'wasAVAX',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/wasavax.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1zd6let0zg0xjn2sestagxv4ax24a4ml6j40qdr',
      exponent: 0
    }, {
      denom: 'mint',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1zd6let0zg0xjn2sestagxv4ax24a4ml6j40qdr',
    base: 'cw20:terra1zd6let0zg0xjn2sestagxv4ax24a4ml6j40qdr',
    name: 'MintDAO',
    display: 'mint',
    symbol: 'MINT',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mint.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1ustvnmngueq0p4jd7gfnutgvdc6ujpsjhsjd02',
      exponent: 0
    }, {
      denom: 'sd',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1ustvnmngueq0p4jd7gfnutgvdc6ujpsjhsjd02',
    base: 'cw20:terra1ustvnmngueq0p4jd7gfnutgvdc6ujpsjhsjd02',
    name: 'Stader SD (Portal)',
    display: 'sd',
    symbol: 'SD',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/sd.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1ln2z938phz0nc2wepxpzfkwp6ezn9yrz9zv9ep',
      exponent: 0
    }, {
      denom: 'xsd',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1ln2z938phz0nc2wepxpzfkwp6ezn9yrz9zv9ep',
    base: 'cw20:terra1ln2z938phz0nc2wepxpzfkwp6ezn9yrz9zv9ep',
    name: 'Stader xSD',
    display: 'xsd',
    symbol: 'xSD',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/xsd.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1uux6gwd6pzr0gfzrru5kne55cxex9d0700c72r',
      exponent: 0
    }, {
      denom: 'paxg',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1uux6gwd6pzr0gfzrru5kne55cxex9d0700c72r',
    base: 'cw20:terra1uux6gwd6pzr0gfzrru5kne55cxex9d0700c72r',
    name: 'Paxos Gold (Portal)',
    display: 'paxg',
    symbol: 'PAXG',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/paxg.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1efjugpjc50d8sha7lr8s48cr7wmsthz94eevcl',
      exponent: 0
    }, {
      denom: 'whdao',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1efjugpjc50d8sha7lr8s48cr7wmsthz94eevcl',
    base: 'cw20:terra1efjugpjc50d8sha7lr8s48cr7wmsthz94eevcl',
    name: 'DAO Maker',
    display: 'whdao',
    symbol: 'whDAO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/whdao.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1su6g4t4vwx7y0uh3ksancyaurj4l6w9pfs40qt',
      exponent: 0
    }, {
      denom: 'link',
      exponent: 18
    }],
    type_asset: 'cw20',
    address: 'terra1su6g4t4vwx7y0uh3ksancyaurj4l6w9pfs40qt',
    base: 'cw20:terra1su6g4t4vwx7y0uh3ksancyaurj4l6w9pfs40qt',
    name: 'ChainLink Token',
    display: 'link',
    symbol: 'LINK',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/link.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra14v9wrjs55qsn9lkvylsqela3w2ytwxzkycqzcr',
      exponent: 0
    }, {
      denom: 'sayve',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra14v9wrjs55qsn9lkvylsqela3w2ytwxzkycqzcr',
    base: 'cw20:terra14v9wrjs55qsn9lkvylsqela3w2ytwxzkycqzcr',
    name: 'Sayve Token',
    display: 'sayve',
    symbol: 'SAYVE',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/sayve.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1z55rhw0ut70jxdmpvge98mvj0rkwcz74q77z0u',
      exponent: 0
    }, {
      denom: 'guides',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1z55rhw0ut70jxdmpvge98mvj0rkwcz74q77z0u',
    base: 'cw20:terra1z55rhw0ut70jxdmpvge98mvj0rkwcz74q77z0u',
    name: 'Guides Token',
    display: 'guides',
    symbol: 'GUIDES'
  }, {
    denom_units: [{
      denom: 'cw20:terra1mt2ytlrxhvd5c4d4fshxxs3zcus3fkdmuv4mk2',
      exponent: 0
    }, {
      denom: 'bro',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1mt2ytlrxhvd5c4d4fshxxs3zcus3fkdmuv4mk2',
    base: 'cw20:terra1mt2ytlrxhvd5c4d4fshxxs3zcus3fkdmuv4mk2',
    name: 'BRO token',
    display: 'bro',
    symbol: 'BRO',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/bro.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1qryq5wreecx2wd3cdtzz94syr4z0a92l60asds',
      exponent: 0
    }, {
      denom: 'bbro',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1qryq5wreecx2wd3cdtzz94syr4z0a92l60asds',
    base: 'cw20:terra1qryq5wreecx2wd3cdtzz94syr4z0a92l60asds',
    name: 'bBRO token',
    display: 'bbro',
    symbol: 'bBRO',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/bbro.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra15zvyhmv6gwddht7kt4q6w5nasn4tcpgzcdfmgr',
      exponent: 0
    }, {
      denom: 'gtps',
      exponent: 18
    }],
    type_asset: 'cw20',
    address: 'terra15zvyhmv6gwddht7kt4q6w5nasn4tcpgzcdfmgr',
    base: 'cw20:terra15zvyhmv6gwddht7kt4q6w5nasn4tcpgzcdfmgr',
    name: 'Global Transaction Payment Solut',
    display: 'gtps',
    symbol: 'GTPS'
  }, {
    denom_units: [{
      denom: 'cw20:terra15pkdjxv2ewjzn9x665y26pfz2h6ymak4d4e8se',
      exponent: 0
    }, {
      denom: 'gfi',
      exponent: 18
    }],
    type_asset: 'cw20',
    address: 'terra15pkdjxv2ewjzn9x665y26pfz2h6ymak4d4e8se',
    base: 'cw20:terra15pkdjxv2ewjzn9x665y26pfz2h6ymak4d4e8se',
    name: 'Gtps.Finance',
    display: 'gfi',
    symbol: 'GFI'
  }, {
    denom_units: [{
      denom: 'cw20:terra1fyjsxx73jrufw8ufgtuswa773dvdkny92k70wa',
      exponent: 0
    }, {
      denom: 'ulc',
      exponent: 18
    }],
    type_asset: 'cw20',
    address: 'terra1fyjsxx73jrufw8ufgtuswa773dvdkny92k70wa',
    base: 'cw20:terra1fyjsxx73jrufw8ufgtuswa773dvdkny92k70wa',
    name: 'Ultimatalioniscoin',
    display: 'ulc',
    symbol: 'ULC'
  }, {
    denom_units: [{
      denom: 'cw20:terra1689ys6p6gfu0q6xrjqkzfn80sdyhurjqn0jfdl',
      exponent: 0
    }, {
      denom: 'sst',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1689ys6p6gfu0q6xrjqkzfn80sdyhurjqn0jfdl',
    base: 'cw20:terra1689ys6p6gfu0q6xrjqkzfn80sdyhurjqn0jfdl',
    name: 'Sooah Studio Token',
    display: 'sst',
    symbol: 'SST',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/sst.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1rg8f993m9834afwazersesgx7jjxv4p87q9wvc',
      exponent: 0
    }, {
      denom: 'atlas',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1rg8f993m9834afwazersesgx7jjxv4p87q9wvc',
    base: 'cw20:terra1rg8f993m9834afwazersesgx7jjxv4p87q9wvc',
    name: 'Star Atlas (Portal)',
    display: 'atlas',
    symbol: 'ATLAS',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/atlas.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1nc6flp57m5hsr6y5y8aexzszy43ksr0drdr8rp',
      exponent: 0
    }, {
      denom: 'audio',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1nc6flp57m5hsr6y5y8aexzszy43ksr0drdr8rp',
    base: 'cw20:terra1nc6flp57m5hsr6y5y8aexzszy43ksr0drdr8rp',
    name: 'Audius (Portal)',
    display: 'audio',
    symbol: 'AUDIO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/audio.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1hj8de24c3yqvcsv9r8chr03fzwsak3hgd8gv3m',
      exponent: 0
    }, {
      denom: 'avax',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1hj8de24c3yqvcsv9r8chr03fzwsak3hgd8gv3m',
    base: 'cw20:terra1hj8de24c3yqvcsv9r8chr03fzwsak3hgd8gv3m',
    name: 'AVAX (Portal)',
    display: 'avax',
    symbol: 'AVAX',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/avax.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1apxgj5agkkfdm2tprwvykug0qtahxvfmugnhx2',
      exponent: 0
    }, {
      denom: 'bat',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1apxgj5agkkfdm2tprwvykug0qtahxvfmugnhx2',
    base: 'cw20:terra1apxgj5agkkfdm2tprwvykug0qtahxvfmugnhx2',
    name: 'Basic Attention Token (Portal)',
    display: 'bat',
    symbol: 'BAT',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/bat.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1skjr69exm6v8zellgjpaa2emhwutrk5a6dz7dd',
      exponent: 0
    }, {
      denom: 'busdbs',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1skjr69exm6v8zellgjpaa2emhwutrk5a6dz7dd',
    base: 'cw20:terra1skjr69exm6v8zellgjpaa2emhwutrk5a6dz7dd',
    name: 'Binance USD (Portal from BSC)',
    display: 'busdbs',
    symbol: 'BUSDbs',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/busdbs.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1zmclyfepfmqvfqflu8r3lv6f75trmg05z7xq95',
      exponent: 0
    }, {
      denom: 'dai',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1zmclyfepfmqvfqflu8r3lv6f75trmg05z7xq95',
    base: 'cw20:terra1zmclyfepfmqvfqflu8r3lv6f75trmg05z7xq95',
    name: 'DAI (Portal)',
    display: 'dai',
    symbol: 'DAI',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/dai.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1dtqlfecglk47yplfrtwjzyagkgcqqngd5lgjp8',
      exponent: 0
    }, {
      denom: 'maticpo',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1dtqlfecglk47yplfrtwjzyagkgcqqngd5lgjp8',
    base: 'cw20:terra1dtqlfecglk47yplfrtwjzyagkgcqqngd5lgjp8',
    name: 'MATIC (Portal from Polygon)',
    display: 'maticpo',
    symbol: 'MATICpo',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/maticpo.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra15a9dr3a2a2lj5fclrw35xxg9yuxg0d908wpf2y',
      exponent: 0
    }, {
      denom: 'mimet',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra15a9dr3a2a2lj5fclrw35xxg9yuxg0d908wpf2y',
    base: 'cw20:terra15a9dr3a2a2lj5fclrw35xxg9yuxg0d908wpf2y',
    name: 'Magic Internet Money (Portal from Ethereum)',
    display: 'mimet',
    symbol: 'MIMet',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mimet.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1ht5sepn28z999jx33sdduuxm9acthad507jg9q',
      exponent: 0
    }, {
      denom: 'ray',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1ht5sepn28z999jx33sdduuxm9acthad507jg9q',
    base: 'cw20:terra1ht5sepn28z999jx33sdduuxm9acthad507jg9q',
    name: 'Raydium (Portal)',
    display: 'ray',
    symbol: 'RAY',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/ray.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra17h82zsq6q8x5tsgm5ugcx4gytw3axguvzt4pkc',
      exponent: 0
    }, {
      denom: 'sbr',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra17h82zsq6q8x5tsgm5ugcx4gytw3axguvzt4pkc',
    base: 'cw20:terra17h82zsq6q8x5tsgm5ugcx4gytw3axguvzt4pkc',
    name: 'Saber (Portal)',
    display: 'sbr',
    symbol: 'SBR',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/sbr.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1huku2lecfjhq9d00k5a8dh73gw7dwe6vvuf2dd',
      exponent: 0
    }, {
      denom: 'shib',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1huku2lecfjhq9d00k5a8dh73gw7dwe6vvuf2dd',
    base: 'cw20:terra1huku2lecfjhq9d00k5a8dh73gw7dwe6vvuf2dd',
    name: 'Shiba Inu (Portal)',
    display: 'shib',
    symbol: 'SHIB',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/shib.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1dkam9wd5yvaswv4yq3n2aqd4wm5j8n82qc0c7c',
      exponent: 0
    }, {
      denom: 'srmso',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1dkam9wd5yvaswv4yq3n2aqd4wm5j8n82qc0c7c',
    base: 'cw20:terra1dkam9wd5yvaswv4yq3n2aqd4wm5j8n82qc0c7c',
    name: 'Serum (Portal from Solana)',
    display: 'srmso',
    symbol: 'SRMso',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/srmso.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1pvel56a2hs93yd429pzv9zp5aptcjg5ulhkz7w',
      exponent: 0
    }, {
      denom: 'usdcav',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1pvel56a2hs93yd429pzv9zp5aptcjg5ulhkz7w',
    base: 'cw20:terra1pvel56a2hs93yd429pzv9zp5aptcjg5ulhkz7w',
    name: 'USD Coin (Portal from Avalanche)',
    display: 'usdcav',
    symbol: 'USDCav',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/usdcav.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1yljlrxvkar0c6ujpvf8g57m5rpcwl7r032zyvu',
      exponent: 0
    }, {
      denom: 'usdcbs',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1yljlrxvkar0c6ujpvf8g57m5rpcwl7r032zyvu',
    base: 'cw20:terra1yljlrxvkar0c6ujpvf8g57m5rpcwl7r032zyvu',
    name: 'USD Coin (Portal from BSC)',
    display: 'usdcbs',
    symbol: 'USDCbs',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/usdcbs.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1kkyyh7vganlpkj0gkc2rfmhy858ma4rtwywe3x',
      exponent: 0
    }, {
      denom: 'usdcpo',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1kkyyh7vganlpkj0gkc2rfmhy858ma4rtwywe3x',
    base: 'cw20:terra1kkyyh7vganlpkj0gkc2rfmhy858ma4rtwywe3x',
    name: 'USD Coin (Portal from Polygon)',
    display: 'usdcpo',
    symbol: 'USDCpo',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/usdcpo.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1e6mq63y64zcxz8xyu5van4tgkhemj3r86yvgu4',
      exponent: 0
    }, {
      denom: 'usdcso',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1e6mq63y64zcxz8xyu5van4tgkhemj3r86yvgu4',
    base: 'cw20:terra1e6mq63y64zcxz8xyu5van4tgkhemj3r86yvgu4',
    name: 'USD Coin (Portal from Solana)',
    display: 'usdcso',
    symbol: 'USDCso',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/usdcso.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1eqvq3thjhye7anv6f6mhxpjhyvww8zjvqcdgjx',
      exponent: 0
    }, {
      denom: 'usdtav',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1eqvq3thjhye7anv6f6mhxpjhyvww8zjvqcdgjx',
    base: 'cw20:terra1eqvq3thjhye7anv6f6mhxpjhyvww8zjvqcdgjx',
    name: 'Tether USD (Portal from Avalanche)',
    display: 'usdtav',
    symbol: 'USDTav',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/usdtav.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1vlqeghv5mt5udh96kt5zxlh2wkh8q4kewkr0dd',
      exponent: 0
    }, {
      denom: 'usdtbs',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1vlqeghv5mt5udh96kt5zxlh2wkh8q4kewkr0dd',
    base: 'cw20:terra1vlqeghv5mt5udh96kt5zxlh2wkh8q4kewkr0dd',
    name: 'Tether USD (Portal from BSC)',
    display: 'usdtbs',
    symbol: 'USDTbs',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/usdtbs.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1hd9n65snaluvf7en0p4hqzse9eqecejz2k8rl5',
      exponent: 0
    }, {
      denom: 'usdtso',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1hd9n65snaluvf7en0p4hqzse9eqecejz2k8rl5',
    base: 'cw20:terra1hd9n65snaluvf7en0p4hqzse9eqecejz2k8rl5',
    name: 'Tether USD (Portal from Solana)',
    display: 'usdtso',
    symbol: 'USDTso',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/usdtso.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1fpfn2kkr8mv390wx4dtpfk3vkjx9ch3thvykl3',
      exponent: 0
    }, {
      denom: 'gohm',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1fpfn2kkr8mv390wx4dtpfk3vkjx9ch3thvykl3',
    base: 'cw20:terra1fpfn2kkr8mv390wx4dtpfk3vkjx9ch3thvykl3',
    name: 'Governance OHM (Portal)',
    display: 'gohm',
    symbol: 'gOHM',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/gohm.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1qvlpf2v0zmru3gtex40sqq02wxp39x3cjh359y',
      exponent: 0
    }, {
      denom: 'msol',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1qvlpf2v0zmru3gtex40sqq02wxp39x3cjh359y',
    base: 'cw20:terra1qvlpf2v0zmru3gtex40sqq02wxp39x3cjh359y',
    name: 'Marinade staked SOL (Portal)',
    display: 'msol',
    symbol: 'mSOL',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/msol.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1w7ywr6waxtjuvn5svk5wqydqpjj0q9ps7qct4d',
      exponent: 0
    }, {
      denom: 'steth',
      exponent: 8
    }],
    type_asset: 'cw20',
    address: 'terra1w7ywr6waxtjuvn5svk5wqydqpjj0q9ps7qct4d',
    base: 'cw20:terra1w7ywr6waxtjuvn5svk5wqydqpjj0q9ps7qct4d',
    name: 'Lido Staked Ether (Portal)',
    display: 'steth',
    symbol: 'stETH',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/steth.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1srp2u95kxps35nvan88gn96nfqhukqya2d0ffc',
      exponent: 0
    }, {
      denom: 'lct',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1srp2u95kxps35nvan88gn96nfqhukqya2d0ffc',
    base: 'cw20:terra1srp2u95kxps35nvan88gn96nfqhukqya2d0ffc',
    name: 'LCT Token',
    display: 'lct',
    symbol: 'LCT',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/lct.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra18zqcnl83z98tf6lly37gghm7238k7lh79u4z9a',
      exponent: 0
    }, {
      denom: 'batom',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra18zqcnl83z98tf6lly37gghm7238k7lh79u4z9a',
    base: 'cw20:terra18zqcnl83z98tf6lly37gghm7238k7lh79u4z9a',
    name: 'Bonded ATOM',
    display: 'batom',
    symbol: 'bATOM',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/batom.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra128pe5jpempxu0nws5lw28se9zknhsr78626cpn',
      exponent: 0
    }, {
      denom: 'webatom',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra128pe5jpempxu0nws5lw28se9zknhsr78626cpn',
    base: 'cw20:terra128pe5jpempxu0nws5lw28se9zknhsr78626cpn',
    name: 'pStake Bonded ATOM (Wormhole)',
    display: 'webatom',
    symbol: 'webATOM',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/webatom.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1laczhlpxlgmrwr9un9ds74qxd2fj4754nf82dn',
      exponent: 0
    }, {
      denom: 'wcoin',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1laczhlpxlgmrwr9un9ds74qxd2fj4754nf82dn',
    base: 'cw20:terra1laczhlpxlgmrwr9un9ds74qxd2fj4754nf82dn',
    name: 'Willisch Coin',
    display: 'wcoin',
    symbol: 'WCOIN',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/wcoin.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1thhm2u93m2stytzynhsxh5h3jrtg540x4punqy',
      exponent: 0
    }, {
      denom: 'lctfancard',
      exponent: 0
    }],
    type_asset: 'cw20',
    address: 'terra1thhm2u93m2stytzynhsxh5h3jrtg540x4punqy',
    base: 'cw20:terra1thhm2u93m2stytzynhsxh5h3jrtg540x4punqy',
    name: 'LCT Fancard Token',
    display: 'lctfancard',
    symbol: 'LCTfancard',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/lctfancard.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1yeyr6taynkwdl85ppaggr3zr8txhf66cny2ang',
      exponent: 0
    }, {
      denom: 'kntc',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1yeyr6taynkwdl85ppaggr3zr8txhf66cny2ang',
    base: 'cw20:terra1yeyr6taynkwdl85ppaggr3zr8txhf66cny2ang',
    name: 'Kinetic Token',
    display: 'kntc',
    symbol: 'KNTC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/kntc.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1g53pyke8jtmt4lwvk4yl0xaqc4u0qlsl8dz3ex',
      exponent: 0
    }, {
      denom: 'kust',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1g53pyke8jtmt4lwvk4yl0xaqc4u0qlsl8dz3ex',
    base: 'cw20:terra1g53pyke8jtmt4lwvk4yl0xaqc4u0qlsl8dz3ex',
    name: 'Kinetic kUST Token',
    display: 'kust',
    symbol: 'kUST',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/kust.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1rl4zyexjphwgx6v3ytyljkkc4mrje2pyznaclv',
      exponent: 0
    }, {
      denom: 'steak',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1rl4zyexjphwgx6v3ytyljkkc4mrje2pyznaclv',
    base: 'cw20:terra1rl4zyexjphwgx6v3ytyljkkc4mrje2pyznaclv',
    name: 'Steak Token',
    display: 'steak',
    symbol: 'STEAK',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/steak.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1jkkt5638cd5pur0u5jnr2juw0v6hz5d6z8xu8m',
      exponent: 0
    }, {
      denom: 'cst',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1jkkt5638cd5pur0u5jnr2juw0v6hz5d6z8xu8m',
    base: 'cw20:terra1jkkt5638cd5pur0u5jnr2juw0v6hz5d6z8xu8m',
    name: 'CST Token',
    display: 'cst',
    symbol: 'CST',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/cst.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1kz7qszu7p4dg9lts7m9m7lpuarsnan47jh3fam',
      exponent: 0
    }, {
      denom: 'cstfancard',
      exponent: 0
    }],
    type_asset: 'cw20',
    address: 'terra1kz7qszu7p4dg9lts7m9m7lpuarsnan47jh3fam',
    base: 'cw20:terra1kz7qszu7p4dg9lts7m9m7lpuarsnan47jh3fam',
    name: 'CST Fancard Token',
    display: 'cstfancard',
    symbol: 'CSTfancard',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/cstfancard.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1amz5c45l34n7w8m5a3z7rd7u0k037x4nnsemwj',
      exponent: 0
    }, {
      denom: 'nwld',
      exponent: 9
    }],
    type_asset: 'cw20',
    address: 'terra1amz5c45l34n7w8m5a3z7rd7u0k037x4nnsemwj',
    base: 'cw20:terra1amz5c45l34n7w8m5a3z7rd7u0k037x4nnsemwj',
    name: 'Neworld Labs Develpper Token',
    display: 'nwld',
    symbol: 'NWLD',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/nwld.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1cdc6nlsx0l6jmt3nnx7gxjggf902wge3n2z76k',
      exponent: 0
    }, {
      denom: 'fury',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1cdc6nlsx0l6jmt3nnx7gxjggf902wge3n2z76k',
    base: 'cw20:terra1cdc6nlsx0l6jmt3nnx7gxjggf902wge3n2z76k',
    name: 'FURY',
    display: 'fury',
    symbol: 'FURY',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/fury.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra17n223dxpkypc5c48la7aqjvverczg82ga3cr93',
      exponent: 0
    }, {
      denom: 'rct',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra17n223dxpkypc5c48la7aqjvverczg82ga3cr93',
    base: 'cw20:terra17n223dxpkypc5c48la7aqjvverczg82ga3cr93',
    name: 'Reactor Token',
    display: 'rct',
    symbol: 'RCT',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/rct.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra14vw4sfqwe7jw8ppcc7u44vq7hy9qa2nlstnxmu',
      exponent: 0
    }, {
      denom: 'vitc',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra14vw4sfqwe7jw8ppcc7u44vq7hy9qa2nlstnxmu',
    base: 'cw20:terra14vw4sfqwe7jw8ppcc7u44vq7hy9qa2nlstnxmu',
    name: 'Vitamin Coin',
    display: 'vitc',
    symbol: 'VITC',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/vitc.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1948uvsah8aw40dhsa9mhl3htq8lraj0smlh77g',
      exponent: 0
    }, {
      denom: 'sb',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1948uvsah8aw40dhsa9mhl3htq8lraj0smlh77g',
    base: 'cw20:terra1948uvsah8aw40dhsa9mhl3htq8lraj0smlh77g',
    name: 'DragonSB',
    display: 'sb',
    symbol: 'SB',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/sb.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1rz964297kvt86rteajhtp4hsffhcum0ye8eljh',
      exponent: 0
    }, {
      denom: 'toad',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1rz964297kvt86rteajhtp4hsffhcum0ye8eljh',
    base: 'cw20:terra1rz964297kvt86rteajhtp4hsffhcum0ye8eljh',
    name: 'RESToad Token',
    display: 'toad',
    symbol: 'TOAD',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/toad.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1yhlhrea3rgyx2xdnsswsfakn28qa8z7yp5gmhd',
      exponent: 0
    }, {
      denom: 'orionastro',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1yhlhrea3rgyx2xdnsswsfakn28qa8z7yp5gmhd',
    base: 'cw20:terra1yhlhrea3rgyx2xdnsswsfakn28qa8z7yp5gmhd',
    name: 'Orion Money xASTRO Derivative Token',
    display: 'orionastro',
    symbol: 'orionASTRO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/orionastro.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1j4hwavavmtsafa6zr0npalfz3tk9gf3p4787mp',
      exponent: 0
    }, {
      denom: 'retro',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1j4hwavavmtsafa6zr0npalfz3tk9gf3p4787mp',
    base: 'cw20:terra1j4hwavavmtsafa6zr0npalfz3tk9gf3p4787mp',
    name: 'Retrograde',
    display: 'retro',
    symbol: 'RETRO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/retro.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra16wggm67a34msdxasg2vergm2pt289y7930wv7d',
      exponent: 0
    }, {
      denom: 'tnd',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra16wggm67a34msdxasg2vergm2pt289y7930wv7d',
    base: 'cw20:terra16wggm67a34msdxasg2vergm2pt289y7930wv7d',
    name: 'TerrnadoCash',
    display: 'tnd',
    symbol: 'TND',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/tnd.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1n9k2he20h5vpyn4mgv7pg4pzvw2n3wc4a86v3g',
      exponent: 0
    }, {
      denom: 'stnd',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1n9k2he20h5vpyn4mgv7pg4pzvw2n3wc4a86v3g',
    base: 'cw20:terra1n9k2he20h5vpyn4mgv7pg4pzvw2n3wc4a86v3g',
    name: 'TerrnadoCash',
    display: 'stnd',
    symbol: 'sTND',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/stnd.svg'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1ezz5xply2v3xdyv32gy5tcd7zq4k235q4xtzwe',
      exponent: 0
    }, {
      denom: 'nwt',
      exponent: 9
    }],
    type_asset: 'cw20',
    address: 'terra1ezz5xply2v3xdyv32gy5tcd7zq4k235q4xtzwe',
    base: 'cw20:terra1ezz5xply2v3xdyv32gy5tcd7zq4k235q4xtzwe',
    name: 'Neworld Token',
    display: 'nwt',
    symbol: 'NWT',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/nwt.png'
    }
  }, {
    description: 'The AUD stablecoin of Terra Classic.',
    denom_units: [{
      denom: 'uaud',
      exponent: 0,
      aliases: ['microaud']
    }, {
      denom: 'maud',
      exponent: 3,
      aliases: ['milliaud']
    }, {
      denom: 'aut',
      exponent: 6,
      aliases: ['autc']
    }],
    base: 'uaud',
    display: 'aut',
    name: 'TerraClassicAUD',
    symbol: 'AUTC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/aut.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/aut.png'
    }
  }, {
    description: 'The CAD stablecoin of Terra Classic.',
    denom_units: [{
      denom: 'ucad',
      exponent: 0,
      aliases: ['microcad']
    }, {
      denom: 'mcad',
      exponent: 3,
      aliases: ['millicad']
    }, {
      denom: 'cat',
      exponent: 6,
      aliases: ['catc']
    }],
    base: 'ucad',
    display: 'cat',
    name: 'TerraClassicCAD',
    symbol: 'CATC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/cat.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/cat.png'
    }
  }, {
    description: 'The CHF stablecoin of Terra Classic.',
    denom_units: [{
      denom: 'uchf',
      exponent: 0,
      aliases: ['microchf']
    }, {
      denom: 'mchf',
      exponent: 3,
      aliases: ['millichf']
    }, {
      denom: 'cht',
      exponent: 6,
      aliases: ['chtc']
    }],
    base: 'uchf',
    display: 'cht',
    name: 'TerraClassicCHF',
    symbol: 'CHTC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/cht.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/cht.png'
    }
  }, {
    description: 'The CNY stablecoin of Terra Classic.',
    denom_units: [{
      denom: 'ucny',
      exponent: 0,
      aliases: ['microcny']
    }, {
      denom: 'mcny',
      exponent: 3,
      aliases: ['millicny']
    }, {
      denom: 'cnt',
      exponent: 6,
      aliases: ['cntc']
    }],
    base: 'ucny',
    display: 'cnt',
    name: 'TerraClassicCNY',
    symbol: 'CNTC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/cnt.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/cnt.png'
    }
  }, {
    description: 'The DKK stablecoin of Terra Classic.',
    denom_units: [{
      denom: 'udkk',
      exponent: 0,
      aliases: ['microdkk']
    }, {
      denom: 'mdkk',
      exponent: 3,
      aliases: ['millidkk']
    }, {
      denom: 'dkt',
      exponent: 6,
      aliases: ['dktc']
    }],
    base: 'udkk',
    display: 'dkt',
    name: 'TerraClassicDKK',
    symbol: 'DKTC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/dkt.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/dkt.png'
    }
  }, {
    description: 'The EUR stablecoin of Terra Classic.',
    denom_units: [{
      denom: 'ueur',
      exponent: 0,
      aliases: ['microeur']
    }, {
      denom: 'meur',
      exponent: 3,
      aliases: ['millieur']
    }, {
      denom: 'eut',
      exponent: 6,
      aliases: ['eutc']
    }],
    base: 'ueur',
    display: 'eut',
    name: 'TerraClassicEUR',
    symbol: 'EUTC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/eut.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/eut.png'
    }
  }, {
    description: 'The GBP stablecoin of Terra Classic.',
    denom_units: [{
      denom: 'ugbp',
      exponent: 0,
      aliases: ['microgbp']
    }, {
      denom: 'mgbp',
      exponent: 3,
      aliases: ['milligbp']
    }, {
      denom: 'gbt',
      exponent: 6,
      aliases: ['gbtc']
    }],
    base: 'ugbp',
    display: 'gbt',
    name: 'TerraClassicGBP',
    symbol: 'GBTC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/gbt.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/gbt.png'
    }
  }, {
    description: 'The HKD stablecoin of Terra Classic.',
    denom_units: [{
      denom: 'uhkd',
      exponent: 0,
      aliases: ['microhkd']
    }, {
      denom: 'mhkd',
      exponent: 3,
      aliases: ['millihkd']
    }, {
      denom: 'hkt',
      exponent: 6,
      aliases: ['hktc']
    }],
    base: 'uhkd',
    display: 'hkt',
    name: 'TerraClassicHKD',
    symbol: 'HKTC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/hkt.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/hkt.png'
    }
  }, {
    description: 'The IDR stablecoin of Terra Classic.',
    denom_units: [{
      denom: 'uidr',
      exponent: 0,
      aliases: ['microidr']
    }, {
      denom: 'midr',
      exponent: 3,
      aliases: ['milliidr']
    }, {
      denom: 'idt',
      exponent: 6,
      aliases: ['idtc']
    }],
    base: 'uidr',
    display: 'idt',
    name: 'TerraClassicIDR',
    symbol: 'IDTC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/idt.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/idt.png'
    }
  }, {
    description: 'The INR stablecoin of Terra Classic.',
    denom_units: [{
      denom: 'uinr',
      exponent: 0,
      aliases: ['microinr']
    }, {
      denom: 'minr',
      exponent: 3,
      aliases: ['milliinr']
    }, {
      denom: 'int',
      exponent: 6,
      aliases: ['intc']
    }],
    base: 'uinr',
    display: 'int',
    name: 'TerraClassicINR',
    symbol: 'INTC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/int.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/int.png'
    }
  }, {
    description: 'The JPY stablecoin of Terra Classic.',
    denom_units: [{
      denom: 'ujpy',
      exponent: 0,
      aliases: ['microjpy']
    }, {
      denom: 'mjpy',
      exponent: 3,
      aliases: ['millijpy']
    }, {
      denom: 'jpt',
      exponent: 6,
      aliases: ['jptc']
    }],
    base: 'ujpy',
    display: 'jpt',
    name: 'TerraClassicJPY',
    symbol: 'JPTC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/jpt.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/jpt.png'
    }
  }, {
    description: 'The MNT stablecoin of Terra Classic.',
    denom_units: [{
      denom: 'umnt',
      exponent: 0,
      aliases: ['micromnt']
    }, {
      denom: 'mmnt',
      exponent: 3,
      aliases: ['millimnt']
    }, {
      denom: 'mnt',
      exponent: 6,
      aliases: ['mntc']
    }],
    base: 'umnt',
    display: 'mnt',
    name: 'TerraClassicMNT',
    symbol: 'MNTC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mnt.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/mnt.png'
    }
  }, {
    description: 'The MYR stablecoin of Terra Classic.',
    denom_units: [{
      denom: 'umyr',
      exponent: 0,
      aliases: ['micromyr']
    }, {
      denom: 'mmyr',
      exponent: 3,
      aliases: ['millimyr']
    }, {
      denom: 'myt',
      exponent: 6,
      aliases: ['mytc']
    }],
    base: 'umyr',
    display: 'myt',
    name: 'TerraClassicMYR',
    symbol: 'MYTC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/myt.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/myt.png'
    }
  }, {
    description: 'The NOK stablecoin of Terra Classic.',
    denom_units: [{
      denom: 'unok',
      exponent: 0,
      aliases: ['micronok']
    }, {
      denom: 'mnok',
      exponent: 3,
      aliases: ['millinok']
    }, {
      denom: 'not',
      exponent: 6,
      aliases: ['notc']
    }],
    base: 'unok',
    display: 'not',
    name: 'TerraClassicNOK',
    symbol: 'NOTC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/not.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/not.png'
    }
  }, {
    description: 'The PHP stablecoin of Terra Classic.',
    denom_units: [{
      denom: 'uphp',
      exponent: 0,
      aliases: ['microphp']
    }, {
      denom: 'mphp',
      exponent: 3,
      aliases: ['milliphp']
    }, {
      denom: 'pht',
      exponent: 6,
      aliases: ['phtc']
    }],
    base: 'uphp',
    display: 'pht',
    name: 'TerraClassicPHP',
    symbol: 'PHTC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/pht.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/pht.png'
    }
  }, {
    description: 'The SDR stablecoin of Terra Classic.',
    denom_units: [{
      denom: 'usdr',
      exponent: 0,
      aliases: ['microsdr']
    }, {
      denom: 'msdr',
      exponent: 3,
      aliases: ['millisdr']
    }, {
      denom: 'sdt',
      exponent: 6,
      aliases: ['sdtc']
    }],
    base: 'usdr',
    display: 'sdt',
    name: 'TerraClassicSDR',
    symbol: 'SDTC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/sdt.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/sdt.png'
    }
  }, {
    description: 'The SEK stablecoin of Terra Classic.',
    denom_units: [{
      denom: 'usek',
      exponent: 0,
      aliases: ['microsek']
    }, {
      denom: 'msek',
      exponent: 3,
      aliases: ['millisek']
    }, {
      denom: 'set',
      exponent: 6,
      aliases: ['setc']
    }],
    base: 'usek',
    display: 'set',
    name: 'TerraClassicSEK',
    symbol: 'SETC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/set.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/set.png'
    }
  }, {
    description: 'The SGD stablecoin of Terra Classic.',
    denom_units: [{
      denom: 'usgd',
      exponent: 0,
      aliases: ['microsgd']
    }, {
      denom: 'msgd',
      exponent: 3,
      aliases: ['millisgd']
    }, {
      denom: 'sgt',
      exponent: 6,
      aliases: ['sgtc']
    }],
    base: 'usgd',
    display: 'sgt',
    name: 'TerraClassicSGD',
    symbol: 'SGTC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/sgt.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/sgt.png'
    }
  }, {
    description: 'The THB stablecoin of Terra Classic.',
    denom_units: [{
      denom: 'uthb',
      exponent: 0,
      aliases: ['microthb']
    }, {
      denom: 'mthb',
      exponent: 3,
      aliases: ['millithb']
    }, {
      denom: 'tht',
      exponent: 6,
      aliases: ['thtc']
    }],
    base: 'uthb',
    display: 'tht',
    name: 'TerraClassicTHB',
    symbol: 'THTC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/tht.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/tht.png'
    }
  }, {
    description: 'The TWD stablecoin of Terra Classic.',
    denom_units: [{
      denom: 'utwd',
      exponent: 0,
      aliases: ['microtwd']
    }, {
      denom: 'mtwd',
      exponent: 3,
      aliases: ['millitwd']
    }, {
      denom: 'twt',
      exponent: 6,
      aliases: ['twtc']
    }],
    base: 'utwd',
    display: 'twt',
    name: 'TerraClassicTWD',
    symbol: 'TWTC',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/twt.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/twt.png'
    }
  }, {
    denom_units: [{
      denom: 'cw20:terra1mpq5zkkm39nmjrjg9raknpfrfmcfwv0nh0whvn',
      exponent: 0
    }, {
      denom: 'neb',
      exponent: 6
    }],
    type_asset: 'cw20',
    address: 'terra1mpq5zkkm39nmjrjg9raknpfrfmcfwv0nh0whvn',
    base: 'cw20:terra1mpq5zkkm39nmjrjg9raknpfrfmcfwv0nh0whvn',
    name: 'Nebula Token',
    display: 'neb',
    symbol: 'NEB',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra/images/neb.png'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'terra2',
  assets: [{
    description: 'The native staking token of Terra.',
    denom_units: [{
      denom: 'uluna',
      exponent: 0
    }, {
      denom: 'luna',
      exponent: 6
    }],
    base: 'uluna',
    name: 'Luna',
    display: 'luna',
    symbol: 'LUNA',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/terra2/images/luna.png'
    },
    coingecko_id: 'terra-luna-2'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'avalanchetestnet',
  assets: [{
    description: 'AVAX is the native token of Avalanche. It is a hard-capped, scarce asset that is used to pay for fees, secure the platform through staking, and provide a basic unit of account between the multiple subnets created on Avalanche.',
    denom_units: [{
      denom: 'wei',
      exponent: 0
    }, {
      denom: 'avax',
      exponent: 18
    }],
    base: 'wei',
    name: 'Avalanche',
    display: 'avax',
    symbol: 'AVAX',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/avalanche/images/avax.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/avalanche/images/avax.svg'
    },
    coingecko_id: 'avalanche-2'
  }, {
    description: 'The wrapped ERC-20 representation of AVAX, the native token of Avalanche.',
    type_asset: 'erc20',
    address: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',
    denom_units: [{
      denom: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',
      exponent: 0,
      aliases: ['wavax-wei']
    }, {
      denom: 'wavax',
      exponent: 18
    }],
    base: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',
    name: 'Wrapped AVAX',
    display: 'wavax',
    symbol: 'WAVAX',
    traces: [{
      type: 'wrapped',
      counterparty: {
        chain_name: 'avalanchetestnet',
        base_denom: 'wei'
      },
      provider: 'Avalanche'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/avalanche/images/wavax.svg'
    },
    coingecko_id: 'wrapped-avax'
  }, {
    description: 'USDC is a fully collateralized US Dollar stablecoin developed by CENTRE, the open source project with Circle being the first of several forthcoming issuers.',
    type_asset: 'erc20',
    address: '0x57F1c63497AEe0bE305B8852b354CEc793da43bB',
    denom_units: [{
      denom: '0x57F1c63497AEe0bE305B8852b354CEc793da43bB',
      exponent: 0,
      aliases: ['uusdc']
    }, {
      denom: 'axlusdc',
      exponent: 6
    }],
    base: '0x57F1c63497AEe0bE305B8852b354CEc793da43bB',
    name: 'Axelar Wrapped USDC',
    display: 'axlusdc',
    symbol: 'axlUSDC',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'axelartestnet',
        base_denom: 'uusdc'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/usdc.svg'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'binancesmartchaintestnet',
  assets: [{
    description: 'BNB powers the BNB Chain ecosystem and is the native coin of the BNB Beacon Chain and BNB Smart Chain.',
    denom_units: [{
      denom: 'wei',
      exponent: 0
    }, {
      denom: 'bnb',
      exponent: 18
    }],
    base: 'wei',
    name: 'Binance Coin',
    display: 'bnb',
    symbol: 'BNB',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/binancesmartchain/images/bnb.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/binancesmartchain/images/bnb.png'
    },
    coingecko_id: 'binancecoin'
  }, {
    description: 'Wrapped BNB. As the native coin of Binance Chain, BNB has multiple use cases: fueling transactions on the Chain, paying for transaction fees on Binance Exchange, making in-store payments, and many more.',
    denom_units: [{
      denom: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',
      exponent: 0
    }, {
      denom: 'wbnb',
      exponent: 18
    }],
    type_asset: 'erc20',
    address: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',
    base: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',
    name: 'Wrapped BNB',
    display: 'wbnb',
    symbol: 'WBNB',
    traces: [{
      type: 'wrapped',
      counterparty: {
        chain_name: 'binancesmartchaintestnet',
        base_denom: 'wei'
      },
      chain: {
        contract: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd'
      },
      provider: 'Binance'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/binancesmartchain/images/wbnb.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/binancesmartchain/images/wbnb.png'
    },
    coingecko_id: 'wbnb'
  }, {
    description: 'USDC is a fully collateralized US Dollar stablecoin developed by CENTRE, the open source project with Circle being the first of several forthcoming issuers.',
    type_asset: 'erc20',
    address: '0xc2fA98faB811B785b81c64Ac875b31CC9E40F9D2',
    denom_units: [{
      denom: '0xc2fA98faB811B785b81c64Ac875b31CC9E40F9D2',
      exponent: 0,
      aliases: ['uusdc']
    }, {
      denom: 'axlusdc',
      exponent: 6
    }],
    base: '0xc2fA98faB811B785b81c64Ac875b31CC9E40F9D2',
    name: 'Axelar Wrapped USDC',
    display: 'axlusdc',
    symbol: 'axlUSDC',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'axelartestnet',
        base_denom: 'uusdc'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/usdc.svg'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'ethereumtestnet',
  assets: [{
    description: 'Ether is the native fee token of the Ethereum network.',
    denom_units: [{
      denom: 'wei',
      exponent: 0
    }, {
      denom: 'gwei',
      exponent: 9
    }, {
      denom: 'eth',
      exponent: 18,
      aliases: ['ether']
    }],
    base: 'wei',
    name: 'Ether',
    display: 'eth',
    symbol: 'ETH',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/eth.svg'
    },
    coingecko_id: 'ethereum'
  }, {
    description: "wETH is 'wrapped ETH'",
    type_asset: 'erc20',
    address: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',
    denom_units: [{
      denom: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',
      exponent: 0,
      aliases: ['weth-wei']
    }, {
      denom: 'weth',
      exponent: 18
    }],
    base: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',
    name: 'Wrapped Ether',
    display: 'weth',
    symbol: 'WETH',
    traces: [{
      type: 'wrapped',
      counterparty: {
        chain_name: 'ethereumtestnet',
        base_denom: 'wei'
      },
      provider: 'Ethereum'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/weth.svg'
    },
    coingecko_id: 'weth'
  }, {
    description: 'USDC is a fully collateralized US Dollar stablecoin developed by CENTRE, the open source project with Circle being the first of several forthcoming issuers.',
    type_asset: 'erc20',
    address: '0x254d06f33bDc5b8ee05b2ea472107E300226659A',
    denom_units: [{
      denom: '0x254d06f33bDc5b8ee05b2ea472107E300226659A',
      exponent: 0,
      aliases: ['uausdc']
    }, {
      denom: 'ausdc',
      exponent: 6
    }],
    base: '0x254d06f33bDc5b8ee05b2ea472107E300226659A',
    name: 'USD Coin',
    display: 'ausdc',
    symbol: 'aUSDC',
    traces: [{
      type: 'synthetic',
      counterparty: {
        chain_name: 'forex',
        base_denom: 'USD'
      },
      provider: 'Circle'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/usdc.svg'
    },
    coingecko_id: 'usd-coin'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'moonbeamtestnet',
  assets: [{
    description: 'Glimmer (GLMR) is the utility token of the Moonbeam Network, Moonbeam’s primary deployment on the Polkadot network that serves as a developer-friendly parachain.',
    denom_units: [{
      denom: 'Wei',
      exponent: 0,
      aliases: ['wei']
    }, {
      denom: 'GLMR',
      exponent: 18,
      aliases: ['glmr']
    }],
    base: 'Wei',
    name: 'Glimmer',
    display: 'GLMR',
    symbol: 'GLMR',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/moonbeam/images/glmr.svg'
    },
    coingecko_id: 'moonbeam'
  }, {
    description: 'An ERC-20 representation of GLMR, the native token of Moonbeam.',
    type_asset: 'erc20',
    address: '0x1436aE0dF0A8663F18c0Ec51d7e2E46591730715',
    denom_units: [{
      denom: '0x1436aE0dF0A8663F18c0Ec51d7e2E46591730715',
      exponent: 0,
      aliases: ['wglmr-wei']
    }, {
      denom: 'wglmr',
      exponent: 18
    }],
    base: '0x1436aE0dF0A8663F18c0Ec51d7e2E46591730715',
    name: 'Wrapped Moonbeam',
    display: 'wglmr',
    symbol: 'WGLMR',
    traces: [{
      type: 'wrapped',
      counterparty: {
        chain_name: 'moonbeamtestnet',
        base_denom: 'Wei'
      },
      provider: 'Moonbeam'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/moonbeam/images/glmr.svg'
    },
    coingecko_id: 'wrapped-moonbeam'
  }, {
    description: 'USDC is a fully collateralized US Dollar stablecoin developed by CENTRE, the open source project with Circle being the first of several forthcoming issuers.',
    type_asset: 'erc20',
    address: '0xD1633F7Fb3d716643125d6415d4177bC36b7186b',
    denom_units: [{
      denom: '0xD1633F7Fb3d716643125d6415d4177bC36b7186b',
      exponent: 0,
      aliases: ['uusdc']
    }, {
      denom: 'axlusdc',
      exponent: 6
    }],
    base: '0xD1633F7Fb3d716643125d6415d4177bC36b7186b',
    name: 'Axelar Wrapped USD Coin',
    display: 'axlusdc',
    symbol: 'axlUSDC',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'axelartestnet',
        base_denom: 'uusdc'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/usdc.svg'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'polkadottestnet',
  assets: [{
    description: 'The native fee, governance, staking, and bonding token of the Polkadot platform.',
    denom_units: [{
      denom: 'Planck',
      exponent: 0,
      aliases: ['planck']
    }, {
      denom: 'uDOT',
      exponent: 4,
      aliases: ['udot', 'microdot', 'Microdot']
    }, {
      denom: 'mDOT',
      exponent: 7,
      aliases: ['millidot', 'Millidot']
    }, {
      denom: 'DOT',
      exponent: 10,
      aliases: ['dot', 'New DOT', 'new dot']
    }, {
      denom: 'DOT (old)',
      exponent: 12
    }, {
      denom: 'MDOT',
      exponent: 16,
      aliases: ['million', 'Million']
    }],
    base: 'Planck',
    name: 'Polkadot',
    display: 'DOT',
    symbol: 'DOT',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/polkadot/images/dot.svg'
    },
    coingecko_id: 'polkadot'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'polygontestnet',
  assets: [{
    description: 'Polygon (formerly Matic) Network brings massive scale to Ethereum using an adapted version of Plasma with PoS based side chains. Polygon is a well-structured, easy-to-use platform for Ethereum scaling and infrastructure development.',
    denom_units: [{
      denom: 'wei',
      exponent: 0
    }, {
      denom: 'matic',
      exponent: 18,
      aliases: ['polygon']
    }],
    base: 'wei',
    name: 'Matic',
    display: 'matic',
    symbol: 'MATIC',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/polygon/images/matic.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/polygon/images/matic.svg'
    },
    coingecko_id: 'matic-network'
  }, {
    description: 'Polygon combines the best of Ethereum and sovereign blockchains into a full-fledged multi-chain system.',
    type_asset: 'erc20',
    address: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',
    denom_units: [{
      denom: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',
      exponent: 0,
      aliases: ['wmatic-wei']
    }, {
      denom: 'wmatic',
      exponent: 18,
      aliases: ['polygon']
    }],
    base: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',
    name: 'Wrapped Matic',
    display: 'wmatic',
    symbol: 'WMATIC',
    traces: [{
      type: 'wrapped',
      counterparty: {
        chain_name: 'polygontestnet',
        base_denom: 'wei'
      },
      provider: 'Polygon'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/polygon/images/wmatic.svg'
    },
    coingecko_id: 'wmatic'
  }, {
    description: 'USDC is a fully collateralized US Dollar stablecoin developed by CENTRE, the open source project with Circle being the first of several forthcoming issuers.',
    type_asset: 'erc20',
    address: '0x2c852e740B62308c46DD29B982FBb650D063Bd07',
    denom_units: [{
      denom: '0x2c852e740B62308c46DD29B982FBb650D063Bd07',
      exponent: 0,
      aliases: ['uusdc']
    }, {
      denom: 'axlusdc',
      exponent: 6
    }],
    base: '0x2c852e740B62308c46DD29B982FBb650D063Bd07',
    name: 'Axelar Wrapped USD Coin',
    display: 'axlusdc',
    symbol: 'axlUSDC',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'axelartestnet',
        base_denom: 'uusdc'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/ethereum/images/usdc.svg'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'axelartestnet',
  assets: [{
    description: 'The native token of Axelar',
    denom_units: [{
      denom: 'uaxl',
      exponent: 0
    }, {
      denom: 'axl',
      exponent: 6
    }],
    base: 'uaxl',
    name: 'Axelar',
    display: 'axl',
    symbol: 'AXL',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/axelar/images/axl.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/axelar/images/axl.svg'
    },
    coingecko_id: 'axelar'
  }, {
    description: "Circle's stablecoin on Axelar",
    denom_units: [{
      denom: 'uausdc',
      exponent: 0
    }, {
      denom: 'ausdc',
      exponent: 6
    }],
    base: 'uausdc',
    name: 'USD Coin',
    display: 'ausdc',
    symbol: 'aUSDC',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereumtestnet',
        base_denom: '0x254d06f33bDc5b8ee05b2ea472107E300226659A'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/axelar/images/usdc.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/axelar/images/usdc.png'
    },
    coingecko_id: 'usd-coin'
  }, {
    description: 'Wrapped Ether on Axelar',
    denom_units: [{
      denom: 'weth-wei',
      exponent: 0
    }, {
      denom: 'weth',
      exponent: 18
    }],
    base: 'weth-wei',
    name: 'Wrapped Ether',
    display: 'weth',
    symbol: 'WETH',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'ethereumtestnet',
        base_denom: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/axelar/images/weth.png'
    },
    coingecko_id: 'weth'
  }, {
    description: 'Wrapped Moonbeam on Axelar',
    denom_units: [{
      denom: 'wglmr-wei',
      exponent: 0
    }, {
      denom: 'wglmr',
      exponent: 18
    }],
    base: 'wglmr-wei',
    name: 'Wrapped Moonbeam',
    display: 'wglmr',
    symbol: 'WGLMR',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'moonbeamtestnet',
        base_denom: '0x1436aE0dF0A8663F18c0Ec51d7e2E46591730715'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/moonbeam/images/glmr.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/moonbeam/images/glmr.png'
    },
    coingecko_id: 'wrapped-moonbeam'
  }, {
    description: 'Wrapped Matic on Axelar',
    denom_units: [{
      denom: 'wmatic-wei',
      exponent: 0
    }, {
      denom: 'wmatic',
      exponent: 18
    }],
    base: 'wmatic-wei',
    name: 'Wrapped Matic',
    display: 'wmatic',
    symbol: 'WMATIC',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'polygontestnet',
        base_denom: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/polygon/images/wmatic.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/polygon/images/wmatic.svg'
    },
    coingecko_id: 'matic-network'
  }, {
    description: 'Wrapped BNB on Axelar',
    denom_units: [{
      denom: 'wbnb-wei',
      exponent: 0
    }, {
      denom: 'wbnb',
      exponent: 18
    }],
    base: 'wbnb-wei',
    name: 'Wrapped BNB',
    display: 'wbnb',
    symbol: 'WBNB',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'binancesmartchaintestnet',
        base_denom: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/binancesmartchain/images/wbnb.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/binancesmartchain/images/wbnb.png'
    },
    coingecko_id: 'wbnb'
  }, {
    description: 'Wrapped AVAX on Axelar.',
    denom_units: [{
      denom: 'wavax-wei',
      exponent: 0
    }, {
      denom: 'avax',
      exponent: 18
    }],
    base: 'wavax-wei',
    name: 'Wrapped AVAX',
    display: 'avax',
    symbol: 'WAVAX',
    traces: [{
      type: 'bridge',
      counterparty: {
        chain_name: 'avalanchetestnet',
        base_denom: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c'
      },
      provider: 'Axelar'
    }],
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/_non-cosmos/avalanche/images/wavax.svg'
    }
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'bitcannadevnet',
  assets: [{
    description: 'The BCNA coin is the transactional token within the BitCanna network, serving the legal cannabis industry through its payment network, supply chain and trust network.',
    denom_units: [{
      denom: 'ubcna',
      exponent: 0
    }, {
      denom: 'bcna',
      exponent: 6
    }],
    base: 'ubcna',
    display: 'bcna',
    name: 'BitCanna',
    symbol: 'BCNA',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/bitcannadevnet/images/bcna.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/bitcannadevnet/images/bcna.svg'
    },
    coingecko_id: 'bitcanna'
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'bitcannadevnet2',
  assets: [{
    description: 'The BCNA coin is the transactional token within the BitCanna network, serving the legal cannabis industry through its payment network, supply chain and trust network.',
    denom_units: [{
      denom: 'ubcna',
      exponent: 0
    }, {
      denom: 'bcna',
      exponent: 6
    }],
    base: 'ubcna',
    display: 'bcna',
    name: 'BitCanna',
    symbol: 'BCNA',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/bitcannadevnet2/images/bcna.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/bitcannadevnet2/images/bcna.svg'
    },
    coingecko_id: 'bitcanna'
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'cheqdtestnet',
  assets: [{
    description: 'Native token for the cheqd network',
    denom_units: [{
      denom: 'ncheq',
      exponent: 0
    }, {
      denom: 'cheq',
      exponent: 9
    }],
    base: 'ncheq',
    display: 'cheq',
    name: 'cheqd',
    symbol: 'CHEQ',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/cheqdtestnet/images/cheq.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/cheqdtestnet/images/cheq.svg'
    },
    coingecko_id: 'cheqd-network'
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'coolcattestnet',
  assets: [{
    description: 'CoolCat - The Interchain Gaming Hub. $CCAT is the native token for use in the CoolCat Network.',
    denom_units: [{
      denom: 'uccat',
      exponent: 0
    }, {
      denom: 'ccat',
      exponent: 6
    }],
    base: 'uccat',
    name: 'CoolCat',
    display: 'ccat',
    symbol: 'CCAT',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/coolcat/images/coolcat.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/coolcat/images/coolcat.png'
    },
    keywords: ['nft', 'staking', 'games']
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'cosmoshubtestnet',
  assets: [{
    description: 'The native staking and governance token of the Theta testnet version of the Cosmos Hub.',
    denom_units: [{
      denom: 'uatom',
      exponent: 0
    }, {
      denom: 'atom',
      exponent: 6
    }],
    base: 'uatom',
    name: 'Cosmos',
    display: 'atom',
    symbol: 'ATOM',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.svg'
    }
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'cosmwasmtestnet',
  assets: [{
    description: 'Fee Token',
    denom_units: [{
      denom: 'umlg',
      exponent: 0
    }, {
      denom: 'MLG',
      exponent: 6
    }],
    base: 'umlg',
    name: 'Malaga',
    display: 'umlg',
    symbol: 'MLG',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/cosmwasmtestnet/images/cosmwasm.svg'
    }
  }, {
    description: 'Staking Token',
    denom_units: [{
      denom: 'uand',
      exponent: 0
    }, {
      denom: 'AND',
      exponent: 6
    }],
    base: 'uand',
    name: 'Malaga Stake',
    display: 'uand',
    symbol: 'AND',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/cosmwasmtestnet/images/cosmwasm.svg'
    }
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'cudostestnet',
  assets: [{
    description: 'The native token of the Cudos blockchain',
    denom_units: [{
      denom: 'acudos',
      exponent: 0,
      aliases: ['attocudos']
    }, {
      denom: 'cudos',
      exponent: 18,
      aliases: []
    }],
    base: 'acudos',
    name: 'Cudos',
    display: 'cudos',
    symbol: 'CUDOS',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/cudostestnet/images/cudos.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/cudostestnet/images/cudos.svg'
    }
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'empowertestnet',
  assets: [{
    description: 'The native staking and governance token of the testnet version of Empower.',
    denom_units: [{
      denom: 'umpwr',
      exponent: 0
    }, {
      denom: 'mpwr',
      exponent: 6
    }],
    base: 'umpwr',
    name: 'MPWR',
    display: 'mpwr',
    symbol: 'MPWR',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/empowertestnet/images/mpwr.png'
    }
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'evmostestnet',
  assets: [{
    description: 'The native EVM, governance and staking token of the Evmos Hub',
    denom_units: [{
      denom: 'atevmos',
      exponent: 0
    }, {
      denom: 'tevmos',
      exponent: 18
    }],
    base: 'atevmos',
    name: 'Evnos Testnet',
    display: 'tevmos',
    symbol: 'TEVMOS',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/evmostestnet/images/evmos.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/evmostestnet/images/evmos.svg'
    }
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'gitopiatestnet',
  assets: [{
    description: 'The native staking and governance token of the testnet version of Gitopia.',
    denom_units: [{
      denom: 'utlore',
      exponent: 0
    }, {
      denom: 'tlore',
      exponent: 6
    }],
    base: 'utlore',
    name: 'TLORE',
    display: 'tlore',
    symbol: 'TLORE',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/gitopiatestnet/images/gitopia.png'
    }
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'humanstestnet',
  assets: [{
    description: 'The native staking and governance token of the testnet version of Humans AI.',
    denom_units: [{
      denom: 'uheart',
      exponent: 0
    }, {
      denom: 'heart',
      exponent: 6
    }],
    base: 'uheart',
    name: 'HEART',
    display: 'heart',
    symbol: 'HEART',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/humanstestnet/images/humans.png'
    }
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'hypersigntestnet',
  assets: [{
    description: 'Native token for Hypersign Identity Network',
    denom_units: [{
      denom: 'uhid',
      exponent: 0
    }, {
      denom: 'hid',
      exponent: 6
    }],
    base: 'uhid',
    display: 'hid',
    name: 'Hypersign',
    symbol: 'HID',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/hypersigntestnet/images/hypersign.png'
    },
    coingecko_id: 'hypersign-identity-token'
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'imversedtestnet',
  assets: [{
    description: 'The native staking and governance token of the Imversed testnet.',
    denom_units: [{
      denom: 'nimv',
      exponent: 0,
      aliases: []
    }, {
      denom: 'imv',
      exponent: 6,
      aliases: []
    }],
    base: 'nimv',
    name: 'Imv',
    display: 'imv',
    symbol: 'IMV',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/imversedtestnet/images/imversed.svg'
    }
  }, {
    description: 'The native staking and governance token of the Imversed testnet.',
    denom_units: [{
      denom: 'ibc/C6438A7D613196373D939891C99CA7EEF4F78F4A78DC8590E51E62F8ED16E72B',
      exponent: 0,
      aliases: ['usaage']
    }, {
      denom: 'imv',
      exponent: 6
    }],
    base: 'ibc/C6438A7D613196373D939891C99CA7EEF4F78F4A78DC8590E51E62F8ED16E72B',
    name: 'Imv',
    display: 'imv',
    symbol: 'IMV',
    ibc: {
      source_channel: 'channel-1',
      dst_channel: 'channel-221',
      source_denom: 'nimv'
    },
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/imversedtestnet/images/imversed.svg'
    }
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'jackaltestnet',
  assets: [{
    description: 'The native staking and governance token of Jackal.',
    denom_units: [{
      denom: 'ujkl',
      exponent: 0
    }, {
      denom: 'jkl',
      exponent: 6
    }],
    base: 'ujkl',
    name: 'Jackal',
    display: 'jkl',
    symbol: 'JKL',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/jackaltestnet/images/jkl.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/jackaltestnet/images/jkl.svg'
    },
    coingecko_id: 'jackal'
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'junotestnet',
  assets: [{
    description: 'The native token of JUNO Chain',
    denom_units: [{
      denom: 'ujunox',
      exponent: 0
    }, {
      denom: 'junox',
      exponent: 6
    }],
    base: 'ujunox',
    name: 'Juno Testnet',
    display: 'junox',
    symbol: 'JUNO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/junotestnet/images/juno.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/junotestnet/images/juno.svg'
    },
    coingecko_id: 'juno-network'
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'kichaintestnet',
  assets: [{
    description: 'The native token of Ki Chain',
    denom_units: [{
      denom: 'utki',
      exponent: 0
    }, {
      denom: 'tki',
      exponent: 6
    }],
    base: 'utki',
    name: 'Ki',
    display: 'tki',
    symbol: 'TKI',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/kichain/images/xki.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/kichain/images/xki.svg'
    },
    coingecko_id: 'ki'
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'kujiratestnet',
  assets: [{
    description: 'The native staking and governance token of the Harpoon testnet version of Kujira.',
    denom_units: [{
      denom: 'ukuji',
      exponent: 0
    }, {
      denom: 'kuji',
      exponent: 6
    }],
    base: 'ukuji',
    name: 'Kuji',
    display: 'kuji',
    symbol: 'KUJI',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/kujiratestnet/images/kuji.png'
    }
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'kyvetestnet',
  assets: [{
    description: 'The native staking and governance token of the Korellia testnet version of KYVE.',
    denom_units: [{
      denom: 'tkyve',
      exponent: 0
    }, {
      denom: 'kyve',
      exponent: 9
    }],
    base: 'tkyve',
    name: 'KYVE',
    display: 'kyve',
    symbol: 'KYVE',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/kyvetestnet/images/kyve.svg'
    }
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'osmosistestnet',
  assets: [{
    description: 'The native token of Osmosis',
    denom_units: [{
      denom: 'uosmo',
      exponent: 0,
      aliases: []
    }, {
      denom: 'osmo',
      exponent: 6,
      aliases: []
    }],
    base: 'uosmo',
    name: 'Osmosis',
    display: 'osmo',
    symbol: 'OSMO',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.svg'
    },
    coingecko_id: 'osmosis',
    keywords: ['dex', 'staking']
  }, {
    denom_units: [{
      denom: 'uion',
      exponent: 0
    }, {
      denom: 'ion',
      exponent: 6
    }],
    base: 'uion',
    name: 'Ion',
    display: 'ion',
    symbol: 'ION',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.svg'
    },
    coingecko_id: 'ion',
    keywords: ['memecoin']
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'quasartestnet',
  assets: [{
    description: 'The native token of Quasar',
    denom_units: [{
      denom: 'uqsr',
      exponent: 0,
      aliases: []
    }, {
      denom: 'qsr',
      exponent: 6,
      aliases: []
    }],
    base: 'uqsr',
    name: 'Quasar',
    display: 'qsr',
    symbol: 'QSR'
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'saagetestnet',
  assets: [{
    description: 'The SGE token is primarily a governance token for the Saage chain.',
    denom_units: [{
      denom: 'usaage',
      exponent: 0,
      aliases: []
    }, {
      denom: 'saage',
      exponent: 6,
      aliases: []
    }],
    base: 'usaage',
    name: 'Saage',
    display: 'saage',
    symbol: 'SGE',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/saagetestnet/images/saage.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/saagetestnet/images/saage.svg'
    }
  }, {
    description: 'The SGE token is primarily a governance token for the Saage chain.',
    denom_units: [{
      denom: 'ibc/8B670F5ACD4887208C8FAD58396D39114A8F2C9B57E72EE02F51438069A72AEA',
      exponent: 0,
      aliases: ['usaage']
    }, {
      denom: 'saage',
      exponent: 6
    }],
    base: 'ibc/8B670F5ACD4887208C8FAD58396D39114A8F2C9B57E72EE02F51438069A72AEA',
    name: 'Saage',
    display: 'saage',
    symbol: 'SGE',
    ibc: {
      source_channel: 'channel-0',
      dst_channel: 'channel-207',
      source_denom: 'usaage'
    },
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/saagetestnet/images/saage.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/saagetestnet/images/saage.svg'
    }
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'secretnetworktestnet',
  assets: [{
    description: 'The native token of Secret Network',
    denom_units: [{
      denom: 'uscrt',
      exponent: 0
    }, {
      denom: 'scrt',
      exponent: 6
    }],
    base: 'uscrt',
    name: 'Secret Network',
    display: 'scrt',
    symbol: 'SCRT',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/secretnetwork/images/scrt.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/secretnetwork/images/scrt.svg'
    },
    coingecko_id: 'secret'
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'seitestnet',
  assets: [{
    description: 'The native staking and governance token of the Atlantic testnet version of Sei.',
    denom_units: [{
      denom: 'usei',
      exponent: 0
    }, {
      denom: 'sei',
      exponent: 6
    }],
    base: 'usei',
    name: 'Sei',
    display: 'sei',
    symbol: 'SEI',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/atlantic/images/sei.png'
    }
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'stargazetestnet',
  assets: [{
    description: 'The native token of Stargaze',
    denom_units: [{
      denom: 'ustars',
      exponent: 0
    }, {
      denom: 'stars',
      exponent: 6
    }],
    base: 'ustars',
    name: 'Stargaze',
    display: 'stars',
    symbol: 'STARS',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/stargaze/images/stars.png'
    },
    coingecko_id: 'stargaze'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'statesettestnet',
  assets: [{
    description: 'The native token of the Stateset Network',
    denom_units: [{
      denom: 'ustate',
      exponent: 0,
      aliases: []
    }, {
      denom: 'state',
      exponent: 6,
      aliases: []
    }],
    base: 'ustate',
    name: 'Stateset',
    display: 'state',
    symbol: 'STATE',
    logo_URIs: {
      jpeg: 'https://app.stateset.zone/stateset.jpeg'
    }
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'terpnettestnet',
  assets: [{
    description: "Terp Token (TERP) is the Terp Network's native utility token, used as the primary means to govern, secure the blockchain, incentivize participants, and provide a default mechanism to store and exchange value.",
    denom_units: [{
      denom: 'uterpx',
      exponent: 0
    }, {
      denom: 'terpx',
      exponent: 6
    }],
    base: 'uterpx',
    name: 'Terp Testnet Token',
    display: 'terpx',
    symbol: 'TERPX',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/terpnettestnet/images/terp.png'
    }
  }, {
    description: "Persy Gas Token (Persy) is the Terp Network's native utility token, used as the primary means to govern, secure the blockchain, incentivize participants, and provide a default mechanism to store and exchange value.",
    denom_units: [{
      denom: 'upersyx',
      exponent: 0
    }, {
      denom: 'persyx',
      exponent: 6
    }],
    base: 'upersyx',
    name: 'Persy Testnet Gas Token',
    display: 'persyx',
    symbol: 'PERSYX',
    logo_URIs: {}
  }]
}, {
  $schema: '../../assetlist.schema.json',
  chain_name: 'ulastestnet',
  assets: [{
    description: 'WEB3 twitter',
    denom_units: [{
      denom: 'uulas',
      exponent: 0
    }, {
      denom: 'ulas',
      exponent: 6
    }],
    base: 'uulas',
    name: 'ULAS Network',
    display: 'ULAS',
    symbol: 'ULAS',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets/ulastestnet/images/logo.png'
    },
    coingecko_id: 'ulas'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'tgrade',
  assets: [{
    description: 'The native token of Tgrade',
    denom_units: [{
      denom: 'utgd',
      exponent: 0
    }, {
      denom: 'tgd',
      exponent: 6
    }],
    base: 'utgd',
    name: 'Tgrade',
    display: 'tgd',
    symbol: 'TGD',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/tgrade/images/tgrade-symbol-gradient.png',
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/tgrade/images/tgrade-symbol-gradient.svg'
    },
    coingecko_id: 'tgrade'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'umee',
  assets: [{
    description: 'The native token of Umee',
    denom_units: [{
      denom: 'uumee',
      exponent: 0
    }, {
      denom: 'umee',
      exponent: 6
    }],
    base: 'uumee',
    name: 'Umee',
    display: 'umee',
    symbol: 'UMEE',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/umee/images/umee.png'
    },
    coingecko_id: 'umee'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'unification',
  assets: [{
    description: 'Staking and governance coin for the Unification Blockchain',
    denom_units: [{
      denom: 'nund',
      exponent: 0
    }, {
      denom: 'FUND',
      exponent: 9
    }],
    base: 'nund',
    name: 'Unification Network',
    display: 'FUND',
    symbol: 'FUND',
    logo_URIs: {
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/unification/images/fund.png'
    },
    coingecko_id: 'unification'
  }]
}, {
  $schema: '../assetlist.schema.json',
  chain_name: 'vidulum',
  assets: [{
    description: 'The native token of Vidulum',
    denom_units: [{
      denom: 'uvdl',
      exponent: 0
    }, {
      denom: 'vdl',
      exponent: 6
    }],
    base: 'uvdl',
    name: 'Vidulum',
    display: 'vdl',
    symbol: 'VDL',
    logo_URIs: {
      svg: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/vidulum/images/vdl.svg',
      png: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/vidulum/images/vdl.png'
    },
    coingecko_id: 'vidulum'
  }]
}];
var _default = assets;
exports["default"] = _default;

/***/ }),

/***/ 7685:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
Object.defineProperty(exports, "__esModule", ({value:true}));exports["default"]=void 0;var chains=[{$schema:'../chain.schema.json',chain_name:'acrechain',status:'live',network_type:'mainnet',website:'https://arable.finance/',pretty_name:'Acrechain',chain_id:'acre_9052-1',bech32_prefix:'acre',node_home:'$HOME/.acred',daemon_name:'acred',key_algos:['ethsecp256k1'],slip44:60,fees:{fee_tokens:[{denom:'aacre',fixed_min_gas_price:250000000,low_gas_price:20000000000,average_gas_price:25000000000,high_gas_price:40000000000}]},staking:{staking_tokens:[{denom:'aacre'}]},codebase:{git_repo:'https://github.com/ArableProtocol/acrechain',recommended_version:'v1.1.1',compatible_versions:['v1.1.1'],binaries:{},genesis:{genesis_url:'https://raw.githubusercontent.com/ArableProtocol/acrechain/main/networks/mainnet/acre_9052-1/genesis.json'}},peers:{seeds:[{id:'ef28f065e24d60df275b06ae9f7fed8ba0823448',address:'46.4.81.204:34656',provider:'Kalia Network'},{id:'e29de0ba5c6eb3cc813211887af4e92a71c54204',address:'65.108.1.225:46656',provider:'Ramuchi.tech'},{id:'276be584b4a8a3fd9c3ee1e09b7a447a60b201a4',address:'116.203.29.162:26656',provider:'High Stakes'},{id:'e2d029c95a3476a23bad36f98b316b6d04b26001',address:'49.12.33.189:36656',provider:'Stake-Take'},{id:'1264ee73a2f40a16c2cbd80c1a824aad7cb082e4',address:'149.102.146.252:26656',provider:'D-Stake'},{id:'bac90a590452337700e0033315e96430d19a3ffa',address:'23.106.238.167:26656',provider:'Synergy Nodes'},{id:'d86d7a9d8059ae726f3322ff1eb9e2797fe62a72',address:'65.108.233.44:26616',provider:'StakeTab'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'acrechain.mainnet.seed.autostake.net:26956',provider:'AutoStake 🛡️ Slash Protected'}],persistent_peers:[{id:'ef28f065e24d60df275b06ae9f7fed8ba0823448',address:'46.4.81.204:34656',provider:'Kalia Network'},{id:'e29de0ba5c6eb3cc813211887af4e92a71c54204',address:'65.108.1.225:46656',provider:'Ramuchi.tech'},{id:'276be584b4a8a3fd9c3ee1e09b7a447a60b201a4',address:'116.203.29.162:26656',provider:'High Stakes'},{id:'e2d029c95a3476a23bad36f98b316b6d04b26001',address:'49.12.33.189:36656',provider:'Stake-Take'},{id:'1264ee73a2f40a16c2cbd80c1a824aad7cb082e4',address:'149.102.146.252:26656',provider:'D-Stake'},{id:'bac90a590452337700e0033315e96430d19a3ffa',address:'23.106.238.167:26656',provider:'Synergy Nodes'},{id:'d86d7a9d8059ae726f3322ff1eb9e2797fe62a72',address:'65.108.233.44:26616',provider:'StakeTab'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'acrechain.mainnet.peer.autostake.net:26956',provider:'AutoStake 🛡️ Slash Protected'}]},apis:{rpc:[{address:'https://rpc.acre.nodestake.top',provider:'nodestake'},{address:'https://rpc-acre.d-stake.xyz',provider:'D-stake'},{address:'https://rpc.acrescan.com',provider:'Anonstake'},{address:'https://rpc-acre.synergynodes.com',provider:'Synergy Nodes'},{address:'https://rpc-acrechain.nodeist.net',provider:'Nodeist'},{address:'https://acre-rpc.agoranodes.com',provider:'AgoraNodes'}],rest:[{address:'https://rest.acrescan.com',provider:'Anonstake'},{address:'https://api-acre.d-stake.xyz',provider:'D-stake'},{address:'https://lcd-acre.synergynodes.com',provider:'Synergy Nodes'},{address:'https://api-acrechain.nodeist.net',provider:'Nodeist'},{address:'https://acrechain.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'},{address:'https://acre-rest.agoranodes.com',provider:'AgoraNodes'}],grpc:[{address:'https://grpc.acre.nodestake.top',provider:'Nodestake'},{address:'https://grpc-acre.d-stake.xyz',provider:'D-stake'},{address:'https://acre-grpc.agoranodes.com',provider:'AgoraNodes'}],'evm-http-jsonrpc':[{address:'https://evm.acrescan.com',provider:'Anonstake'},{address:'https://jsonrpc-acre.d-stake.xyz',provider:'D-stake'},{address:'https://rpc2-acre.synergynodes.com',provider:'Synergy Nodes'},{address:'https://jsonrpc.acre.nodestake.top',provider:'Nodestake'}]},explorers:[{kind:'blockscout',url:'https://acrescout.mindheartsoul.org',tx_page:'https://acrescout.mindheartsoul.org/tx/${txHash}'},{kind:'blockscout',url:'https://acrescan.com',tx_page:'https://acrescan.com/tx/${txHash}'},{kind:'blockscout',url:'https://acreblockexplorer.jet-node.com',tx_page:'https://acreblockexplorer.jet-node.com/tx/${txHash}'},{kind:'ping.pub',url:'https://explorer.nodestake.top/acre',tx_page:'https://explorer.nodestake.top/acre/tx/${txHash}'},{kind:'ping.pub',url:'https://cosmosrun.info/acre-mainnet',tx_page:'https://cosmosrun.info/acre-mainnet/tx/${txHash}'},{kind:'ping.pub',url:'https://exp.nodeist.net/m-acrechain/',tx_page:'https://exp.nodeist.net/m-acrechain/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'agoric',status:'live',network_type:'mainnet',website:'https://agoric.com/',pretty_name:'Agoric',chain_id:'agoric-3',bech32_prefix:'agoric',daemon_name:'agd',node_home:'$HOME/.agoric',slip44:564,explorers:[{name:'bigdipper',url:'https://agoric.bigdipper.live/',tx_page:'https://agoric.bigdipper.live/transactions/${txHash}',account_page:'https://agoric.bigdipper.live/accounts/${accountAddress}'},{name:'explorers.guru',url:'https://agoric.explorers.guru',tx_page:'https://agoric.explorers.guru/transaction/${txHash}',account_page:'https://agoric.explorers.guru/account/${accountAddress}'},{kind:'atomscan',url:'https://atomscan.com/agoric/',tx_page:'https://atomscan.com/agoric/transactions/${txHash}',account_page:'https://atomscan.com/agoric/accounts/${accountAddress}'}],codebase:{git_repo:'https://github.com/Agoric/agoric-sdk/',recommended_version:'agoric-upgrade-8',compatible_versions:['agoric-upgrade-8'],genesis:{genesis_url:'https://main.agoric.net/genesis.json'}},peers:{seeds:[{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:14456',provider:'Polkachu'},{id:'400f3d9e30b69e78a7fb891f60d76fa3c73f0ecc',address:'agoric.rpc.kjnodes.com:27659',provider:'kjnodes'}],persistent_peers:[{id:'a26158a5cbb1df581dd6843ac427191af76d6d5d',address:'104.154.240.50:26656'},{id:'6e26a1b4afa6889f841d7957e8c2b5d50d32d485',address:'95.216.53.26:26656'}]},apis:{rpc:[{address:'https://main.rpc.agoric.net:443'},{address:'https://agoric-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc.agoric.nodestake.top',provider:'NodeStake'},{address:'https://agoric.rpc.kjnodes.com',provider:'kjnodes'}],rest:[{address:'https://main.api.agoric.net:443'},{address:'https://api.agoric.nodestake.top',provider:'NodeStake'},{address:'https://agoric-api.polkachu.com',provider:'Polkachu'},{address:'https://agoric.api.kjnodes.com',provider:'kjnodes'}],grpc:[{address:'https://grpc.agoric.nodestake.top',provider:'NodeStake'},{address:'agoric-grpc.polkachu.com:14490',provider:'Polkachu'}]}},{$schema:'../chain.schema.json',chain_name:'aioz',status:'live',network_type:'mainnet',website:'https://aioz.network/',pretty_name:'AIOZ Network',chain_id:'aioz_168-1',bech32_prefix:'aioz',daemon_name:'aiozd',node_home:'$HOME/.aioz',key_algos:['ethsecp256k1'],extra_codecs:['ethermint'],slip44:60,fees:{fee_tokens:[{denom:'attoaioz',fixed_min_gas_price:1000000000}]},codebase:{git_repo:'https://github.com/AIOZNetwork/go-aioz',recommended_version:'v1.2.0',compatible_versions:['v1.2.0'],binaries:{'linux/amd64':'https://archive.aioz.network/aiozd-v1.2.0-linux-amd64.tar.gz','darwin/amd64':'https://archive.aioz.network/aiozd-v1.2.0-darwin-amd64.tar.gz','windows/amd64':'https://archive.aioz.network/aiozd-v1.2.0-windows-amd64.zip'},genesis:{genesis_url:'https://archive.aioz.network/aioz_168-1/genesis.json'}},peers:{seeds:[{id:'aab202d5648772a8b5be3db575a8a7dd577db78f',address:'167.172.6.76:26656'},{id:'ef834ca8044d345db334fbf6a6bfe7230f429739',address:'35.236.45.174:26656'},{id:'b13a849f59ff3e0558d248c3e9eb9bf4a360bb77',address:'20.187.94.254:26656'},{id:'849e6023440355412bc9a9d5bc0731143e7d657a',address:'13.53.208.41:26656'}],persistent_peers:[{id:'aab202d5648772a8b5be3db575a8a7dd577db78f',address:'167.172.6.76:26656'},{id:'ef834ca8044d345db334fbf6a6bfe7230f429739',address:'35.236.45.174:26656'},{id:'b13a849f59ff3e0558d248c3e9eb9bf4a360bb77',address:'20.187.94.254:26656'},{id:'849e6023440355412bc9a9d5bc0731143e7d657a',address:'13.53.208.41:26656'}]},apis:{rpc:[{address:'https://rpc-dataseed.aioz.network:443',provider:'AIOZ Network'}],rest:[{address:'https://lcd-dataseed.aioz.network',provider:'AIOZ Network'}],grpc:[{address:'https://grpc-dataseed.aioz.network:443',provider:'AIOZ Network'}],'evm-jsonrpc':[{address:'https://eth-dataseed.aioz.network',provider:'AIOZ Network'}]},explorers:[{kind:'aioz',url:'https://explorer.aioz.network',tx_page:'https://explorer.aioz.network/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'akash',status:'live',network_type:'mainnet',website:'https://akash.network/',pretty_name:'Akash',chain_id:'akashnet-2',bech32_prefix:'akash',daemon_name:'akash',node_home:'$HOME/.akash',slip44:118,fees:{fee_tokens:[{denom:'uakt',fixed_min_gas_price:0}]},staking:{staking_tokens:[{denom:'uakt'}]},codebase:{git_repo:'https://github.com/ovrclk/akash/',recommended_version:'v0.20.0',compatible_versions:['v0.20.0'],binaries:{'linux/amd64':'https://github.com/ovrclk/akash/releases/download/v0.20.0/akash_0.20.0_linux_amd64.zip','linux/arm64':'https://github.com/ovrclk/akash/releases/download/v0.20.0/akash_0.20.0_linux_arm64.zip'},genesis:{genesis_url:'https://raw.githubusercontent.com/ovrclk/net/master/mainnet/genesis.json'}},peers:{seeds:[{id:'4acf579e2744268f834c713e894850995bbf0ffa',address:'50.18.31.225:26656'},{id:'3691ac1f56389ffec8579c13a6eb8eca41cf8ae3',address:'54.219.88.246:26656'},{id:'86afe23f116ba4754a19819a55d153008eb74b48',address:'15.164.87.75:26656'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:12856',provider:'Polkachu'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:12856',provider:'Lavender.Five Nodes 🐝'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'akash.mainnet.seed.autostake.net:26696',provider:'AutoStake 🛡️ Slash Protected'},{id:'5e37aefd2a0b9d036b1609a45d6487606da0204b',address:'rpc.ny.akash.farm:26656'},{id:'8d334fff41adeb68f186265d5f1f76614ef63d8d',address:'rpc.nl.akash.farm:26656'},{id:'47f7b7a021497ad7a338ea041f19a1a11ae06795',address:'rpc.la.akash.farm:26656'}],persistent_peers:[{id:'4acf579e2744268f834c713e894850995bbf0ffa',address:'50.18.31.225:26656'},{id:'3691ac1f56389ffec8579c13a6eb8eca41cf8ae3',address:'54.219.88.246:26656'},{id:'86afe23f116ba4754a19819a55d153008eb74b48',address:'15.164.87.75:26656'},{id:'43544bc781b88d6785420427926d86a5332940b3',address:'142.132.131.184:26656'},{id:'30b8008d4ea5069a8724a0aa73833493efa88e67',address:'65.108.140.62:26656'},{id:'2b19780ea3de3553f03847a397ac2dfda1d2e89e',address:'65.108.6.185:26656'},{id:'be3a538cebb28e7224db10920bb7fe32456e1aad',address:'116.202.244.153:26656'},{id:'d2643edd1b3dce6615bc9925e20122c44d2ff763',address:'172.106.17.158:26656'},{id:'08fd59378ec5845a667f8608bd228f9251aec035',address:'3.64.67.110:27002'},{id:'6acf80cdbfba5ffbee23bd9e5b3ecac3234f3420',address:'147.75.32.107:26656'},{id:'20180c45451739668f6e272e007818139dba31e7',address:'88.198.62.198:2020'},{id:'89b5c363babe7c4983c3ef06c3c9ed1e39ec4246',address:'51.79.176.202:56656'},{id:'1c03b13f5f24f59ecc3cfe5d5fc36dabee3a5d78',address:'144.202.77.146:26656'},{id:'070b3c936e2995bc269a2981702b87de05411baa',address:'148.251.13.186:28656'},{id:'05c30fd95b888ca8df8171ce65a06f1de683d6e3',address:'84.252.129.17:26656'},{id:'b618556645ddac41dc871f7a0f6aa68feb0cc2a7',address:'38.75.137.161:26656'},{id:'97edd562862a905f087ccb02a39e6f660939e314',address:'216.202.234.76:26656'},{id:'06788f62811879e1d0774c4e9152543e17fe8576',address:'145.40.65.227:26656'},{id:'2ecb6e24df48ee037234222c67ef963daa58bcfc',address:'65.108.102.99:29656'},{id:'4e95c8f651de136b48c324ea9a687739a945f452',address:'185.107.95.88:26656'},{id:'1bfbbf77beeb2c1ace50443478035a255a7e510f',address:'136.24.44.100:26656'},{id:'ce137ea95720b2d4e196920d12170d1a6aebcf69',address:'35.215.43.253:26656'},{id:'fb42bcf141eecc7a8a66fcfbf7d2573b3b8d00e6',address:'75.119.133.59:26656'},{id:'c6e0e5460aefcf3c5d5d26dee1ef1e99e5ed90b8',address:'198.57.27.14:26656'},{id:'2640152c6359b03a3a4559b12110e96fcb95cd68',address:'74.91.27.138:26656'},{id:'aa01698ec0d8bb96398e89b57ecb08bcca50fa21',address:'65.21.199.148:26636'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'akash.mainnet.peer.autostake.net:26696',provider:'AutoStake 🛡️ Slash Protected'}]},apis:{rpc:[{address:'https://rpc.akash.forbole.com:443',provider:'forbole'},{address:'https://rpc-akash.ecostake.com:443',provider:'ecostake'},{address:'https://akash-rpc.lavenderfive.com:443',provider:'Lavender.Five Nodes'},{address:'https://akash-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc-akash-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'http://akash.c29r3.xyz:80/rpc',provider:'c29r3'},{address:'https://akash.rpc.interchain.ivaldilabs.xyz',provider:'Ivaldi Labs'}],rest:[{address:'https://api.akash.forbole.com:443',provider:'forbole'},{address:'https://rest-akash.ecostake.com',provider:'ecostake'},{address:'https://akash-api.lavenderfive.com:443',provider:'Lavender.Five Nodes'},{address:'https://akash-api.polkachu.com',provider:'Polkachu'},{address:'https://api-akash-ia.cosmosia.notional.ventures',provider:'Notional'},{address:'https://akash.c29r3.xyz:443/api',provider:'c29r3'},{address:'https://akash.rest.interchain.ivaldilabs.xyz',provider:'Ivaldi Labs'},{address:'https://akash.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'}],grpc:[{address:'grpc-akash-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'https://akash-grpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'akash-grpc.polkachu.com:12890',provider:'Polkachu'},{address:'akash.grpc.interchain.ivaldilabs.xyz:443',provider:'Ivaldi Labs'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/akash',tx_page:'https://ezstaking.tools/akash/txs/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/akash',tx_page:'https://www.mintscan.io/akash/txs/${txHash}',account_page:'https://www.mintscan.io/akash/account/${accountAddress}'},{kind:'ping.pub',url:'https://ping.pub/akash-network',tx_page:'https://ping.pub/akash-network/tx/${txHash}'},{kind:'bigdipper',url:'https://akash.bigdipper.live/',tx_page:'https://akash.bigdipper.live/transactions/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/akash',tx_page:'https://atomscan.com/akash/transactions/${txHash}'},{kind:'cloudmos',url:'https://cloudmos.io/blocks',tx_page:'https://cloudmos.io/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'arkh',status:'live',network_type:'mainnet',website:'https://arkh.com/',pretty_name:'Arkhadian',chain_id:'arkh',bech32_prefix:'arkh',daemon_name:'arkhd',node_home:'$HOME/.arkhd',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'uarkh',fixed_min_gas_price:1e-9}]},codebase:{git_repo:'https://github.com/vincadian/arkh-blockchain',recommended_version:'v1.0.0',compatible_versions:['v1.0.0'],binaries:{'linux/amd64':'https://github.com/vincadian/arkh-blockchain/releases/download/latest/arkh-blockchain_latest_linux_amd64.tar.gz','darwin/amd64':'https://github.com/vincadian/arkh-blockchain/releases/download/latest/arkh-blockchain_latest_darwin_amd64.tar.gz'},genesis:{genesis_url:'https://github.com/vincadian/arkh-blockchain/blob/master/genesis/genesis.json'}},peers:{seeds:[{id:'808f01d4a7507bf7478027a08d95c575e1b5fa3c',address:'asc-dataseed.arkhadian.com:26656'}]},apis:{rpc:[{address:'https://asc-dataseed.arkhadian.com/',provider:'arkhnetwork'}],rest:[{address:'https://asc-blockchain-api.arkhadian.com/',provider:'arkhnetwork'}]},explorers:[{kind:'ping.pub',url:'https://testnet.ping.pub/arkh',tx_page:'https://testnet.ping.pub/arkh/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'assetmantle',status:'live',network_type:'mainnet',website:'https://assetmantle.one/',pretty_name:'AssetMantle',chain_id:'mantle-1',bech32_prefix:'mantle',daemon_name:'mantleNode',node_home:'$HOME/.mantleNode',codebase:{git_repo:'https://github.com/AssetMantle/node.git',recommended_version:'v0.3.0',compatible_versions:['v0.3.0'],genesis:{genesis_url:'https://raw.githubusercontent.com/AssetMantle/genesisTransactions/main/mantle-1/final_genesis.json'}},peers:{seeds:[{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:14656',provider:'Polkachu'},{id:'990557213003ab234cc03307d02688c30357fed6',address:'seeds.whispernode.com:14656',provider:'WhisperNode🤐'}],persistent_peers:[{id:'95a7b7eed1f5cd2894574bf0da4b884243e7d0f3',address:'43.204.38.118:26656'},{id:'0a58c9bbb5d7551eebb8e4ac79bd97f580aaf269',address:'65.0.131.189:26656'},{id:'800a9f991c0bf2dba8ec9370f41951dab5927b32',address:'3.110.89.133:26656'},{id:'5f72cdfd9adbb20cd880fd0d93943d40c426b5c2',address:'35.154.27.208:26656'},{id:'1048f75cdd92eedbe3935d07ccf662b45aa6c5f7',address:'15.206.189.215:26656'},{id:'a2289be9268ad08db32a59ef8dc243476d5c6f6a',address:'3.108.2.18:26656'},{id:'4923caf1572e8925519fcd9eca27cc70c803d7d6',address:'3.108.218.178:26656'},{id:'4c39bda705c8c8993f8a989e1375720352d9573f',address:'65.0.45.61:26656'},{id:'8392653526200f757190c1f88ffd69726a20055b',address:'3.110.74.167:26656'},{id:'7da33184073d211e625848ce4ef2ba50cf5eeb36',address:'13.234.225.229:26656'},{id:'880a8fc1a21d2908bd109dab1a2a074ebddec18a',address:'65.108.192.170:26656'},{id:'88873cf28bc552d39d4cb10523167aa24c3a4e85',address:'95.217.118.96:26876'},{id:'f96b29b7df3fe6a59fc11bde6936d7109e66515b',address:'65.21.237.29:26656'},{id:'b5c9a4607fc0494b25b703d08c4601ce44027215',address:'162.55.246.236:26656'},{id:'5d3d2807baa4cd191205749a63cc30aab6a3caa1',address:'65.108.7.28:26656'},{id:'615e815366defb4c194233ea03c9879f183d49b9',address:'65.108.199.26:26656'},{id:'4654c8bed4349e4800238cff1f88e97c1f880080',address:'207.244.245.125:26656'},{id:'5622cc659818baa12ae9fa7f58bb8c0be23366fe',address:'52.8.59.124:26656'},{id:'c27d512e10d48e921e4fe88f0221a4e2c80567f1',address:'13.56.34.84:26656'},{id:'a7aafd3330e57d3104be5b2820b6ad2d52ac19ec',address:'3.39.94.36:26656'},{id:'9c97f6143d3fae032af5f155d472bbc52f4d90b3',address:'194.34.232.225:26656'},{id:'f61e5c1d7897dd445508a873248e57ae553ac258',address:'91.230.111.86:26656'},{id:'f073d57107004268a7c0f1e24433401f892eff94',address:'sentry-1.asset-mantle.ezstaking.xyz:26229',provider:'EZStaking.io'},{id:'68692140af51d0c41163340f6f1222eec914c18f',address:'sentry-2.asset-mantle.ezstaking.xyz:26746',provider:'EZStaking.io'},{id:'01e2e8547bd17890a7af54d236ae19d16cb1b224',address:'65.108.201.154:2050'},{id:'ac4512cf8969a9602b6c046be6fd24b9b3ecc2d7',address:'142.132.202.10:26656'},{id:'fd096224f9c918089410ac7ab6d42d21ec87db60',address:'65.21.230.230:26656'},{id:'cc938d4354c61e4f59b9626737c2aa1e448f4d57',address:'5.161.80.214:26656'},{id:'cbb1bb6b073e65bb5a9a349e8ac2bb86348b5da1',address:'142.132.210.135:26656'},{id:'ab19fe08d8587df7a0aaec966198425a91de6278',address:'159.89.162.214:26656'},{id:'efcdd119e9a0f1ac5718c225e425aa1c0121b020',address:'65.20.97.129:26656'},{id:'f33b2125c3b3a7c4838e22a060e38d2cefd66e78',address:'65.108.140.109:26656'},{id:'202c1e6de51f0d89872e62c8b8f998f479f17f12',address:'51.195.233.194:26656'},{id:'f3210561bcfb3252343192c14f8364c14084749a',address:'135.125.5.48:26656'},{id:'60a13d44a8ae4165e83e4c3564b0bf36f5ae2615',address:'43.254.41.55:26656'},{id:'c64d745a479936d0b482c28239effd2e9fe24bf5',address:'45.77.144.250:26656'},{id:'6261de9dac635a8fd8d19a70afc41f845c59db96',address:'116.203.35.46:26656'},{id:'af80c95f95301fab1778a722a0d8596ca10006cc',address:'136.243.105.182:26656'},{id:'df406a21ac70fbcd7ae06448fe0e7b428385ec6f',address:'65.21.195.98:26656'},{id:'e401ef970f15ed0da7321eb9401ada0729b12c8d',address:'157.90.248.195:26656'},{id:'e0deea2d5c15e77c9d5934305bb23148ce836709',address:'185.252.232.79:26656'},{id:'bbf9c162fbcfbf3dc2c07a7a4ad19d84570ee290',address:'161.97.140.10:26656'},{id:'f2b185dbf88277878b4989db31ac40a606829429',address:'65.108.41.72:26656'},{id:'8034d1f19724d11be0ad108ac54c63ead4705237',address:'3.110.47.238:26656'},{id:'1f28c7cd884a76a022038f22923eea8101d3538f',address:'168.119.89.31:26656'},{id:'d0dc9234db7b9e5bb853afbd96055c46990aa55f',address:'65.21.131.144:29656'},{id:'7eeb595f1205c2c7230b3812badb1844185b3727',address:'65.108.99.224:46656'},{id:'553d4a0727b3ee95208d3553e8e82175302ebeb9',address:'95.217.109.143:56656'},{id:'606b884008171f6fa8a475d4e63a79fb8dd77c38',address:'51.250.107.51:26656'},{id:'d2515865c79d286da7abe1007959af1b238278bf',address:'212.109.220.122:26656'},{id:'4fc4fa6ec44f6da10830ffcb6344a8635156e11e',address:'141.95.65.26:26656'},{id:'2968bf003604fc82ead6a0aea7b718d97a307892',address:'54.205.3.65:26656'},{id:'306f47eba6711ec325ddb692c988cadadb83b4b7',address:'144.126.136.22:26656'},{id:'adfcaf7a4d5b388aff901136a9d64423ef2215f9',address:'88.99.216.14:26456'},{id:'77d64fd4c97a849d781913c8fe1b737cfb31957a',address:'134.209.139.2:15656'},{id:'7362b3c4d082680aeffe137d18cea0e37cab5037',address:'146.19.24.101:26656'},{id:'5e8e8e7071259beb3b32e39cb3d2bb059cff4d66',address:'65.108.137.22:26656'},{id:'eef583258a773765e556fa723bae76d572933eaa',address:'23.88.37.143:21356'},{id:'37648e05b086bb98432a1115fdacd9ce36c70a4d',address:'142.4.216.69:26656'},{id:'ae4f04cea40f6d6047ed2baf3483b5ca6fce3482',address:'154.12.242.63:26656'},{id:'8f47445897afc72dec187d65f8cbf14f5ed5c86f',address:'88.99.166.120:26656'},{id:'201aa01ed819a3544c77b8e12343c832a20f8136',address:'49.12.189.127:26656'},{id:'8a152dd74a1f1f43895d3065686bdec7fb4510e7',address:'65.21.89.42:29656'},{id:'169a3e12d45903d961ace560a384d3bcb55092e2',address:'3.137.211.131:26656'},{id:'38f4504f74a9fd70f158270751c31a4d146f987c',address:'65.21.226.249:26616'},{id:'aa4cbf8284512c7d10dbc0542604f1fb89e1646b',address:'95.165.150.165:26956'},{id:'20dbc8f0c0fe5aeadde86976149b70e20fb2e87d',address:'95.217.73.93:24656'},{id:'7170a9a965b53966b5232fb64f02fbd260e26b82',address:'116.203.47.250:26656'},{id:'5b3c90e6c07e03ffddc5dc3aae786a2990bc5bd3',address:'148.251.81.179:26656'},{id:'7ae8a8e62efcccf15198525868b0873b3c9bd698',address:'65.108.121.37:36656'},{id:'681ffbadff88c900660d2bc6bce0920929b529f7',address:'62.171.153.122:26656'},{id:'13e82c193914d0db037566ff0e59dfd38ccf5193',address:'35.154.66.182:26656'}]},apis:{rpc:[{address:'https://rpc.assetmantle.one/',provider:'AssetMantle'},{address:'https://rpc-assetmantle.ecostake.com',provider:'ecostake'},{address:'https://assetmantle-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc.assetmantle.nodestake.top',provider:'NodeStake'},{address:'https://rpc-assetmantle-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://rpc-assetmanle.d-stake.xyz',provider:'D-stake'}],rest:[{address:'https://rest.assetmantle.one/',provider:'AssetMantle'},{address:'https://rest-assetmantle.ecostake.com',provider:'ecostake'},{address:'https://api.assetmantle.nodestake.top',provider:'NodeStake'},{address:'https://api-assetmantle-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://assetmantle-api.polkachu.com',provider:'Polkachu'},{address:'https://api-assetmanle.d-stake.xyz',provider:'D-stake'}],grpc:[{address:'https://grpc.assetmantle.nodestake.top',provider:'NodeStake'},{address:'grpc-assetmantle-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'assetmantle-grpc.polkachu.com:14690',provider:'Polkachu'},{address:'https://grpc-assetmanle.d-stake.xyz',provider:'D-stake'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/assetmantle',tx_page:'https://ezstaking.tools/assetmantle/txs/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/asset-mantle',tx_page:'https://www.mintscan.io/asset-mantle/txs/${txHash}',account_page:'https://www.mintscan.io/asset-mantle/account/${accountAddress}'},{kind:'ping.pub',url:'https://explorer.postcapitalist.io/AssetMantle',tx_page:'https://explorer.postcapitalist.io/AssetMantle/tx/${txHash}'},{kind:'other',url:'https://explorer.assetmantle.one',tx_page:'https://explorer.assetmantle.one/transactions/${txHash}'},{kind:'explorers.guru',url:'https://assetmantle.explorers.guru',tx_page:'https://assetmantle.explorers.guru/transaction/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/assetmantle',tx_page:'https://atomscan.com/assetmantle/transactions/${txHash}'}],slip44:118},{$schema:'../chain.schema.json',chain_name:'axelar',chain_id:'axelar-dojo-1',pretty_name:'Axelar',status:'live',network_type:'mainnet',website:'https://axelar.network/',bech32_prefix:'axelar',daemon_name:'axelard',node_home:'$HOME/.axelard',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'uaxl',fixed_min_gas_price:0.007}]},codebase:{git_repo:'https://github.com/axelarnetwork/axelar-core',recommended_version:'v0.29.0',compatible_versions:['v0.29.0'],binaries:{'linux/amd64':'https://github.com/axelarnetwork/axelar-core/releases/download/v0.29.0/axelard-linux-amd64-v0.29.0','darwin/amd64':'https://github.com/axelarnetwork/axelar-core/releases/download/v0.29.0/axelard-darwin-amd64-v0.29.0'},genesis:{genesis_url:'https://raw.githubusercontent.com/axelarnetwork/axelarate-community/main/resources/mainnet/genesis.json'}},peers:{seeds:[{id:'3d67d0646cddcc203b41434aceea64ade22ba6fc',address:'k8s-mainnet-axelarco-79b464ee93-f03cb16c57cf7cb2.elb.us-east-2.amazonaws.com:26656',provider:'axelar-core'},{id:'9c9b8eb8cad8648f31d3c9da3d14e825f11a7b52',address:'public-seed.mainnet.axelar.lunanova.tech:26656',provider:'lunanova'},{id:'82846f20e20dc80191bc96aa4c72321dd338faa7',address:'207.180.252.206:26656',provider:'chainode'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:15156',provider:'Polkachu'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'axelar.mainnet.seed.autostake.net:26826',provider:'AutoStake 🛡️ Slash Protected'},{id:'1e5c0b8f4431b0881edbd04537f4351bd7f19afc',address:'seeds.whispernode.com:15156',provider:'WhisperNode🤐'}],persistent_peers:[{id:'353f7d0962594bcbfb63c81594e35e39c4c89a1a',address:'18.223.127.165:26656'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'axelar.mainnet.peer.autostake.net:26826',provider:'AutoStake 🛡️ Slash Protected'}]},apis:{rpc:[{address:'https://rpc-axelar.imperator.co:443',provider:'Imperator.co'},{address:'https://axelar-rpc.quickapi.com:443',provider:'chainlayer'},{address:'https://axelar-rpc.chainode.tech:443',provider:'Chainode'},{address:'https://axelar-rpc.pops.one:443',provider:'p-ops'},{address:'https://axelar-rpc.qubelabs.io:443',provider:'Qubelabs'},{address:'https://rpc-1.axelar.nodes.guru:443',provider:'nodes.guru'},{address:'https://axelar.rpc.interchain.ivaldilabs.xyz',provider:'Ivaldi Labs'},{address:'https://rpc-axelar-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://axelar-rpc.polkachu.com',provider:'Polkachu'},{address:'https://axelar.rpc.stakin-nodes.com',provider:'Stakin'},{address:'https://rpc.axelar.bh.rocks',provider:'BlockHunters 🎯'},{address:'https://axelar-rpc.validatrium.club',provider:'Validatrium'},{address:'https://rpc-axelar.whispernode.com',provider:'WhisperNode🤐'},{address:'https://axelar-rpc.quantnode.tech/',provider:'QuantNode'}],rest:[{address:'https://lcd-axelar.imperator.co:443',provider:'Imperator.co'},{address:'https://axelar-lcd.quickapi.com:443',provider:'chainlayer'},{address:'https://axelar-rest.chainode.tech:443',provider:'Chainode'},{address:'https://axelar-lcd.qubelabs.io:443',provider:'Qubelabs'},{address:'https://api-1.axelar.nodes.guru:443',provider:'nodes.guru'},{address:'https://axelar.rest.interchain.ivaldilabs.xyz',provider:'Ivaldi Labs'},{address:'https://api-axelar-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://axelar-api.polkachu.com',provider:'Polkachu'},{address:'https://axelar.rest.stakin-nodes.com',provider:'Stakin'},{address:'https://api.axelar.bh.rocks',provider:'BlockHunters 🎯'},{address:'https://axelar-api.validatrium.club',provider:'Validatrium'},{address:'https://lcd-axelar.whispernode.com',provider:'WhisperNode🤐'},{address:'https://axelar.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'},{address:'https://axelar-lcd.quantnode.tech/',provider:'QuantNode'}],grpc:[{address:'axelar-grpc.chainode.tech',provider:'Chainode'},{address:'axelar-grpc.qubelabs.io:9092',provider:'Qubelabs'},{address:'axelar-grpc.quantnode.tech:9090',provider:'Quantnode'},{address:'services.staketab.com:9080',provider:'Staketab'},{address:'grpc-axelar-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'axelar.grpc.interchain.ivaldilabs.xyz:443',provider:'Ivaldi Labs'},{address:'axelar-grpc.polkachu.com:15190',provider:'Polkachu'},{address:'axelar.grpc.stakin-nodes.com:443',provider:'Stakin'},{address:'grpc.axelar.bh.rocks:443',provider:'BlockHunters 🎯'}],'grpc-web':[{address:'axelar-grpcweb.chainode.tech',provider:'Chainode'},{address:'axelar-grpcweb.quantnode.tech:9091',provider:'Quantnode'}]},explorers:[{kind:'axelarscan',url:'https://axelarscan.io',tx_page:'https://axelarscan.io/tx/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/axelar',tx_page:'https://www.mintscan.io/axelar/txs/${txHash}',account_page:'https://www.mintscan.io/axelar/account/${accountAddress}'},{kind:'explorers.guru',url:'https://axelar.explorers.guru',tx_page:'https://axelar.explorers.guru/transaction/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/axelar',tx_page:'https://atomscan.com/axelar/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'bandchain',status:'live',network_type:'mainnet',website:'https://bandprotocol.com/',pretty_name:'Band Protocol',chain_id:'laozi-mainnet',daemon_name:'bandd',node_home:'$HOME/.band',bech32_prefix:'band',slip44:494,codebase:{git_repo:'https://github.com/bandprotocol/chain',recommended_version:'v2.3.5',compatible_versions:['v2.3.5'],genesis:{genesis_url:'https://raw.githubusercontent.com/bandprotocol/launch/master/laozi-mainnet/genesis.json'}},peers:{seeds:[{id:'8d42bdcb6cced03e0b67fa3957e4e9c8fd89015a',address:'34.87.86.195:26656'},{id:'543e0cab9c3016a0e99775443a17bcf163038912',address:'34.150.156.78:26656'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'bandchain.mainnet.seed.autostake.net:26666',provider:'AutoStake 🛡️ Slash Protected'}],persistent_peers:[{id:'98823087b61d442a4ab86998709c77b2e517ee78',address:'35.240.152.216:26656'},{id:'3ea84babead3d6bc488810a0f2cf0744cf5c68fe',address:'34.86.22.251:26656'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'bandchain.mainnet.peer.autostake.net:26666',provider:'AutoStake 🛡️ Slash Protected'}]},apis:{rpc:[{address:'http://rpc.laozi1.bandchain.org:80',provider:'bandprotocol'},{address:'https://rpc-bandchain-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://band-rpc.ibs.team/',provider:'Inter Blockchain Services'}],rest:[{address:'https://laozi1.bandchain.org/api',provider:'bandprotocol'},{address:'https://api-bandchain-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://band-api.ibs.team/',provider:'Inter Blockchain Services'},{address:'https://bandchain.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'}],grpc:[{address:'grpc-bandchain-ia.cosmosia.notional.ventures:443',provider:'Notional'}]},explorers:[{kind:'cosmoscan',url:'https://cosmoscan.io',tx_page:'https://cosmoscan.io/tx/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/band',tx_page:'https://www.mintscan.io/band/txs${txHash}',account_page:'https://www.mintscan.io/band/account/${accountAddress}'},{kind:'ping.pub',url:'https://ping.pub/band-protocol',tx_page:'https://ping.pub/band-protocol/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/band-protocol',tx_page:'https://atomscan.com/band-protocol/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'beezee',status:'live',network_type:'mainnet',pretty_name:'BeeZee',chain_id:'beezee-1',bech32_prefix:'bze',daemon_name:'bzed',node_home:'$HOME/.bze',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'ubze',fixed_min_gas_price:0}]},codebase:{git_repo:'https://github.com/bze-alphateam/bze',recommended_version:'v5.1.2',compatible_versions:['v5.1.2'],binaries:{'darwin/amd64':'https://github.com/bze-alphateam/bze/releases/download/v5.1.2/bze-5.1.2-darwin-amd64.tar.gz','darwin/arm64':'https://github.com/bze-alphateam/bze/releases/download/v5.1.2/bze-5.1.2-darwin-arm64.tar.gz','linux/amd64':'https://github.com/bze-alphateam/bze/releases/download/v5.1.2/bze-5.1.2-linux-amd64.tar.gz','linux/arm64':'https://github.com/bze-alphateam/bze/releases/download/v5.1.2/bze-5.1.2-linux-arm64.tar.gz','windows/amd64':'https://github.com/bze-alphateam/bze/releases/download/v5.1.2/bze-5.1.2-win64.zip'},genesis:{genesis_url:'https://raw.githubusercontent.com/bze-alphateam/bze/main/genesis.json'}},peers:{seeds:[{id:'6385d5fb198e3a793498019bb8917973325e5eb7',address:'51.15.138.216:26656',provider:'AlphaTeam'}],persistent_peers:[{id:'6385d5fb198e3a793498019bb8917973325e5eb7',address:'51.15.228.169:26656',provider:'AlphaTeam'},{id:'ce25088267cef31f3be1ec03263524764c5c80bb',address:'163.172.130.162:26656',provider:'AlphaTeam'},{id:'2624d40b8861415e004d4532bb7d8d90dd0e6e66',address:'51.15.115.192:26656',provider:'AlphaTeam'},{id:'f238198a75e886a21cd0522b6b06aa019b9e182e',address:'51.15.55.142:26656',provider:'AlphaTeam'}]},apis:{rpc:[{address:'https://rpc.getbze.com',provider:'AlphaTeam'},{address:'https://rpc-1.getbze.com',provider:'AlphaTeam'},{address:'https://rpc-2.getbze.com',provider:'AlphaTeam'}],rest:[{address:'https://rest.getbze.com',provider:'AlphaTeam'},{address:'https://rest-1.getbze.com',provider:'AlphaTeam'},{address:'https://rest-2.getbze.com',provider:'AlphaTeam'}],grpc:[{address:'144.91.122.246:9999',provider:'AlphaTeam'}]},explorers:[{kind:'ping.pub',url:'https://explorers.vidulum.app/beezee',tx_page:'https://explorers.vidulum.app/beezee/tx/${txHash}'},{kind:'ping.pub',url:'https://explorer.erialos.me/beezee',tx_page:'https://explorer.erialos.me/beezee/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'bitcanna',status:'live',network_type:'mainnet',website:'https://www.bitcanna.io/',pretty_name:'BitCanna',chain_id:'bitcanna-1',bech32_prefix:'bcna',daemon_name:'bcnad',node_home:'$HOME/.bcna',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'ubcna',fixed_min_gas_price:0.001}]},codebase:{git_repo:'https://github.com/BitCannaGlobal/bcna',recommended_version:'v1.5.3',compatible_versions:['v1.5.3'],binaries:{'linux/amd64':'https://github.com/BitCannaGlobal/bcna/releases/download/v1.5.3/bcnad'},genesis:{genesis_url:'https://raw.githubusercontent.com/BitCannaGlobal/bcna/main/genesis.json'}},peers:{seeds:[{id:'d6aa4c9f3ccecb0cc52109a95962b4618d69dd3f',address:'seed1.bitcanna.io:26656',provider:'bitcanna'},{id:'23671067d0fd40aec523290585c7d8e91034a771',address:'seed2.bitcanna.io:26656',provider:'bitcanna'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:13056',provider:'Polkachu'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:13056',provider:'Lavender.Five Nodes 🐝'},{id:'f0e6c86d769bf5c52f78e01864091690e731643f',address:'bitcanna-seed.panthea.eu:37656',provider:'Panthea EU'}],persistent_peers:[{id:'21484408a7bcf0134689ddf52a7d9c8299cb65b5',address:'176.9.139.74:36656',provider:'BitCanna'},{id:'3cdfe02efd4432280707d2949e064a9d8db412b3',address:'178.62.98.158:26656',provider:'Stakely'},{id:'d806bb39349751c142627a547c23c586a787ef26',address:'138.68.78.210:26656',provider:'Stakely'},{id:'ddb620e7c7a6b5a8a53352037cde927681012ab4',address:'65.21.229.209:37656',provider:'Blockscope'},{id:'df99de6cec9152c517990317b340b8b9a307493c',address:'193.34.144.156:26656',provider:'ParanormalBrothers'},{id:'0a658df9d9fab096983a12e6f878e87281a15ce6',address:'bitcanna-peer.panthea.eu:27656',provider:'Panthea EU'},{id:'57a3e858a5c860e6355683c88add28d52df6c24a',address:'38.242.232.202:26656',provider:'Inter Blockchain Services'}]},apis:{rpc:[{address:'https://rpc.bitcanna.io/',provider:'bitcanna'},{address:'http://bcna.paranorm.pro/',provider:'ParanormalBrothers'},{address:'https://bitcanna-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc-bitcanna-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://bitcanna-rpc.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://bcna-rpc.ibs.team/',provider:'Inter Blockchain Services'},{address:'https://bitcanna-rpc.panthea.eu',provider:'Panthea EU'},{address:'https://bitcanna.nodejumper.io',provider:'Nodejumper 🚀'},{address:'https://rpc-bcna.kjinc.io/',provider:'KJINC.io'}],grpc:[{address:'https://grpc.bitcanna.io',provider:'bitcanna'},{address:'grpc-bitcanna-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'bitcanna-grpc.polkachu.com:13090',provider:'Polkachu'},{address:'https://bitcanna-grpc.lavenderfive.com:443/',provider:'Lavender.Five Nodes 🐝'},{address:'https://bitcanna.nodejumper.io:9090',provider:'Nodejumper 🚀'}],rest:[{address:'https://lcd.bitcanna.io',provider:'bitcanna'},{address:'https://api-bitcanna-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://bitcanna-api.polkachu.com',provider:'Polkachu'},{address:'https://bitcanna-api.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://bcna-api.ibs.team/',provider:'Inter Blockchain Services'},{address:'https://bitcanna-api.panthea.eu',provider:'Panthea EU'},{address:'https://bitcanna.nodejumper.io:1317',provider:'Nodejumper 🚀'},{address:'https://api-bcna.kjinc.io/',provider:'KJINC.io'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/bitcanna',tx_page:'https://ezstaking.tools/bitcanna/txs/${txHash}'},{kind:'forbole',url:'https://cosmos-explorer.bitcanna.io',tx_page:'https://cosmos-explorer.bitcanna.io/transactions/${txHash}'},{kind:'ping.pub',url:'https://ping.pub/bitcanna',tx_page:'https://ping.pub/bitcanna/tx/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/bitcanna/',tx_page:'https://www.mintscan.io/bitcanna/txs/${txHash}',account_page:'https://www.mintscan.io/bitcanna/account/${accountAddress}'},{kind:'atomscan',url:'https://atomscan.com/bitcanna',tx_page:'https://atomscan.com/bitcanna/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'bitsong',status:'live',network_type:'mainnet',website:'https://bitsong.io/',pretty_name:'BitSong',chain_id:'bitsong-2b',bech32_prefix:'bitsong',slip44:639,daemon_name:'bitsongd',node_home:'$HOME/.bitsongd',codebase:{git_repo:'https://github.com/bitsongofficial/go-bitsong',recommended_version:'v0.12.0',compatible_versions:['v0.12.0'],genesis:{genesis_url:'https://raw.githubusercontent.com/bitsongofficial/networks/master/bitsong-2b/genesis.json'}},fees:{fee_tokens:[{denom:'ubtsg',fixed_min_gas_price:0}]},peers:{persistent_peers:[{id:'a62038142844828483dbf16fa6dd159f6857c81b',address:'173.212.247.98:26656'},{id:'e9fea0509b1a2d16a10ef9fdea0a4e3edc7ca485',address:'185.144.83.158:26656'},{id:'8208adac8b09f3e2499dfaef24bb89a2d190a7a3',address:'164.68.109.246:26656'},{id:'cf031ac1cf44c9c311b5967712899391a434da9a',address:'161.97.97.61:26656'},{id:'d6b2ae82c38927fa7b7630346bd84772e632983a',address:'157.90.95.104:15631'},{id:'a5885669c1f7860bfe28071a7ec00cc45b2fcbc3',address:'144.91.85.56:26656'},{id:'325a5920a614e2375fea90f8a08d8b8d612fdd1e',address:'137.74.18.30:26656'},{id:'ae2787a337c3599b16410f3ac09d6918da2e5c37',address:'46.101.238.149:26656'},{id:'9336f75cd99ff6e5cdb6335e8d1a2c91b81d84b9',address:'65.21.0.232:26656'},{id:'9c6e52e78f112a55146b09110d1d1be47702df27',address:'135.181.211.184:36656'},{id:'2cd6bb75fc9279c62c0ef3af82fbe08632743472',address:'bitsong-peer.panthea.eu:31656',provider:'Panthea EU'}],seeds:[{id:'ffa27441ca78a5d41a36f6d505b67a145fd54d8a',address:'95.217.156.228:26656'},{id:'efd52c1e56b460b1f37d73c8d2bd5f860b41d2ba',address:'65.21.62.83:26656'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:16056',provider:'Lavender.Five Nodes 🐝'},{id:'10de6c207e60b876bdd88571db44d29c18d0cb5d',address:'seed-bitsong.starsquid.io:15605',provider:'Starsquid'},{id:'8defec7d0eec97f507411e02fd2634e3efc997a2',address:'bitsong-seed.panthea.eu:41656',provider:'Panthea EU'}]},apis:{rpc:[{address:'https://rpc-bitsong.itastakers.com',provider:'itastakers'},{address:'https://rpc.bitsong.interbloc.org',provider:'interbloc'},{address:'https://rpc-bitsong-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://rpc.explorebitsong.com',provider:'stake.systems'},{address:'https://bitsong-rpc.validatrium.club',provider:'Validatrium'},{address:'https://bitsong-archive.validatrium.club',provider:'Validatrium',archive:true},{address:'https://rpc.bitsong.chaintools.tech/',provider:'ChainTools'},{address:'https://rpc.bitsong.freak12techno.io/',provider:'freak12techno'},{address:'https://bitsong-rpc.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://rpc-bitsong.starsquid.io',provider:'Starsquid'},{address:'https://bitsong-rpc.panthea.eu',provider:'Panthea EU'},{address:'https://rpc-bitsong.architectnodes.com',provider:'Architect Nodes'}],rest:[{address:'https://lcd-bitsong.itastakers.com',provider:'itastakers'},{address:'https://api.bitsong.interbloc.org',provider:'interbloc'},{address:'https://api-bitsong-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://lcd.explorebitsong.com/',provider:'stake.systems'},{address:'https://bitsong-api.validatrium.club',provider:'Validatrium'},{address:'https://api.bitsong.chaintools.tech/',provider:'ChainTools'},{address:'https://api.bitsong.freak12techno.io/',provider:'freak12techno'},{address:'https://bitsong-api.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://api-bitsong.starsquid.io',provider:'Starsquid'},{address:'https://bitsong-api.panthea.eu',provider:'Panthea EU'},{address:'https://rest-bitsong.architectnodes.com',provider:'Architect Nodes'}],grpc:[{address:'grpc-bitsong-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'bitsong.stakesystems.io:2083',provider:'stake.systems'},{address:'https://bitsong-grpc.lavenderfive.com:443/',provider:'Lavender.Five Nodes 🐝'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/bitsong',tx_page:'https://ezstaking.tools/bitsong/txs/${txHash}'},{kind:'ping.pub',url:'https://ping.pub/bitsong',tx_page:'https://ping.pub/bitsong/tx/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/bitsong',tx_page:'https://www.mintscan.io/bitsong/txs/${txHash}',account_page:'https://www.mintscan.io/bitsong/account/${accountAddress}'},{kind:'bigdipper',url:'https://explorebitsong.com',tx_page:'https://explorebitsong.com/transactions/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/bitsong',tx_page:'https://atomscan.com/bitsong/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'bostrom',status:'live',network_type:'mainnet',pretty_name:'bostrom',chain_id:'bostrom',bech32_prefix:'bostrom',daemon_name:'cyber',node_home:'$HOME/.cyber',slip44:118,codebase:{git_repo:'https://github.com/cybercongress/go-cyber',recommended_version:'v0.3.0',compatible_versions:['v0.3.0'],binaries:{'linux/amd64':'https://github.com/cybercongress/go-cyber/releases/download/v0.2.0/cyber_v0.2.0_linux-amd64.tar.gz','darwin/amd64':'https://github.com/cybercongress/go-cyber/releases/download/v0.2.0/cyber_v0.2.0_darwin-amd64.tar.gz'},genesis:{genesis_url:'https://cloudflare-ipfs.com/ipfs/QmYubyVNfghD4xCrTFj26zBwrF9s5GJhi1TmxvrwmJCipr'}},peers:{seeds:[{id:'d0518ce9881a4b0c5872e5e9b7c4ea8d760dad3f',address:'85.10.207.173:26656',provider:'cybercongress'}],persistent_peers:[{id:'5d542c0eb40ae48dc2cac0c140aedb605ded77dc',address:'195.201.105.229:26656'},{id:'c72de1e20beed51b779d89b1cf08d8146016eec4',address:'185.186.208.37:26656'},{id:'4c130ed1c58f6d6be981c59a748511e581969c51',address:'93.180.175.201:36656'},{id:'df79a86dc236b8dff250c402e95cd6853e8ad7c4',address:'46.166.165.4:26656'},{id:'39a20a7d84c6e91c6638f5a685a13f655e050ee0',address:'176.37.214.146:26656'},{id:'77d27615009fc703ece46901792cc8750cccd0de',address:'185.230.90.71:26656'},{id:'dd22cffccafaece970cfa9e7eb3c8468f6fa1c84',address:'46.166.165.14:26656'},{id:'5e8522bef5ceca507e05aa0d5f67f37a70222c73',address:'185.230.90.202:26656'},{id:'55937c36959ea3984cc6e6ebd3354d73bbbdbcda',address:'95.165.24.115:26656'}]},apis:{rpc:[{address:'https://rpc.bostrom.cybernode.ai',provider:'cybercongress'},{address:'https://rpc.cyber.posthuman.digital',provider:'posthuman'},{address:'https://rpc-cyber-ia.cosmosia.notional.ventures/',provider:'Notional'}],rest:[{address:'https://lcd.bostrom.cybernode.ai',provider:'cybercongress'},{address:'https://lcd.cyber.posthuman.digital',provider:'posthuman'},{address:'https://api-cyber-ia.cosmosia.notional.ventures/',provider:'Notional'}],grpc:[{address:'grpc-cyber-ia.cosmosia.notional.ventures:443',provider:'Notional'}]},explorers:[{kind:'cyb',url:'https://cyb.ai/',tx_page:'https://cyb.ai/network/bostrom/tx/${txHash}'},{kind:'ping.pub',url:'https://ping.pub/bostrom',tx_page:'https://ping.pub/bostrom/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/bostrom',tx_page:'https://atomscan.com/bostrom/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'canto',status:'live',network_type:'mainnet',pretty_name:'Canto',chain_id:'canto_7700-1',bech32_prefix:'canto',node_home:'$HOME/.cantod',daemon_name:'cantod',slip44:60,fees:{fee_tokens:[{denom:'acanto',fixed_min_gas_price:0,low_gas_price:10000000000,average_gas_price:25000000000,high_gas_price:40000000000}]},staking:{staking_tokens:[{denom:'acanto'}]},codebase:{git_repo:'https://github.com/Canto-Network/Canto',recommended_version:'v2.0.0',compatible_versions:['v2.0.0'],genesis:{genesis_url:'https://raw.githubusercontent.com/Canto-Network/Canto/genesis/Networks/Mainnet/genesis.json'}},peers:{seeds:[{id:'9361d2cfb283da656b14eaf27e64d96cb86706f0',address:'167.71.170.71:26656',provider:'Plex'},{id:'0830aa240e139fba099d1c2e831be84ecb29b73f',address:'43.205.108.200:26656',provider:'Unknown'},{id:'beb82dcef7adcc3f8bc4173fa57bd310f6a6a55a',address:'138.197.134.149:26656',provider:'Unknown'},{id:'baee0ce941a956e61c1e06574b75f390ac14881d',address:'143.110.236.188:26656',provider:'Unknown'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:15556',provider:'Polkachu'},{id:'706e81c8c99e5d0cf37432df5f972818339f19b5',address:'34.122.124.28:26656',provider:'Unknown'}],persistent_peers:[{id:'9361d2cfb283da656b14eaf27e64d96cb86706f0',address:'167.71.170.71:26656',provider:'Plex'}]},apis:{rpc:[{address:'http://164.90.154.41:26657',provider:'Canto'},{address:'https://rpc.canto.nodestake.top',provider:'NodeStake'},{address:'https://canto-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc.canto.silentvalidator.com/',provider:'silent'}],rest:[{address:'http://164.90.154.41:1317',provider:'Canto'},{address:'https://api.canto.nodestake.top',provider:'NodeStake'},{address:'https://canto-api.polkachu.com',provider:'Polkachu'},{address:'https://api.canto.silentvalidator.com/',provider:'silent'}],grpc:[{address:'canto-grpc.polkachu.com:15590',provider:'Polkachu'},{address:'https://grpc.canto.nodestake.top',provider:'NodeStake'},{address:'https://grpc.canto.silentvalidator.com/',provider:'silent'}],'evm-http-jsonrpc':[{address:'https://canto.neobase.one/',provider:'NeoBase'},{address:'https://canto.evm.chandrastation.com',provider:'Chandra Station'},{address:'https://canto.slingshot.finance',provider:'Slingshot'},{address:'https://jsonrpc.canto.nodestake.top',provider:'NodeStake'},{address:'https://evm-rpc.canto.silentvalidator.com/',provider:'silent'}]},explorers:[{kind:'bigdipper',url:'https://cosmos.explorer.canto.io',tx_page:'https://cosmos.explorer.canto.io/transactions/${txHash}'},{kind:'blockscout',url:'https://https://evm.explorer.canto.io/',tx_page:'https://evm.explorer.canto.io/tx/${txHash}'},{kind:'ping.pub',url:'https://cosmos-explorers.neobase.one/canto',tx_page:'https://cosmos-explorers.neobase.one/canto/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'carbon',status:'live',network_type:'mainnet',pretty_name:'Carbon',chain_id:'carbon-1',bech32_prefix:'swth',daemon_name:'carbond',node_home:'$HOME/.carbond',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'swth',fixed_min_gas_price:0,low_gas_price:769.23077,average_gas_price:769.23077,high_gas_price:769.230774}]},staking:{staking_tokens:[{denom:'swth'}]},codebase:{git_repo:'https://github.com/Switcheo/carbon-bootstrap',recommended_version:'v2.15.6',compatible_versions:['v2.15.6'],binaries:{'linux/amd64':'https://github.com/Switcheo/carbon-bootstrap/releases/download/v2.15.6/carbond2.15.6-mainnet.linux-amd64.tar.gz','linux/arm64':'https://github.com/Switcheo/carbon-bootstrap/releases/download/v2.15.6/carbond2.15.6-mainnet.linux-arm64.tar.gz'},genesis:{genesis_url:'https://github.com/Switcheo/carbon-bootstrap/raw/master/carbon-1/genesis.json'}},peers:{seeds:[{id:'d93ed6a1f43dd0904dc5e2ab8680d4049b057b17',address:'13.215.17.91:26656',provider:'switcheo-labs'},{id:'70581c625fc1933bc273ca7a8d5e9ded3d1bcc97',address:'13.213.113.113:26656',provider:'switcheo-labs'},{id:'e3f02a9f3ca22724b3a67bba9183113645c9c7d9',address:'54.179.11.177:26656',provider:'switcheo-labs'}],persistent_peers:[{id:'b638cc8fc5b3d7867281081efce15e5a989339ac',address:'188.166.191.195:26656',provider:'intsol'},{id:'aa238fc5a6b3f2a305a4ffb56a636ce14adce371',address:'alice.peers.carbon.bh.rocks:26656',provider:'BlockHunters'}]},apis:{rpc:[{address:'https://tm-api.carbon.network',provider:'switcheo-labs'},{address:'https://rpc.carbon.bh.rocks',provider:'BlockHunters'}],rest:[{address:'https://api.carbon.network',provider:'switcheo-labs'},{address:'https://rest.carbon.bh.rocks',provider:'BlockHunters'}]},explorers:[{kind:'carbonscan',url:'https://scan.carbon.network',tx_page:'https://scan.carbon.network/transaction/${txHash}?net=main'}]},{$schema:'../chain.schema.json',chain_name:'cerberus',status:'live',network_type:'mainnet',website:'https://cerberus.zone/',pretty_name:'Cerberus',chain_id:'cerberus-chain-1',bech32_prefix:'cerberus',daemon_name:'cerberusd',node_home:'$HOME/.cerberus',codebase:{git_repo:'https://github.com/cerberus-zone/cerberus',recommended_version:'v3.0.1',compatible_versions:['v3.0.1'],genesis:{genesis_url:'https://raw.githubusercontent.com/cerberus-zone/cerberus_genesis/main/genesis.json'}},fees:{fee_tokens:[{denom:'ucrbrus',fixed_min_gas_price:0}]},peers:{seeds:[{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:13856',provider:'Polkachu'},{id:'d94df4d4a17fa10834bb97853d91b501aa4abc4b',address:'cerberus-seed.panthea.eu:38656',provider:'Panthea EU'}],persistent_peers:[{id:'d8a04beba9fb95c70368b303f701c36b4e3b4a63',address:'185.215.165.29:26656'},{id:'aaa2eba32286074fb575a48e033ac2ba7f4c94e6',address:'98.113.93.139:26661'},{id:'89ee9a502d4d84e5632a1f5b17cbedfb0aaae088',address:'116.202.133.77:26656'},{id:'1d7be8ba88c4d1d36d94f493b31018b832ecb5be',address:'116.202.223.110:26656'},{id:'7bc4a76ea8ada51695bb2797ae24eec011f4bb86',address:'194.163.175.85:26656'},{id:'17e1441d760583ab5cf79a93ea01ced685948bf7',address:'168.119.110.93:26656'},{id:'d7f578c4295c7cf05164a2f786601050bf2f2356',address:'142.132.202.98:46656',provider:'ecostake'},{id:'21cca2db122c48a11f426799131ef08235d46671',address:'148.251.177.45:10656'},{id:'bae90c7f3aca48e7ae8b3e28dc3b01a2143f068e',address:'194.163.169.187:26656'},{id:'2cee125f1f1d852b08ef3530154da2eb54ed72ac',address:'66.94.127.8:26656'},{id:'081e114c7452e3b148cc1a796d75f702b60b0219',address:'85.237.192.125:26656'},{id:'22e0968f91aba1b3d4d9ad2db2ae47af8cc0a81a',address:'34.139.66.39:26656'},{id:'c346db0db91a940e87e9ae7df28c3d4947672f54',address:'65.108.121.239:26656'},{id:'5180ecb20880706a14f99b8982f37a5c23da21ec',address:'65.21.235.249:26656'},{id:'f03e64d46713068da60b096d528053a57e0e5fec',address:'157.90.36.33:29563'},{id:'ab4fe77e992354fb1c384e4eadbc05427446ada7',address:'cerberus-peer.panthea.eu:28656',provider:'Panthea EU'}]},apis:{rpc:[{address:'https://rpc.cerberus.zone:26657/',provider:'Cerberus'},{address:'https://rpc-cerberus.ecostake.com',provider:'ecostake'},{address:'https://cerberus-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc-cerberus-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://cerberus-rpc.kleomedes.network',provider:'Kleomedes'},{address:'https://cerberus-rpc.panthea.eu',provider:'Panthea EU'}],rest:[{address:'https://api.cerberus.zone:1317/',provider:'Cerberus'},{address:'https://rest-cerberus.ecostake.com',provider:'ecostake'},{address:'https://api-cerberus-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://cerberus-api.polkachu.com',provider:'Polkachu'},{address:'https://cerberus-api.kleomedes.network',provider:'Kleomedes'},{address:'https://cerberus-api.panthea.eu',provider:'Panthea EU'}],grpc:[{address:'grpc-cerberus-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'cerberus-grpc.polkachu.com:13890',provider:'Polkachu'}]},explorers:[{kind:'skynetexplorers',url:'https://skynetexplorers.com/cerberus',tx_page:'https://skynetexplorers.com/cerberus/tx/${txHash}'},{kind:'ping.pub',url:'https://ping.pub/cerberus',tx_page:'https://ping.pub/cerberus/tx/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/cerberus',tx_page:'https://www.mintscan.io/cerberus/txs/${txHash}',account_page:'https://www.mintscan.io/cerberus/account/${accountAddress}'},{kind:'atomscan',url:'https://atomscan.com/cerberus',tx_page:'https://atomscan.com/cerberus/transactions/${txHash}'},{kind:'TC Network',url:'https://explorer.tcnetwork.io/cerberus',tx_page:'https://explorer.tcnetwork.io/cerberus/transaction/${txHash}'}],slip44:118},{$schema:'../chain.schema.json',chain_name:'chain4energy',status:'live',network_type:'mainnet',website:'https://c4e.io/',pretty_name:'Chain4Energy',chain_id:'perun-1',bech32_prefix:'c4e',daemon_name:'c4ed',node_home:'$HOME/.c4e-chain',key_algos:['secp256k1'],slip44:4444,fees:{fee_tokens:[{denom:'uc4e',fixed_min_gas_price:0}]},codebase:{git_repo:'https://github.com/chain4energy/c4e-chain',recommended_version:'v1.0.0',compatible_versions:['v1.0.0'],genesis:{genesis_url:'https://raw.githubusercontent.com/chain4energy/c4e-chains/main/perun-1/genesis.json'}},peers:{persistent_peers:[{id:'5b62ff6035d9c8143c0ebf4fe05fa0b22d96bb05',address:'rpc.c4e.ppnv.space:13656',provider:'PPNV Service'},{id:'084a5c788c9c61541152192d7dfe055c153af642',address:'node1.c4e.io:26656',provider:'C4E'},{id:'81a3c179ee820d291adebc215d5d1af95b887ec8',address:'node2.c4e.io:26656',provider:'C4E'},{id:'3c6553a3c45477c2a9902e54069bee7109318b9d',address:'node3.c4e.io:26656',provider:'C4E'},{id:'68a611fc1d17612e4de6b1232d04568ea3c20a19',address:'node4.c4e.io:26656',provider:'C4E'}],seeds:[{id:'30e98bbcf5bb29ed4e4ff685fa8fa84fa0ddff51',address:'tenderseed.ccvalidators.com:26008',provider:'CryptoCrew'}]},apis:{rpc:[{address:'http://rpc.c4e.ppnv.space:13657',provider:'PPNV Service'},{address:'https://rpc.c4e.io/',provider:'C4E'},{address:'https://rpc.c4e.nodestake.top',provider:'NodeStake'},{address:'https://m-c4e.rpc.utsa.tech',provider:'lesnik | UTSA'},{address:'https://rpc-c4e.d-stake.xyz',provider:'D-Stake'},{address:'https://rpc-c4e.nodeist.net',provider:'Nodeist'},{address:'https://c4e.rpc.bccnodes.com',provider:'BccNodes'}],rest:[{address:'https://api.c4e.ppnv.space',provider:'PPNV Service'},{address:'https://lcd.c4e.io/',provider:'C4E'},{address:'https://api-c4e.d-stake.xyz',provider:'D-Stake'},{address:'https://api.c4e.nodestake.top',provider:'NodeStake'},{address:'https://m-c4e.api.utsa.tech',provider:'lesnik | UTSA'},{address:'https://api-c4e.nodeist.net',provider:'Nodeist'},{address:'https://c4e.api.bccnodes.com',provider:'BccNodes'}],grpc:[{address:'http://grpc.c4e.ppnv.space:13090',provider:'PPNV Service'},{address:'https://grpc.c4e.io/',provider:'C4E'},{address:'https://grpc.c4e.nodestake.top',provider:'NodeStake'},{address:'https://grpc-c4e.d-stake.xyz',provider:'D-Stake'},{address:'https://grpc-c4e.nodeist.net',provider:'Nodeist'},{address:'https://c4e.grpc.bccnodes.com:9090',provider:'BccNodes'}]},explorers:[{kind:'explorer',url:'https://explorer.ppnv.space/c4e',tx_page:'https://explorer.ppnv.space/c4e/transactions/${txHash}'},{kind:'explorer',url:'https://explorer.c4e.io/',tx_page:'https://explorer.c4e.io/transactions/${txHash}'},{kind:'NodeStake Explorer',url:'https://explorer.nodestake.top/chain4energy',tx_page:'https://explorer.nodestake.top/chain4energy/transactions/${txHash}'},{kind:'lesnik | UTSA Explorer',url:'https://exp.utsa.tech/c4e',tx_page:'https://exp.utsa.tech/c4e/tx/${txHash}'},{kind:'Nodeist Explorer',url:'https://exp.nodeist.net/m-c4e',tx_page:'https://exp.nodeist.net/m-c4e/transactions/${txHash}'},{kind:'BccNodes Explorer',url:'https://explorer.bccnodes.com/chain4energy',tx_page:'https://explorer.bccnodes.com/chain4energy/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'cheqd',status:'live',network_type:'mainnet',website:'https://www.cheqd.io/',pretty_name:'cheqd',chain_id:'cheqd-mainnet-1',bech32_prefix:'cheqd',daemon_name:'cheqd-noded',node_home:'$HOME/.cheqdnode',slip44:118,fees:{fee_tokens:[{denom:'ncheq',fixed_min_gas_price:25,low_gas_price:25,average_gas_price:50,high_gas_price:100}]},staking:{staking_tokens:[{denom:'ncheq'}]},codebase:{git_repo:'https://github.com/cheqd/cheqd-node',recommended_version:'v0.6.9',compatible_versions:['v0.6.9','v0.6.8','v0.6.7','v0.6.1','v0.6.0'],binaries:{'linux/amd64':'https://github.com/cheqd/cheqd-node/releases/download/0.6.9/cheqd-noded-0.6.9-Linux-arm64.tar.gz','linux/arm64':'https://github.com/cheqd/cheqd-node/releases/download/0.6.9/cheqd-noded-0.6.9-Linux-x86_64.tar.gz'},cosmos_sdk_version:'0.45',tendermint_version:'0.34',genesis:{genesis_url:'https://raw.githubusercontent.com/cheqd/cheqd-node/main/networks/mainnet/genesis.json'}},peers:{seeds:[{id:'258a9bfb822637bfca87daaab6181c10e7fd0910',address:'seed1.eu.cheqd.net:26656',provider:'cheqd'},{id:'f565ff792b20977face9817df6acb268d41d4092',address:'seed2.eu.cheqd.net:26656',provider:'cheqd'},{id:'388947cc7d901c5c06fedc4c26751634564d68e6',address:'seed3.eu.cheqd.net:26656',provider:'cheqd'},{id:'9b30307a2a2819790d68c04bb62f5cf4028f447e',address:'seed1.ap.cheqd.net:26656',provider:'cheqd'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:16156',provider:'Lavender.Five Nodes 🐝'},{id:'d8676573a3718c05d3d0d07906f3604a9e3a034d',address:'seeds.whispernode.com:16156',provider:'WhisperNode🤐'}],persistent_peers:[{id:'d1ebb60825e2c29181b499f93493dd440fb87997',address:'sentry1.eu.cheqd.net:26656',provider:'cheqd'},{id:'513d334bb044296796939e57b522fef7fd4b9c6c',address:'sentry2.eu.cheqd.net:26656',provider:'cheqd'},{id:'9201b408d24941fd342e739f0814aa3eb8ab7577',address:'sentry1.ap.cheqd.net:26656',provider:'cheqd'}]},apis:{rpc:[{address:'https://rpc.cheqd.net',provider:'cheqd'},{address:'https://cheqd-rpc.lavenderfive.com:443',provider:'Lavender.Five Nodes'},{address:'https://rpc-cheqd-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://rpc.cheqd.nodestake.top',provider:'NodeStake'}],rest:[{address:'https://api.cheqd.net',provider:'cheqd'},{address:'https://cheqd-api.lavenderfive.com:443',provider:'Lavender.Five Nodes'},{address:'https://api-cheqd-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://api.cheqd.nodestake.top',provider:'NodeStake'}],grpc:[{address:'grpc.cheqd.net:443',provider:'cheqd'},{address:'https://cheqd-grpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'grpc-cheqd-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'https://grpc.cheqd.nodestake.top',provider:'NodeStake'}]},explorers:[{kind:'bigdipper',url:'https://explorer.cheqd.io/',tx_page:'https://explorer.cheqd.io/transactions/${txHash}'},{kind:'ping.pub',url:'https://ping.pub/cheqd',tx_page:'https://ping.pub/cheqd/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/cheqd',tx_page:'https://atomscan.com/cheqd/transactions/${txHash}',account_page:'https://atomscan.com/cheqd/accounts/${accountAddress}'},{kind:'ezstaking',url:'https://ezstaking.tools/cheqd',tx_page:'https://ezstaking.tools/cheqd/txs/${txHash}'},{kind:'ping.pub',url:'https://look.chillvalidation.com/cheqd',tx_page:'https://look.chillvalidation.com/cheqd/tx/${txHash}'},{kind:'ping.pub',url:'https://ping.wildsage.io/cheqd',tx_page:'https://ping.wildsage.io/cheqd/tx/${txHash}'}],logo_URIs:{png:'https://raw.githubusercontent.com/cosmos/chain-registry/master/cheqd/images/cheq.png',svg:'https://raw.githubusercontent.com/cosmos/chain-registry/master/cheqd/images/cheq.svg'}},{$schema:'../chain.schema.json',chain_name:'chihuahua',status:'live',network_type:'mainnet',website:'https://chihuahua.wtf/',pretty_name:'Chihuahua',chain_id:'chihuahua-1',bech32_prefix:'chihuahua',daemon_name:'chihuahuad',node_home:'$HOME/.chihuahuad',fees:{fee_tokens:[{denom:'uhuahua',fixed_min_gas_price:0,low_gas_price:1,average_gas_price:5,high_gas_price:10}]},staking:{staking_tokens:[{denom:'uhuahua'}]},codebase:{git_repo:'https://github.com/ChihuahuaChain/chihuahua/',recommended_version:'v4.1.0',compatible_versions:['v4.1.0'],genesis:{genesis_url:'https://raw.githubusercontent.com/ChihuahuaChain/chihuahua/main/mainnet/genesis.json'}},peers:{seeds:[{id:'babc3f3f7804933265ec9c40ad94f4da8e9e0017',address:'seed.rhinostake.com:12956',provider:'RHINO'},{id:'4936e377b4d4f17048f8961838a5035a4d21240c',address:'chihuahua-seed-01.mercury-nodes.net:29540'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:12956',provider:'Polkachu'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:12956',provider:'Lavender.Five Nodes 🐝'},{id:'77cbb35d1df17f48a42e9f157f12f55b691e9f5e',address:'seeds.goldenratiostaking.net:1620',provider:'Golden Ratio Staking'},{id:'3c5b1a13f810507b9ef1240372b3cbc9bd90da26',address:'seeds.whispernode.com:12956',provider:'WhisperNode🤐'}],persistent_peers:[{id:'b140eb36b20f3d201936c4757d5a1dcbf03a42f1',address:'216.238.79.138:26656',provider:'artifact'},{id:'19900e1d2b10be9c6672dae7abd1827c8e1aad1e',address:'161.97.96.253:26656',provider:'StakeLab'},{id:'c382a9a0d4c0606d785d2c7c2673a0825f7c53b2',address:'88.99.94.120:26656',provider:'Chihuahua'},{id:'a5dfb048e4ed5c3b7d246aea317ab302426b37a1',address:'137.184.250.180:26656',provider:'CHILL'},{id:'3bad0326026ca4e29c64c8d206c90a968f38edbe',address:'128.199.165.78:26656',provider:'KingNodes'},{id:'89b576c3eb72a4f0c66dc0899bec7c21552ea2a5',address:'23.88.7.73:29538',provider:'Mercury'},{id:'38547b7b6868f93af1664d9ab0e718949b8853ec',address:'54.184.20.240:30758',provider:'0base.vc'}]},apis:{rpc:[{address:'https://rpc.chihuahua.wtf/',provider:'Chihuahua'},{address:'https://rpc-chihuahua.ecostake.com',provider:'ecostake'},{address:'https://chihuahua-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc-chihuahua-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://chihuahua-rpc.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://rpc.chihuahua.goldenratiostaking.net',provider:'Golden Ratio Staking'},{address:'https://rpc.huahua.bh.rocks',provider:'BlockHunters 🎯'},{address:'https://chihuahua-rpc.kleomedes.network',provider:'Kleomedes'},{address:'https://rpc-chihuahua.pupmos.network/',provider:'PUPMØS'}],rest:[{address:'https://api.chihuahua.wtf/',provider:'Chihuahua'},{address:'https://rest-chihuahua.ecostake.com',provider:'ecostake'},{address:'https://api-chihuahua-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://chihuahua-api.polkachu.com',provider:'Polkachu'},{address:'https://chihuahua-api.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://api.huahua.bh.rocks/',provider:'BlockHunters 🎯'},{address:'https://chihuahua-api.kleomedes.network',provider:'Kleomedes'},{address:'https://api-chihuahua.pupmos.network/',provider:'PUPMØS'}],grpc:[{address:'grpc-chihuahua-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'chihuahua-grpc.polkachu.com:12990',provider:'Polkachu'},{address:'https://chihuahua-grpc.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'grpc.huahua.bh.rocks:443',provider:'BlockHunters 🎯'}]},explorers:[{kind:'ping.pub',url:'https://ping.pub/chihuahua',tx_page:'https://ping.pub/chihuahua/tx/${txHash}'},{kind:'mintscan',url:'https://mintscan.io/chihuahua',tx_page:'https://mintscan.io/chihuahua/txs/${txHash}',account_page:'https://www.mintscan.io/chihuahua/account/${accountAddress}'},{kind:'atomscan',url:'https://atomscan.com/chihuahua',tx_page:'https://atomscan.com/chihuahua/transactions/${txHash}'}],slip44:118},{$schema:'../chain.schema.json',chain_name:'chronicnetwork',status:'live',network_type:'mainnet',pretty_name:'Chronic Chain',chain_id:'morocco-1',bech32_prefix:'chronic',daemon_name:'chtd',node_home:'$HOME/.cht',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'ucgas',fixed_min_gas_price:0.001}]},codebase:{git_repo:'https://github.com/ChronicNetwork/cht',recommended_version:'v1.1.0',compatible_versions:['v1.1.0'],binaries:{'linux/amd64':'https://github.com/ChronicNetwork/cht/releases/download/v.1.1.0/cht'},genesis:{genesis_url:'https://raw.githubusercontent.com/ChronicNetwork/net/main/mainnet/v1.1/genesis.json'}},peers:{seeds:[{id:'ba4c7434bdb00f49b26450242713d52e7c6c8f73',address:'147.182.180.205:26656',provider:'Third Party'}],persistent_peers:[{id:'9dd99f5aaebac6027e842a5678c2ad2663942506',address:'185.16.39.128:26456',provider:'StingRay'},{id:'694ddedde37bb211c827834e27e39d4c85f36f5f',address:'46.4.119.90:46656',provider:'Chill Validation'},{id:'31cc2cd1735ff7b51bb44dada4d984741208fc39',address:'65.21.88.252:29656',provider:'hdmiidmh'},{id:'998340bc75690a0479fa028f5bdf275b829b9f1a',address:'65.21.132.226:28656',provider:'Blockscope.net'},{id:'4e9a1be76e5f2bf6c34748b85aed0cedca892cc8',address:'143.244.182.230:26656',provider:'xiti'}]},apis:{rpc:[{address:'https://rpc.chronic.nodestake.top/',provider:'NodeStake.top'},{address:'https://rpc-chronic.zenchainlabs.io/',provider:'ZenChainLabs'}],grpc:[{address:'https://grpc.chronic.nodestake.top/',provider:'NodeStake.top'}],rest:[{address:'https://api.chronic.nodestake.top/',provider:'NodeStake.top'},{address:'https://api-chronic.zenchainlabs.io/',provider:'ZenChainLabs'}]},explorers:[{kind:'skynetexplorers',url:'https://www.skynetexplorers.com/chronic-token',tx_page:''},{kind:'Zenscan.io',url:'https://www.chronic.zenscan.io',tx_page:''}]},{$schema:'../chain.schema.json',chain_name:'comdex',status:'live',network_type:'mainnet',website:'https://comdex.one/',pretty_name:'Comdex',chain_id:'comdex-1',bech32_prefix:'comdex',slip44:118,fees:{fee_tokens:[{denom:'ucmdx',fixed_min_gas_price:0}]},codebase:{git_repo:'https://github.com/comdex-official/comdex',recommended_version:'v7.0.0',compatible_versions:['v7.0.0'],genesis:{genesis_url:'https://comdex-mainnet-genesis.s3.ap-southeast-1.amazonaws.com/genesis.json'}},daemon_name:'comdex',node_home:'$HOME/.comdex',key_algos:['secp256k1'],peers:{seeds:[{id:'aef35f45db2d9f5590baa088c27883ac3d5e0b33',address:'3.108.102.92:26656'},{id:'7ca14a1d156299999eba9c394ca060368022d52f',address:'54.194.178.110:26656'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:13156',provider:'Polkachu'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:13156',provider:'Lavender.Five Nodes 🐝'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'comdex.mainnet.seed.autostake.net:26776',provider:'AutoStake 🛡️ Slash Protected'},{id:'6596d143fd128b2394b27cd7846bda099ca5a193',address:'seeds.goldenratiostaking.net:1621',provider:'Golden Ratio Staking'},{id:'243d93ff2f663860f118fa32e2122fbba7f00a92',address:'seeds.whispernode.com:13156',provider:'WhisperNode🤐'}],persistent_peers:[{id:'f74518ad134630da8d2405570f6a3639954c985f',address:'65.0.173.217:26656'},{id:'d478882a80674fa10a32da63cc20cae13e3a2a57',address:'43.204.0.243:26656'},{id:'61d743ea796ad1e1ff838c9e84adb38dfffd1d9d',address:'15.235.9.222:26656'},{id:'b8468f64788a17dbf34a891d9cd29d54b2b6485d',address:'194.163.178.25:26656'},{id:'d8b74791ee56f1b345d822f62bd9bc969668d8df',address:'194.163.128.55:36656'},{id:'81444353d70bab79742b8da447a9564583ed3d6a',address:'164.68.105.248:26656'},{id:'5b1ceb8110da4e90c38c794d574eb9418a7574d6',address:'43.254.41.56:26656'},{id:'98b4522a541a69007d87141184f146a8f04be5b9',address:'40.112.90.170:26656'},{id:'9a59b6dc59903d036dd476de26e8d2b9f1acf466',address:'195.201.195.111:26656'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'comdex.mainnet.peer.autostake.net:26776',provider:'AutoStake 🛡️ Slash Protecteds'}]},apis:{rpc:[{address:'https://api.comdex.audit.one/rpc',provider:'audit'},{address:'https://rpc.comdex.one',provider:'comdex'},{address:'http://comdex.node.vitwit.com:26657/',provider:'vitwit'},{address:'https://rpc-comdex.zenchainlabs.io/',provider:'zenchainlabs'},{address:'https://comdex-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc-comdex-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://rpc.comdex.chaintools.tech/',provider:'ChainTools'},{address:'https://comdex-rpc.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://rpc-comdex.goldenratiostaking.net',provider:'Golden Ratio Staking'}],rest:[{address:'https://api.comdex.audit.one/rest',provider:'audit'},{address:'https://rest.comdex.one',provider:'comdex'},{address:'http://comdex.node.vitwit.com:1317/',provider:'vitwit'},{address:'https://api-comdex.zenchainlabs.io/',provider:'zenchainlabs'},{address:'https://api-comdex-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://api.comdex.chaintools.tech/',provider:'ChainTools'},{address:'https://comdex-api.polkachu.com',provider:'Polkachu'},{address:'https://comdex-api.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://comdex.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'}],grpc:[{address:'grpc-comdex-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'https://comdex.grpcui.chaintools.host/',provider:'ChainTools'},{address:'comdex-grpc.polkachu.com:13190',provider:'Polkachu'},{address:'https://comdex-grpc.lavenderfive.com:443/',provider:'Lavender.Five Nodes 🐝'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/comdex',tx_page:'https://ezstaking.tools/comdex/txs/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/comdex',tx_page:'https://www.mintscan.io/comdex/txs/${txHash}',account_page:'https://www.mintscan.io/comdex/account/${accountAddress}'},{kind:'aneka',url:'https://comdex.aneka.io/',tx_page:'https://comdex.aneka.io/txs/${txHash}'},{kind:'ping.pub',url:'https://ping.pub/comdex',tx_page:'https://ping.pub/comdex/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/comdex',tx_page:'https://atomscan.com/comdex/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'commercionetwork',chain_id:'commercio-3',pretty_name:'Commercio.network',status:'live',network_type:'mainnet',bech32_prefix:'did:com:',daemon_name:'commercionetworkd',node_home:'$HOME/.commercionetworkd',key_algos:['secp256k1'],slip44:701,fees:{fee_tokens:[{denom:'ucommercio'}]},codebase:{git_repo:'https://github.com/commercionetwork/commercionetwork',recommended_version:'v4.0.0',compatible_versions:['v4.0.0'],genesis:{genesis_url:'https://raw.githubusercontent.com/commercionetwork/chains/master/commercio-3/genesis.json'}},peers:{seeds:[{id:'8d3ac30a774245019f7b94d7a0713fd8caccaa03',address:'seed-01.commercio.network:26656'},{id:'68ccfc9a1574923e344993d49253d8169f592f9e',address:'seed-02.commercio.network:26656'}],persistent_peers:[{id:'3f26a7d3269e352574e760d4b08d045aa40ebbf2',address:'persistent-01.commercio.network:26656'},{id:'15767f4961b501eb67e740aa60c1608bf65679f3',address:'persistent-02.commercio.network:26656'},{id:'01f615a56a7ba14d39e4eaf2bfd00a885cc4e629',address:'persistent-03.commercio.network:26656'},{id:'d6e07b5f0a69bd4d6f4e6e931f00fbcb992a8654',address:'persistent-04.commercio.network:26656'},{id:'542a55fff599ea07e2b4841febff4a78cf8db2aa',address:'persistent-05.commercio.network:26656'},{id:'e2bd5ac83f0d2fde72571568b9a4203f7e76067d',address:'64.225.95.231:26656'},{id:'e84b1b8cdb6563170466912f082829c2e4d28ab1',address:'209.250.247.45:26656'}]},apis:{rpc:[{address:'https://rpc-mainnet.commercio.network'}],rest:[{address:'https://lcd-mainnet.commercio.network'}]},explorers:[{kind:'almerico',url:'https://mainnet.commercio.network',tx_page:'https://mainnet.commercio.network/transactions/detail/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'cosmoshub',chain_id:'cosmoshub-4',website:'https://cosmos.network/',pretty_name:'Cosmos Hub',status:'live',network_type:'mainnet',bech32_prefix:'cosmos',daemon_name:'gaiad',node_home:'$HOME/.gaia',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'uatom',fixed_min_gas_price:0}]},codebase:{git_repo:'https://github.com/cosmos/gaia',recommended_version:'v7.1.0',compatible_versions:['v7.1.0'],binaries:{'linux/amd64':'https://github.com/cosmos/gaia/releases/download/v7.1.0/gaiad-v7.1.0-linux-amd64','linux/arm64':'https://github.com/cosmos/gaia/releases/download/v7.1.0/gaiad-v7.1.0-linux-arm64','darwin/amd64':'https://github.com/cosmos/gaia/releases/download/v7.1.0/gaiad-v7.1.0-darwin-amd64','windows/amd64':'https://github.com/cosmos/gaia/releases/download/v7.1.0/gaiad-v7.1.0-windows-amd64.exe'},genesis:{genesis_url:'https://github.com/cosmos/mainnet/raw/master/genesis/genesis.cosmoshub-4.json.gz'}},peers:{seeds:[{id:'bf8328b66dceb4987e5cd94430af66045e59899f',address:'public-seed.cosmos.vitwit.com:26656',provider:'vitwit'},{id:'cfd785a4224c7940e9a10f6c1ab24c343e923bec',address:'164.68.107.188:26656'},{id:'d72b3011ed46d783e369fdf8ae2055b99a1e5074',address:'173.249.50.25:26656'},{id:'ba3bacc714817218562f743178228f23678b2873',address:'public-seed-node.cosmoshub.certus.one:26656',provider:'certusone'},{id:'3c7cad4154967a294b3ba1cc752e40e8779640ad',address:'84.201.128.115:26656'},{id:'366ac852255c3ac8de17e11ae9ec814b8c68bddb',address:'51.15.94.196:26656'},{id:'bcef90de8a83673c336bf3b3a352445b3a3a1f08',address:'cosmos-seed.sunshinevalidation.io:31038',provider:'sunshine-validation'},{id:'3b67739570f921cc5e0db4b3efe488ce184155a9',address:'seeds.pupmos.network:2000',provider:'PUPMØS'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:14956',provider:'Polkachu'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:14956',provider:'Lavender.Five Nodes 🐝'},{id:'57a5297537b9b6ef8b105c08a8ad3f6ac452c423',address:'seeds.goldenratiostaking.net:1618',provider:'Golden Ratio Staking'},{id:'7aa410eb8f699c366b1f1e2904ba6b0d1cac379b',address:'seeds.whispernode.com:14956',provider:'WhisperNode🤐'}],persistent_peers:[{id:'ee27245d88c632a556cf72cc7f3587380c09b469',address:'45.79.249.253:26656'},{id:'538ebe0086f0f5e9ca922dae0462cc87e22f0a50',address:'34.122.34.67:26656'},{id:'d3209b9f88eec64f10555a11ecbf797bb0fa29f4',address:'34.125.169.233:26656'},{id:'bdc2c3d410ca7731411b7e46a252012323fbbf37',address:'34.83.209.166:26656'},{id:'585794737e6b318957088e645e17c0669f3b11fc',address:'54.160.123.34:26656'},{id:'11dfe200894f38e411beca77928e9dd118e66813',address:'94.130.98.157:26656'},{id:'5b4ed476e01c49b23851258d867cc0cfc0c10e58',address:'206.189.4.227:26656'},{id:'654f47a762c8f9257aef4a44c1fb5014916d8b20',address:'99.79.60.15:26656'},{id:'366ac852255c3ac8de17e11ae9ec814b8c68bddb',address:'51.15.94.196:26656'},{id:'d6318b3bd51a5e2b8ed08f2e520d50289ed32bf1',address:'52.79.43.100:26656'},{id:'1bfda3d59e70290a3dada9bb809dd954371850d3',address:'54.180.225.240:26656'},{id:'6ee94c2093505e8790442c054e6e1e0211d36583',address:'44.239.140.195:26656'},{id:'ec779a2741da6dd2ccdaa6dfc0bebb10e595dfa4',address:'50.18.113.67:26656'},{id:'cfd785a4224c7940e9a10f6c1ab24c343e923bec',address:'164.68.107.188:26656'},{id:'d72b3011ed46d783e369fdf8ae2055b99a1e5074',address:'173.249.50.25:26656'},{id:'047f723806ee702b211e7227f89eacd829aabd86',address:'52.9.212.125:26656'},{id:'b0e746acb6fbed7a0311fe21cfb2ee94581ca3bc',address:'51.79.21.187:26656'},{id:'82772547c4575c18dfe6e75aafe521cf7d4dc8de',address:'142.93.157.186:26656'},{id:'3c7cad4154967a294b3ba1cc752e40e8779640ad',address:'84.201.128.115:26656'},{id:'f122129f53b7c584df6cee77716dcc636d5c5e18',address:'167.172.59.196:26656'},{id:'241b17dba97a2ed3c3747d12781fb86c9706e2d4',address:'95.179.136.131:26656'},{id:'f1b16c603f3a0e59f0ce5179dc80f549a7ecd0e2',address:'sentries.us-east1.iqext.net:26656'},{id:'64bd8eaf08b05f17ccd88425f80b59ab48934004',address:'157.90.18.35:26656',provider:'in3s.com'},{id:'1da54d20c7339713f1d6d28dd2117087dd33d0ca',address:'cosmos-seed.icycro.org:26656',provider:'IcyCRO 🧊'}]},apis:{rpc:[{address:'https://rpc-cosmoshub.blockapsis.com',provider:'chainapsis'},{address:'https://cosmos-rpc.quickapi.com:443',provider:'Chainlayer'},{address:'https://rpc-cosmoshub.whispernode.com',provider:' WhisperNode🤐'},{address:'https://cosmoshub.validator.network/',provider:'validatornetwork'},{address:'https://cosmoshub-rpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://rpc.cosmoshub.strange.love',provider:'strangelove-ventures'},{address:'https://rpc.cosmos.network:443',provider:'tendermint-inc'},{address:'https://rpc-cosmoshub.ecostake.com',provider:'ecostake'},{address:'https://rpc-cosmoshub.pupmos.network',provider:'PUPMØS'},{address:'https://cosmos-rpc.polkachu.com',provider:'Polkachu'},{address:'https://cosmoshub.rpc.interchain.ivaldilabs.xyz',provider:'Ivaldi Labs'},{address:'https://rpc-cosmoshub.goldenratiostaking.net',provider:'Golden Ratio Staking'},{address:'https://rpc-cosmoshub-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://rpc.cosmos.interbloc.org',provider:'Interbloc'},{address:'https://rpc.cosmos.silknodes.io',provider:'Silk Nodes'},{address:'https://atom-rpc.kleomedes.network',provider:'Kleomedes'},{address:'https://rpc-cosmoshub.architectnodes.com',provider:'Architect Nodes'},{address:'https://rpc.cosmos.dragonstake.io',provider:'DragonStake'},{address:'https://cosmoshub.rpc.stakin-nodes.com',provider:'Stakin'},{address:'https://cosmos-rpc.icycro.org',provider:'IcyCRO 🧊'},{address:'https://rpc.cosmos.bh.rocks',provider:'BlockHunters 🎯'}],rest:[{address:'https://lcd-cosmoshub.blockapsis.com',provider:'chainapsis'},{address:'https://cosmos-lcd.quickapi.com:443',provider:'Chainlayer'},{address:'https://lcd-cosmoshub.whispernode.com',provider:' WhisperNode🤐'},{address:'https://cosmoshub-api.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://rest-cosmoshub.ecostake.com',provider:'ecostake'},{address:'https://api-cosmoshub.pupmos.network',provider:'PUPMØS'},{address:'https://api-cosmoshub-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://cosmos-api.polkachu.com',provider:'Polkachu'},{address:'https://cosmoshub.rest.interchain.ivaldilabs.xyz',provider:'Ivaldi Labs'},{address:'https://cosmos-api.cyphercore.io',provider:'Cypher Core'},{address:'https://api.cosmos.interbloc.org',provider:'Interbloc'},{address:'https://api.cosmos.silknodes.io',provider:'Silk Nodes'},{address:'https://atom-api.kleomedes.network',provider:'Kleomedes'},{address:'https://lcd.cosmos.dragonstake.io',provider:'DragonStake'},{address:'https://rest-cosmoshub.goldenratiostaking.net',provider:'Golden Ratio Staking'},{address:'https://rest-cosmoshub.architectnodes.com',provider:'Architect Nodes'},{address:'https://cosmoshub.rest.stakin-nodes.com',provider:'Stakin'},{address:'https://api.cosmos.bh.rocks',provider:'BlockHunters 🎯'}],grpc:[{address:'grpc-cosmoshub.blockapsis.com:429',provider:'chainapsis'},{address:'cosmoshub.strange.love:9090',provider:'strangelove'},{address:'https://cosmoshub-grpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'grpc-cosmoshub-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'cosmos-grpc.polkachu.com:14990',provider:'Polkachu'},{address:'cosmoshub.grpc.interchain.ivaldilabs.xyz:443',provider:'Ivaldi Labs'},{address:'https://grpc.cosmos.interbloc.org',provider:'Interbloc'},{address:'https://grpc.cosmos.silknodes.io',provider:'Silk Nodes'},{address:'https://grpc.cosmos.dragonstake.io',provider:'DragonStake'},{address:'cosmoshub.grpc.stakin-nodes.com:443',provider:'Stakin'},{address:'grpc.cosmos.bh.rocks:443',provider:'BlockHunters 🎯'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/cosmoshub',tx_page:'https://ezstaking.tools/cosmoshub/txs/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/cosmos',tx_page:'https://www.mintscan.io/cosmos/txs/${txHash}',account_page:'https://www.mintscan.io/cosmos/account/${accountAddress}'},{kind:'ping.pub',url:'https://ping.pub/cosmos',tx_page:'https://ping.pub/cosmos/tx/${txHash}'},{kind:'bigdipper',url:'https://cosmos.bigdipper.live/',tx_page:'https://cosmos.bigdipper.live/transactions/${txHash}'},{kind:'atomscan',url:'https://atomscan.com',tx_page:'https://atomscan.com/transactions/${txHash}'},{kind:'unichain',url:'https://unicha.in/cosmos',tx_page:'https://unicha.in/cosmos/transaction/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'crescent',status:'live',network_type:'mainnet',pretty_name:'Crescent',chain_id:'crescent-1',bech32_prefix:'cre',daemon_name:'crescentd',node_home:'$HOME/.crescent',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'ucre',fixed_min_gas_price:0}]},codebase:{git_repo:'https://github.com/crescent-network/crescent',recommended_version:'v2.1.1',compatible_versions:['v2.1.0','v2.1.1'],binaries:{'linux/amd64':'https://github.com/crescent-network/crescent/releases/download/v2.1.0/crescentd-v2.1.0-linux-amd64','darwin/amd64':'https://github.com/crescent-network/crescent/releases/download/v2.1.0/crescentd-v2.1.0-darwin-amd64'},genesis:{genesis_url:'https://github.com/crescent-network/launch/raw/main/mainnet/crescent-1/genesis.json.tar.gz'}},peers:{seeds:[{id:'929f22a7b04ff438da9edcfebd8089908239de44',address:'18.180.232.184:26656',provider:'crescent'},{id:'c312d41ef52b7c890674e808ef28c57a7746057c',address:'seeds.pupmos.network:2003',provider:'PUPMØS'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'crescent.mainnet.seed.autostake.net:26816',provider:'AutoStake 🛡️ Slash Protected'}],persistent_peers:[{id:'b34115ba926eb12059ca0ade4d1013cac2f8d289',address:'crescent-mainnet-01.01node.com:26656',provider:'01node'},{id:'06415494b86316c55245d162da065c3c0fee83fc',address:'172.104.108.21:26656',provider:'Forbole'},{id:'3bcffbcb11e96edc84c04a5628639f5ed94b9db2',address:'128.0.51.5:26656',provider:'Dokia-capital'},{id:'68787e8412ab97d99af7595c46514b9ab4b3df45',address:'54.250.202.17:26656',provider:'DSRV'},{id:'3b468af82b8ffa049b3e1f67dc4615a31ec8f01e',address:'50.21.167.131:26656',provider:'Simply Staking'},{id:'dc7c0e331165ba047cc6b304ce467ee25518e0f9',address:'34.85.89.74:26656',provider:'Strangelove'},{id:'b840926fb6a2bd04fc70e501002f9286655c9179',address:'52.199.91.143:30732',provider:'0base.vc'},{id:'d7556e41ba2f333379f6d87b1af3cce2ca545f79',address:'34.88.102.246:26656',provider:'P2P validator'},{id:'4293ce6b47ee2603236437ab44dc499519c71e62',address:'45.76.97.48:26656',provider:'Nodes.Guru'},{id:'24be64cd648958d9f685f95516cb3b248537c386',address:'52.197.140.210:26656',provider:'Cosmostation'},{id:'0ed5ed53ec3542202d02d0d47ac04a2823188fc2',address:'52.194.172.170:26656',provider:'Provalidator'},{id:'c64f03deb3127d41401ef57d9762c64673f225f3',address:'172.105.221.43:46656',provider:'in3s.com'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:14556',provider:'Polkachu'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'crescent.mainnet.peer.autostake.net:26816',provider:'AutoStake 🛡️ Slash Protected'}]},apis:{rpc:[{address:'https://mainnet.crescent.network:26657',provider:'crescent'},{address:'https://crescent-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc-crescent.pupmos.network',provider:'PUPMØS'},{address:'https://crescent.rpc.stakin-nodes.com',provider:'Stakin'}],rest:[{address:'https://mainnet.crescent.network:1317',provider:'crescent'},{address:'https://api-crescent.pupmos.network',provider:'PUPMØS'},{address:'https://crescent-api.polkachu.com',provider:'Polkachu'},{address:'https://crescent.rest.stakin-nodes.com',provider:'Stakin'},{address:'https://crescent.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'}],grpc:[{address:'mainnet.crescent.network:9090',provider:'crescent'},{address:'crescent-grpc.polkachu.com:14590',provider:'Polkachu'},{address:'crescent.grpc.stakin-nodes.com:443',provider:'Stakin'}]},explorers:[{kind:'mintscan',url:'https://www.mintscan.io/crescent',tx_page:'https://www.mintscan.io/crescent/txs/${txHash}',account_page:'https://www.mintscan.io/crescent/account/${accountAddress}'},{kind:'ping.pub',url:'https://ping.pub/crescent',tx_page:'https://ping.pub/crescent/tx/${txHash}'},{kind:'explorers.guru',url:'https://crescent.explorers.guru',tx_page:'https://crescent.explorers.guru/transaction/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/crescent',tx_page:'https://atomscan.com/crescent/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'cronos',status:'live',network_type:'mainnet',website:'https://cronos.org',pretty_name:'Cronos',chain_id:'cronosmainnet_25-1',bech32_prefix:'crc',daemon_name:'cronosd',node_home:'$HOME/.cronos',key_algos:['ethsecp256k1'],slip44:60,fees:{fee_tokens:[{denom:'basecro'}]},codebase:{git_repo:'https://github.com/crypto-org-chain/cronos',recommended_version:'v0.8.3',compatible_versions:['v0.7.0','v0.7.1','v0.8.0','v0.8.1','v0.8.2'],binaries:{'linux/amd64':'https://github.com/crypto-org-chain/cronos/releases/download/v0.8.3/cronos_0.8.3_Linux_x86_64.tar.gz','linux/arm64':'https://github.com/crypto-org-chain/cronos/releases/download/v0.8.3/cronos_0.8.3_Linux_arm64.tar.gz','darwin/amd64':'https://github.com/crypto-org-chain/cronos/releases/download/v0.8.3/cronos_0.8.3_Darwin_x86_64.tar.gz','darwin/arm64':'https://github.com/crypto-org-chain/cronos/releases/download/v0.8.3/cronos_0.8.3_Darwin_arm64.tar.gz','windows/amd64':'https://github.com/crypto-org-chain/cronos/releases/download/v0.8.3/cronos_0.8.3_Windows_x86_64.zip'},genesis:{genesis_url:'https://raw.githubusercontent.com/crypto-org-chain/cronos-mainnet/master/cronosmainnet_25-1/genesis.json'}},peers:{seeds:[{id:'0d5cf1394a1cfde28dc8f023567222abc0f47534',address:'cronos-seed-0.crypto.org:26656',provider:'crypto-org'},{id:'3032073adc06d710dd512240281637c1bd0c8a7b',address:'cronos-seed-1.crypto.org:26656',provider:'crypto-org'},{id:'04f43116b4c6c70054d9c2b7485383df5b1ed1da',address:'cronos-seed-2.crypto.org:26656',provider:'crypto-org'},{id:'337377dcda43d79c537d2c4d93ad3b698ce9452e',address:'bd-cronos-mainnet-seed-node-01.bdnodes.net:26656',provider:'Blockdaemon.com'},{id:'abedfe94dd5731e9750e045ca8d8e40aa6d3c60b',address:'seed.cronos.jerrychong.com:26656',provider:"Jerry's Pool"}],persistent_peers:[{id:'0d5cf1394a1cfde28dc8f023567222abc0f47534',address:'cronos-seed-0.crypto.org:26656',provider:'crypto-org'},{id:'3032073adc06d710dd512240281637c1bd0c8a7b',address:'cronos-seed-1.crypto.org:26656',provider:'crypto-org'},{id:'04f43116b4c6c70054d9c2b7485383df5b1ed1da',address:'cronos-seed-2.crypto.org:26656',provider:'crypto-org'},{id:'337377dcda43d79c537d2c4d93ad3b698ce9452e',address:'bd-cronos-mainnet-seed-node-01.bdnodes.net:26656',provider:'Blockdaemon.com'}]},apis:{rpc:[{address:'https://rpc.cronos.org/',provider:'crypto.org'}],rest:[{address:'https://rest.cronos.org/',provider:'crypto.org'}],grpc:[{address:'http://grpc.cronos.org/',provider:'crypto.org'}],'evm-http-jsonrpc':[{address:'https://evm.cronos.org/',provider:'crypto.org'}]},explorers:[{kind:'cronoscan',url:'https://cronoscan.com',tx_page:'https://cronoscan.com/tx/${txHash}'},{kind:'crypto.org',url:'https://cronos.org/explorer',tx_page:'https://cronos.org/explorer/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'cryptoorgchain',status:'live',network_type:'mainnet',pretty_name:'Crypto.org Chain',chain_id:'crypto-org-chain-mainnet-1',bech32_prefix:'cro',daemon_name:'chain-maind',node_home:'$HOME/.chain-maind',slip44:394,fees:{fee_tokens:[{denom:'basecro'}]},codebase:{git_repo:'https://github.com/crypto-org-chain/chain-main',recommended_version:'v3.3.3',compatible_versions:['v3.3.3'],binaries:{'linux/amd64':'https://github.com/crypto-org-chain/chain-main/releases/download/v3.3.3/chain-main_3.3.3_Linux_x86_64.tar.gz','linux/arm64':'https://github.com/crypto-org-chain/chain-main/releases/download/v3.3.3/chain-main_3.3.3_Linux_arm64.tar.gz','darwin/amd64':'https://github.com/crypto-org-chain/chain-main/releases/download/v3.3.3/chain-main_3.3.3_Darwin_x86_64.tar.gz','darwin/arm64':'https://github.com/crypto-org-chain/chain-main/releases/download/v3.3.3/chain-main_3.3.3_Darwin_arm64.tar.gz','windows/amd64':'https://github.com/crypto-org-chain/chain-main/releases/download/v3.3.3/chain-main_3.3.3_Windows_x86_64.zip'},genesis:{genesis_url:'https://github.com/crypto-org-chain/mainnet/raw/main/crypto-org-chain-mainnet-1/genesis.json'}},peers:{seeds:[{id:'87c3adb7d8f649c51eebe0d3335d8f9e28c362f2',address:'seed-0.crypto.org:26656',provider:'crypto-org'},{id:'e1d7ff02b78044795371beb1cd5fb803f9389256',address:'seed-1.crypto.org:26656',provider:'crypto-org'},{id:'2c55809558a4e491e9995962e10c026eb9014655',address:'seed-2.crypto.org:26656',provider:'crypto-org'},{id:'8dc1863d1d23cf9ad7cbea215c19bcbe8bf39702',address:'p2p.baaa7e56-cc71-4ae4-b4b3-c6a9d4a9596a.cryptodotorg.bison.run:26656',provider:'bison-trails'},{id:'8a7922f3fb3fb4cfe8cb57281b9d159ca7fd29c6',address:'p2p.aef59b2a-d77e-4922-817a-d1eea614aef4.cryptodotorg.bison.run:26656',provider:'bison-trails'},{id:'494d860a2869b90c458b07d4da890539272785c9',address:'p2p.fabc23d9-e0a1-4ced-8cd7-eb3efd6d9ef3.cryptodotorg.bison.run:26656',provider:'bison-trails'},{id:'dc2540dabadb8302da988c95a3c872191061aed2',address:'p2p.7d1b53c0-b86b-44c8-8c02-e3b0e88a4bf7.cryptodotorg.herd.run:26656',provider:'bison-trails'},{id:'33b15c14f54f71a4a923ac264761eb3209784cf2',address:'p2p.0d20d4b3-6890-4f00-b9f3-596ad3df6533.cryptodotorg.herd.run:26656',provider:'bison-trails'},{id:'d2862ef8f86f9976daa0c6f59455b2b1452dc53b',address:'p2p.a088961f-5dfd-4007-a15c-3a706d4be2c0.cryptodotorg.herd.run:26656',provider:'bison-trails'}],persistent_peers:[{id:'87c3adb7d8f649c51eebe0d3335d8f9e28c362f2',address:'seed-0.crypto.org:26656',provider:'crypto-org'},{id:'e1d7ff02b78044795371beb1cd5fb803f9389256',address:'seed-1.crypto.org:26656',provider:'crypto-org'},{id:'2c55809558a4e491e9995962e10c026eb9014655',address:'seed-2.crypto.org:26656',provider:'crypto-org'},{id:'8dc1863d1d23cf9ad7cbea215c19bcbe8bf39702',address:'p2p.baaa7e56-cc71-4ae4-b4b3-c6a9d4a9596a.cryptodotorg.bison.run:26656',provider:'bison-trails'},{id:'8a7922f3fb3fb4cfe8cb57281b9d159ca7fd29c6',address:'p2p.aef59b2a-d77e-4922-817a-d1eea614aef4.cryptodotorg.bison.run:26656',provider:'bison-trails'},{id:'d2862ef8f86f9976daa0c6f59455b2b1452dc53b',address:'p2p.a088961f-5dfd-4007-a15c-3a706d4be2c0.cryptodotorg.herd.run:26656',provider:'bison-trails'}]},apis:{rpc:[{address:'https://mainnet.crypto.org/',provider:'crypto.org'},{address:'https://rpc-crypto-org.keplr.app/',provider:'chainapsis'},{address:'https://rpc-cryptoorgchain-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://rpc-cryptoorgchain.ecostake.com',provider:'ecostake'}],rest:[{address:'https://mainnet.crypto.org/',provider:'crypto.org'},{address:'https://lcd-crypto-org.keplr.app/',provider:'chainapsis'},{address:'https://api-cryptoorgchain-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://rest-cryptoorgchain.ecostake.com',provider:'ecostake'}],grpc:[{address:'grpc-cryptoorgchain-ia.cosmosia.notional.ventures:443',provider:'Notional'}]},explorers:[{kind:'mintscan',url:'https://www.mintscan.io/crypto-org',tx_page:'https://www.mintscan.io/crypto-org/txs/${txHash}',account_page:'https://www.mintscan.io/crypto-org/account/${accountAddress}'},{kind:'crypto.org',url:'https://crypto.org/explorer',tx_page:'https://crypto.org/explorer/tx/${txHash}'},{kind:'ping.pub',url:'https://ping.pub/crypto-com-chain',tx_page:'https://ping.pub/crypto-com-chain/tx/${txHash}'},{kind:'yummy-explorer',url:'https://explorer.yummy.capital',tx_page:'https://explorer.yummy.capital/txs/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'cudos',status:'live',network_type:'mainnet',pretty_name:'Cudos',chain_id:'cudos-1',bech32_prefix:'cudos',daemon_name:'cudos-noded',key_algos:['secp256k1'],slip44:118,codebase:{git_repo:'https://github.com/CudoVentures/cudos-node',recommended_version:'v1.0.1',compatible_versions:['v1.0.1'],genesis:{genesis_url:'https://github.com/CudoVentures/cudos-builders/blob/v1.0.0/docker/config/genesis.mainnet.json'}},peers:{seeds:[{id:'ff3f0f7b1eecc6844e6512428ef4c7a9448452a8',address:'cluster-1-seed-1.hosts.cudos.org:26656',provider:'cudo'},{id:'6d9beb4d44a530a4a10ebe78ed7717f6083d0c4b',address:'cluster-2-seed-1.hosts.cudos.org:26656',provider:'cudo'},{id:'e0f3bcc574ef66ae4561fad0772a4fd1959969af',address:'cluster-3-seed-1.hosts.cudos.org:26656',provider:'cudo'}],persistent_peers:[{id:'f196d7cc811a5ab99e4c5dd5c7f3c0135509d1c4',address:'cluster-1-sentry-1.hosts.cudos.org:26656',provider:'cudo'},{id:'2cc0a12ff1038509b2ed64719fcddfdded9a04ad',address:'cluster-2-sentry-1.hosts.cudos.org:26656',provider:'cudo'},{id:'ab1ec4fb29afc9c0f5a04b7cbd1220b8b30ffea4',address:'cluster-3-sentry-1.hosts.cudos.org:26656',provider:'cudo'},{id:'2958b15e9102cb556cc0f1f1bbbfdfc922a16069',address:'mainnet-full-node-01.hosts.cudos.org:26656',provider:'cudo'},{id:'eb14f9142ad313297653f84754b1caf60efe75ac',address:'mainnet-full-node-02.hosts.cudos.org:26656',provider:'cudo'}]},apis:{rpc:[{address:'http://mainnet-full-node-01.hosts.cudos.org:26657',provider:'cudo'},{address:'https://mainnet-full-node-02.hosts.cudos.org:36657',provider:'cudo'}],rest:[{address:'http://mainnet-full-node-01.hosts.cudos.org:1317',provider:'cudo'},{address:'https://mainnet-full-node-02.hosts.cudos.org:31317',provider:'cudo'}],grpc:[{address:'http://mainnet-full-node-01.hosts.cudos.org:9090',provider:'cudo'},{address:'https://mainnet-full-node-02.hosts.cudos.org:39090',provider:'cudo'}]},explorers:[{kind:'bigdipper',url:'https://explorer.cudos.org/',tx_page:'https://explorer.cudos.org/transactions/${txHash}',account_page:'https://explorer.cudos.org/accounts/${accountAddress}'},{kind:'cudos-dashboard',url:'https://dashboard.cudos.org/',tx_page:'https://explorer.cudos.org/transactions/${txHash}',account_page:'https://explorer.cudos.org/accounts/${accountAddress}'},{kind:'mintscan',url:'https://www.mintscan.io/cudos',tx_page:'https://www.mintscan.io/cudos/txs/${txHash}',account_page:'https://www.mintscan.io/cudos/account/${accountAddress}'},{kind:'atomscan',url:'https://atomscan.com/cudos',tx_page:'https://atomscan.com/cudos/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'decentr',status:'live',network_type:'mainnet',pretty_name:'Decentr',chain_id:'mainnet-3',bech32_prefix:'decentr',daemon_name:'decentrd',node_home:'$HOME/.decentr',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'udec',fixed_min_gas_price:0.025}]},codebase:{git_repo:'https://github.com/Decentr-net/decentr',recommended_version:'v1.5.7',compatible_versions:['v1.5.7'],genesis:{genesis_url:'https://raw.githubusercontent.com/Decentr-net/mainnets/master/3.0/genesis.json'}},peers:{seeds:[{id:'7708addcfb9d4ff394b18fbc6c016b4aaa90a10a',address:'ares.mainnet.decentr.xyz:26656',provider:'decentr'},{id:'8a3485f940c3b2b9f0dd979a16ea28de154f14dd',address:'calliope.mainnet.decentr.xyz:26656',provider:'decentr'},{id:'87490fd832f3226ac5d090f6a438d402670881d0',address:'euterpe.mainnet.decentr.xyz:26656',provider:'decentr'},{id:'3261bff0b7c16dcf6b5b8e62dd54faafbfd75415',address:'hera.mainnet.decentr.xyz:26656',provider:'decentr'},{id:'c37f32e202e13b0725515570f794b68573a6f58c',address:'hera.mainnet.decentr.xyz:26656',provider:'decentr'},{id:'5f3cfa2e3d5ed2c2ef699c8593a3d93c902406a9',address:'hermes.mainnet.decentr.xyz:26656',provider:'decentr'},{id:'a529801b5390f56d5c280eaff4ae95b7163e385f',address:'melpomene.mainnet.decentr.xyz:26656',provider:'decentr'},{id:'385129dbe71bceff982204afa11ed7fa0ee39430',address:'poseidon.mainnet.decentr.xyz:26656',provider:'decentr'},{id:'35a934228c32ad8329ac917613a25474cc79bc08',address:'terpsichore.mainnet.decentr.xyz:26656',provider:'decentr'},{id:'0fd62bcd1de6f2e3cfc15852cdde9f3f8a7987e4',address:'thalia.mainnet.decentr.xyz:26656',provider:'decentr'},{id:'bd99693d0dbc855b0367f781fb48bf1ca6a6a58b',address:'zeus.mainnet.decentr.xyz:26656',provider:'decentr'}],persistent_peers:[{id:'6afae5a544d74a8581da932aaa6d483ce797a6b1',address:'75.119.157.167:28656',provider:'Inter Blockchain Services'},{id:'83a9601e707ec12fc646586b9e13021a234d5eec',address:'207.180.254.180:26656',provider:'Badgerbite'},{id:'b8c14fa7676da89aed7b0fd46ed5c4c866d0a3b7',address:'154.12.240.174:26656',provider:'Badgerbite'}]},apis:{rpc:[{address:'https://poseidon.mainnet.decentr.xyz',provider:'decentr'},{address:'https://rpc.decentr.badgerbite.xyz:443',provider:'BadgerBite'},{address:'https://ares.mainnet.decentr.xyz',provider:'decentr'},{address:'https://rpc.decentr.chaintools.tech/',provider:'ChainTools'},{address:'https://rpc.decentr.nodestake.top',provider:'NodeStake'},{address:'https://decentr-rpc.ibs.team/',provider:'Inter Blockchain Services'}],rest:[{address:'https://rest.mainnet.decentr.xyz',provider:'decentr'},{address:'https://api.decentr.chaintools.tech/',provider:'ChainTools'},{address:'https://api.decentr.nodestake.top',provider:'NodeStake'},{address:'https://decentr-api.ibs.team/',provider:'Inter Blockchain Services'}],grpc:[{address:'https://grpc.decentr.nodestake.top',provider:'NodeStake'}]},explorers:[{kind:'decentr.net',url:'https://explorer.decentr.net',tx_page:'https://explorer.decentr.net/transactions/${txHash}?networkId=mainnet'},{kind:'ping.pub',url:'https://ping.pub/decentr/',tx_page:'https://ping.pub/decentr/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/decentr',tx_page:'https://atomscan.com/decentr/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'desmos',status:'live',network_type:'mainnet',website:'https://desmos.network/',pretty_name:'Desmos',chain_id:'desmos-mainnet',bech32_prefix:'desmos',daemon_name:'desmos',node_home:'$HOME/.desmos',key_algos:['secp256k1'],slip44:852,fees:{fee_tokens:[{denom:'udsm',fixed_min_gas_price:0.001}]},codebase:{git_repo:'https://github.com/desmos-labs/desmos',recommended_version:'v4.7.0',compatible_versions:['v4.7.0'],binaries:{'linux/amd64':'https://github.com/desmos-labs/desmos/releases/download/v4.7.0/desmos-4.7.0-linux-amd64','linux/arm64':'https://github.com/desmos-labs/desmos/releases/download/v4.7.0/desmos-4.7.0-linux-arm64','darwin/amd64':'https://github.com/desmos-labs/desmos/releases/download/v4.7.0/desmos-4.7.0-darwin-amd64','windows/amd64':'https://github.com/desmos-labs/desmos/releases/download/v4.7.0/desmos-4.7.0-windows-amd64.exe'},genesis:{genesis_url:'https://raw.githubusercontent.com/desmos-labs/mainnet/main/genesis.json'}},peers:{seeds:[{id:'9bde6ab4e0e00f721cc3f5b4b35f3a0e8979fab5',address:'seed-1.mainnet.desmos.network:26656',provider:'desmos'},{id:'5c86915026093f9a2f81e5910107cf14676b48fc',address:'seed-2.mainnet.desmos.network:26656',provider:'desmos'},{id:'45105c7241068904bdf5a32c86ee45979794637f',address:'seed-3.mainnet.desmos.network:26656',provider:'desmos'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:16256',provider:'Lavender.Five Nodes 🐝'},{id:'15b1f6b49a548e9f0d0855bd340199bce9140add',address:'seed-desmos.starsquid.io:15601',provider:'Starsquid'},{id:'4914d4b60123a625d41da7cad9950a4a12ce61ca',address:'desmos-seed.panthea.eu:39656',provider:'Panthea EU'},{id:'6580d5123923ec1426c67658d2ae1e68cfd6a62f',address:'seeds.whispernode.com:16256',provider:'WhisperNode🤐'}],persistent_peers:[{id:'7c506d9e32cfc486ea714ee0c0307022398b8c20',address:'desmos-peer.panthea.eu:29656',provider:'Panthea EU'}]},apis:{rpc:[{address:'https://rpc.mainnet.desmos.network',provider:'desmos'},{address:'https://desmos-rpc.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://desmos-rpc.ibs.team/',provider:'Inter Blockchain Services'},{address:'https://rpc-desmos.starsquid.io',provider:'Starsquid'},{address:'https://desmos.nodejumper.io',provider:'Nodejumper 🚀'},{address:'https://desmos-rpc.panthea.eu',provider:'Panthea EU'}],rest:[{address:'https://api.mainnet.desmos.network',provider:'desmos'},{address:'https://desmos-api.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://desmos-api.ibs.team/',provider:'Inter Blockchain Services'},{address:'https://desmos.nodejumper.io:1317',provider:'Nodejumper 🚀'},{address:'https://desmos-api.panthea.eu',provider:'Panthea EU'}],grpc:[{address:'https://desmos-grpc.lavenderfive.com:443/',provider:'Lavender.Five Nodes 🐝'},{address:'https://desmos.nodejumper.io:9090',provider:'Nodejumper 🚀'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/desmos',tx_page:'https://ezstaking.tools/desmos/txs/${txHash}'},{kind:'bigdipper',url:'https://explorer.desmos.network',tx_page:'https://explorer.desmos.network/transactions/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/desmos',tx_page:'https://www.mintscan.io/desmos/txs/${txHash}',account_page:'https://www.mintscan.io/desmos/account/${accountAddress}'},{kind:'ping.pub',url:'https://ping.pub/desmos',tx_page:'https://ping.pub/desmos/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/desmos',tx_page:'https://atomscan.com/desmos/transactions/${txHash}'},{kind:'TC Network',url:'https://explorer.tcnetwork.io/desmos',tx_page:'https://explorer.tcnetwork.io/desmos/transaction/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'dig',status:'live',network_type:'mainnet',website:'https://digchain.org/',pretty_name:'Dig Chain',chain_id:'dig-1',bech32_prefix:'dig',daemon_name:'digd',node_home:'$HOME/.dig',key_algos:['secp256k1','ethsecp256k1'],extra_codecs:['ethermint'],slip44:118,fees:{fee_tokens:[{denom:'udig',low_gas_price:0.025,average_gas_price:0.03,high_gas_price:0.035}]},staking:{staking_tokens:[{denom:'udig'}]},codebase:{git_repo:'https://github.com/notional-labs/dig',recommended_version:'v1.0.0',compatible_versions:['v1.0.0'],genesis:{genesis_url:'https://raw.githubusercontent.com/notional-labs/dig/master/networks/mainnets/dig-1/genesis.json'}},peers:{seeds:[{id:'37b2839da4463b22a51b1fe20d97992164270eba',address:'62.171.157.192:26656'},{id:'e2c96b96d4c3a461fb246edac3b3cdbf47768838',address:'65.21.202.37:6969'}],persistent_peers:[{id:'33f4788e1c6a378b929c66f31e8d253b9fd47c47',address:'194.163.154.251:26656'},{id:'64eccffdc60a206227032d3a021fbf9dfc686a17',address:'194.163.156.84:26656'},{id:'be7598b2d56fb42a27821259ad14aff24c40f3d2',address:'172.16.152.118:26656'},{id:'f446e37e47297ce9f8951957d17a2ae9a16db0b8',address:'137.184.67.162:26656'},{id:'ab2fa2789f481e2856a5d83a2c3028c5b215421d',address:'144.91.117.49:26656'},{id:'e9e89250b40b4512237c77bd04dc76c06a3f8560',address:'185.214.135.205:26656'},{id:'1539976f4ee196f172369e6f348d60a6e3ec9e93',address:'159.69.147.189:26656'},{id:'85316823bee88f7b05d0cfc671bee861c0237154',address:'95.217.198.243:26656'},{id:'eb55b70c9fd8fc0d5530d0662336377668aab3f9',address:'185.194.219.128:26656'}]},apis:{rpc:[{address:'https://rpc-1-dig.notional.ventures'},{address:'https://rpc-dig-ia.cosmosia.notional.ventures/',provider:'Notional'}],rest:[{address:'https://api-1-dig.notional.ventures'},{address:'https://api-dig-ia.cosmosia.notional.ventures/',provider:'Notional'}],grpc:[{address:'grpc-dig-ia.cosmosia.notional.ventures:443',provider:'Notional'}]},explorers:[{kind:'ping.pub',url:'https://ping.pub/dig',tx_page:'https://ping.pub/dig/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/dig',tx_page:'https://atomscan.com/dig/transactions/${txHash}'},{kind:'TC Network',url:'https://explorer.tcnetwork.io/dig',tx_page:'https://explorer.tcnetwork.io/dig/transaction/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'dyson',website:'https://dysonprotocol.com/',status:'live',network_type:'mainnet',pretty_name:'Dyson Protocol',chain_id:'dyson-mainnet-01',bech32_prefix:'dys',node_home:'$HOME/.dyson',daemon_name:'dysond',slip44:118,fees:{fee_tokens:[{denom:'dys',low_gas_price:0.0001,average_gas_price:0.0002,high_gas_price:0.0003}]},staking:{staking_tokens:[{denom:'dys'}]},codebase:{git_repo:'https://gitlab.com/dysonproject/dyson',recommended_version:'v0.0.2-bebf2e98',compatible_versions:['v0.0.2-bebf2e98'],genesis:{genesis_url:'https://gitlab.com/dysonproject/dyson-deploy/-/raw/develop/genesis.json'}},peers:{seeds:[{id:'2c4f8e193fd10ab3a2bc919b484fd1c78eceffb3',address:'85.159.211.61:26656',provider:''},{id:'1f3bd1f48c7c277e7be83895cdbb46f8333adb61',address:'178.79.183.171:26656',provider:''}],persistent_peers:[{id:'2c4f8e193fd10ab3a2bc919b484fd1c78eceffb3',address:'85.159.211.61:26656',provider:''},{id:'2c4f8e193fd10ab3a2bc919b484fd1c78eceffb3',address:'85.159.211.61:26656',provider:''}]},apis:{rpc:[{address:'https://dys-tm.dyson.lol:443',provider:'lol'},{address:'https://dys-tm.dysonprotocol.com:443',provider:'dysonprotocol'}],rest:[{address:'https://dys-api.dyson.lol:443',provider:'lol'},{address:'https://dys-api.dysonprotocol.com:443',provider:'dysonprotocol'}],grpc:[{address:'https://dys-grpc.dyson.lol:443',provider:'lol'}]},explorers:[{kind:'dysonprotocol',url:'https://explorer.dys.dysonprotocol.com/dyson/',tx_page:'https://explorer.dys.dysonprotocol.com/dyson/tx/${txHash}'},{kind:'lol',url:'https://explorer.dys.dyson.lol',tx_page:'https://explorer.dys.dyson.lol/dyson/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'echelon',status:'live',network_type:'mainnet',pretty_name:'Echelon',chain_id:'echelon_3000-3',bech32_prefix:'echelon',node_home:'$HOME/.echelond',slip44:60,fees:{fee_tokens:[{denom:'aechelon'}]},codebase:{git_repo:'https://github.com/echelonfoundation/echelon',recommended_version:'v1.1.4',compatible_versions:['v1.1.4','v1.0.3'],binaries:{'linux/amd64':'https://github.com/echelonfoundation/echelon/releases/download/v1.1.4/echelon_1.1.4_Linux_x86_64.tar.gz','linux/arm64':'https://github.com/echelonfoundation/echelon/releases/download/v1.1.4/echelon_1.1.4_Linux_arm64.tar.gz','darwin/amd64':'https://github.com/echelonfoundation/echelon/releases/download/v1.1.4/echelon_1.1.4_Darwin_x86_64.tar.gz','darwin/arm64':'https://github.com/echelonfoundation/echelon/releases/download/v1.1.4/echelon_1.1.4_Darwin_arm64.tar.gz','windows/amd64':'https://github.com/echelonfoundation/echelon/releases/download/v1.1.4/echelon_1.1.4_Windows_x86_64.zip'},genesis:{genesis_url:'https://gist.githubusercontent.com/echelonfoundation/ee862f58850fc1b5ee6a6fdccc3130d2/raw/55c2c4ea2fee8a9391d0dc55b2c272adb804054a/genesis.json'}},peers:{seeds:[{id:'395dc53caf836f04474aa8069e8099b0629763a1',address:'154.53.63.113:26656',provider:'Universe'},{id:'302ccf96853501c14060ffac2e1885bed6385f00',address:'154.53.63.119:26656',provider:'Rolex'},{id:'b001eeb22b03e74d5c57c4c097359a9f8c564dd1',address:'209.126.87.32:26656',provider:'Supreme'},{id:'6cd1cc8658dc66523f6e8d9ddf7dacae2ef62e6a',address:'154.12.237.224:26656',provider:'LockIt'},{id:'480db41faea6713405c93c505ff710a05d1fc801',address:'94.250.203.190:26656',provider:'Echelon'}],persistent_peers:[{id:'395dc53caf836f04474aa8069e8099b0629763a1',address:'154.53.63.113:26656',provider:'Universe'},{id:'302ccf96853501c14060ffac2e1885bed6385f00',address:'154.53.63.119:26656',provider:'Rolex'},{id:'b001eeb22b03e74d5c57c4c097359a9f8c564dd1',address:'209.126.87.32:26656',provider:'Supreme'},{id:'6cd1cc8658dc66523f6e8d9ddf7dacae2ef62e6a',address:'154.12.237.224:26656',provider:'LockIt'},{id:'480db41faea6713405c93c505ff710a05d1fc801',address:'94.250.203.190:26656',provider:'Echelon'}]},apis:{rpc:[{address:'https://tendermint.ech.network',provider:'ech.network'},{address:'https://rpc-echelon.whispernode.com',provider:' WhisperNode 🤐'},{address:'https://echelon-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc.eu.ech.world',provider:'ech.world 🌍'},{address:'https://rpc.us.ech.world',provider:'ech.world 🌍'},{address:'https://ech-rpc.softpaws.xyz',provider:'SoftPaws'}],rest:[{address:'https://api.ech.network',provider:'ech.network'},{address:'https://lcd-echelon.whispernode.com',provider:' WhisperNode 🤐'},{address:'https://echelon-api.polkachu.com',provider:'Polkachu'},{address:'https://api.eu.ech.world',provider:'ech.world 🌍'},{address:'https://api.us.ech.world',provider:'ech.world 🌍'},{address:'https://ech-api.softpaws.xyz',provider:'SoftPaws'}],grpc:[{address:'https://grpc.ech.network',provider:'ech.network'},{address:'https://grpc.eu.ech.world',provider:'ech.world 🌍'},{address:'https://grpc.us.ech.world',provider:'ech.world 🌍'},{address:'https://ech-grpc.softpaws.xyz',provider:'SoftPaws'}],'evm-http-jsonrpc':[{address:'https://rpc.ech.network',provider:'ech.network'},{address:'https://evm.ech.network',provider:'ech.network'},{address:'https://draco.ech.network',provider:'ech.network'},{address:'https://jsonrpc.echelon.nodestake.top',provider:'NodeStake'},{address:'https://jrpc.eu.ech.world',provider:'ech.world 🌍'},{address:'https://jrpc.us.ech.world',provider:'ech.world 🌍'},{address:'https://ech-evm.softpaws.xyz',provider:'SoftPaws'}]},explorers:[{kind:'echelon',url:'https://app.ech.network/explorer',tx_page:'https://app.ech.network/explorer/tx/${txHash}'},{kind:'blockscout',url:'https://scout.ech.network',tx_page:'https://scout.ech.network/tx/${txHash}'},{kind:'ping.pub',url:'https://ping.pub/echelon',tx_page:'https://ping.pub/echelon/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/echelon',tx_page:'https://atomscan.com/echelon/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/echelon',tx_page:'https://atomscan.com/echelon/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'emoney',status:'live',network_type:'mainnet',pretty_name:'e-Money',chain_id:'emoney-3',bech32_prefix:'emoney',daemon_name:'emd',node_home:'$HOME/.emd',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'ungm'},{denom:'eeur'}]},codebase:{git_repo:'https://github.com/e-money/em-ledger',recommended_version:'v1.1.3',compatible_versions:['v1.1.3'],genesis:{genesis_url:'https://raw.githubusercontent.com/e-money/networks/master/emoney-3/genesis.json'}},peers:{seeds:[{id:'708e559271d4d75d7ea2c3842e87d2e71a465684',address:'seed-1.emoney.validator.network:28656',provider:'validator.network'},{id:'336cdb655ea16413a8337e730683ddc0a24af9de',address:'seed-2.emoney.validator.network:28656',provider:'validator.network'},{id:'eb491498b8f91a02090c2feb7ad875df4087772e',address:'seeds.goldenratiostaking.net:1625',provider:'Golden Ratio Staking'},{id:'ecec8933d80da5fccda6bdd72befe7e064279fc1',address:'207.180.213.123:26676',provider:'easy2stake'},{id:'0ad7bc7687112e212bac404670aa24cd6116d097',address:'50.18.83.75:26656',provider:'B-Harvest'},{id:'1723e34f45f54584f44d193ce9fd9c65271ca0b3',address:'13.124.62.83:26656',provider:'B-Harvest'},{id:'34eca4a9142bf9c087a987b572c114dad67a8cc5',address:'172.105.148.191:26656',provider:'Cat Boss'},{id:'0b186517e4d82eb4c000a567e486b7b96bf19752',address:'44.195.95.22:26656',provider:'Cat Boss'},{id:'0b186517e4d82eb4c000a567e486b7b96bf19752',address:'44.195.95.22:26656',provider:'Mr K'},{id:'eed66085c975189e3d498fe61af2fcfb3da34924',address:'217.79.184.40:26656',provider:'MissionControl'},{id:'226d713acb10a1cd09b3b890406b886d7b071cf2',address:'10.105.2.101:26656',provider:'ATEAM'},{id:'552cb87c40f879c8c41005eeb36030502671e7a4',address:'18.156.91.213:26656',provider:'ATEAM'},{id:'170255a4a9b120786d2d6c3931ebf0125087cca0',address:'62.171.171.139:26656',provider:'KalpaTech'},{id:'d12ac664ff9766e0535c836173111e3eed462e79',address:'185.144.83.157:26656',provider:'Inotel'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'emoney.mainnet.seed.autostake.net:26746',provider:'AutoStake 🛡️ Slash Protected'}],persistent_peers:[{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'emoney.mainnet.peer.autostake.net:26746',provider:'AutoStake 🛡️ Slash Protected'}]},apis:{rpc:[{address:'https://rpc-emoney.keplr.app',provider:'chainapsis'},{address:'https://emoney.validator.network',provider:'e-Money'},{address:'https://rpc.emoney.badgerbite.xyz:443',provider:'BadgerBite'},{address:'https://rpc-emoney-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://rpc.emoney.freak12techno.io/',provider:'freak12techno'},{address:'https://e-money-rpc.ibs.team',provider:'Inter Blockchain Services'},{address:'https://rpc.emoney.bh.rocks',provider:'BlockHunters 🎯'}],rest:[{address:'https://lcd-emoney.keplr.app',provider:'chainapsis'},{address:'https://emoney.validator.network/api/',provider:'e-Money'},{address:'https://api-emoney-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://api.emoney.freak12techno.io/',provider:'freak12techno'},{address:'https://e-money-api.ibs.team',provider:'Inter Blockchain Services'},{address:'https://api.emoney.bh.rocks',provider:'BlockHunters 🎯'},{address:'https://emoney.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'}],grpc:[{address:'grpc-emoney-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'grpc.emoney.bh.rocks:443',provider:'BlockHunters 🎯'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/emoney',tx_page:'https://ezstaking.tools/emoney/txs/${txHash}'},{kind:'bigdipper',url:'https://emoney.bigdipper.live/',tx_page:'https://emoney.bigdipper.live/transactions/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/emoney',tx_page:'https://www.mintscan.io/emoney/txs/${txHash}',account_page:'https://www.mintscan.io/emoney/account/${accountAddress}'},{kind:'ping.pub',url:'https://ping.pub/e-money',tx_page:'https://ping.pub/e-money/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/emoney',tx_page:'https://atomscan.com/emoney/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'ethos',status:'live',network_type:'mainnet',pretty_name:'Ethos',chain_id:'ethos_7003-1',bech32_prefix:'ethos',daemon_name:'ethosd',node_home:'$HOME/.ethos',key_algos:['ethsecp256k1'],extra_codecs:['ethermint'],slip44:60,fees:{fee_tokens:[{denom:'aRYT'}]},peers:{seeds:[],persistent_peers:[]},apis:{rpc:[{address:'https://ethos-rpc.provable.dev:443/',provider:'laurel.provable'}],rest:[{address:'https://ethos.provable.dev/rest/',provider:'laurel.provable'}],grpc:[{address:'https://ethos-grpc.provable.dev:443',provider:'laurel.provable'}],'evm-http-jsonrpc':[{address:'https://ethos-evm.provable.dev/',provider:'laurel.provable'}]},explorers:[],logo_URIs:{png:'https://raw.githubusercontent.com/cosmos/chain-registry/master/ethos/images/ethos.png',svg:'https://raw.githubusercontent.com/cosmos/chain-registry/master/ethos/images/ethos.svg'},codebase:{genesis:{genesis_url:''}}},{$schema:'../chain.schema.json',chain_name:'evmos',status:'live',network_type:'mainnet',website:'https://evmos.org/',pretty_name:'Evmos',chain_id:'evmos_9001-2',bech32_prefix:'evmos',node_home:'$HOME/.evmosd',daemon_name:'evmosd',key_algos:['ethsecp256k1'],extra_codecs:['ethermint'],slip44:60,fees:{fee_tokens:[{denom:'aevmos',fixed_min_gas_price:250000000,low_gas_price:20000000000,average_gas_price:25000000000,high_gas_price:40000000000}]},staking:{staking_tokens:[{denom:'aevmos'}]},codebase:{git_repo:'https://github.com/evmos/evmos',recommended_version:'v10.0.1',compatible_versions:['v10.0.0','v10.0.1'],binaries:{'linux/amd64':'https://github.com/evmos/evmos/releases/download/v10.0.0/evmos_10.0.0_Linux_x86_64.tar.gz','linux/arm64':'https://github.com/evmos/evmos/releases/download/v10.0.0/evmos_10.0.0_Linux_arm64.tar.gz','darwin/amd64':'https://github.com/evmos/evmos/releases/download/v10.0.0/evmos_10.0.0_Darwin_x86_64.tar.gz','darwin/arm64':'https://github.com/evmos/evmos/releases/download/v10.0.0/evmos_10.0.0_Darwin_arm64.tar.gz','windows/amd64':'https://github.com/evmos/evmos/releases/download/v10.0.0/evmos_10.0.0_Windows_x86_64.zip'},genesis:{genesis_url:'https://archive.evmos.org/mainnet/genesis.json'}},peers:{seeds:[{id:'babc3f3f7804933265ec9c40ad94f4da8e9e0017',address:'seed.rhinostake.com:13456',provider:'RHINO'},{id:'906840c2f447915f3d0e37bc68221f5494f541db',address:'3.39.58.32:26656',provider:'Cosmostation'},{id:'7aa31684d201f8ebc0b1e832d90d7490345d77ee',address:'52.10.99.253:26656',provider:'Cosmostation'},{id:'5740e4a36e646e80cc5648daf5e983e5b5d8f265',address:'54.39.18.27:26656',provider:'Figment'},{id:'de2c5e946e21360d4ffa3885579fa038a7d9776e',address:'46.101.148.190:26656',provider:'DragonStake'},{id:'588cedb70fa1d98c14a2f2c1456bfa41e1a156a8',address:'evmos-sentry.mercury-nodes.net:29539',provider:'Mercury'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:13456',provider:'Polkachu'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:13456',provider:'Lavender.Five Nodes 🐝'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'evmos.mainnet.seed.autostake.net:26736',provider:'AutoStake 🛡️ Slash Protected'},{id:'40f4fac63da8b1ce8f850b0fa0f79b2699d2ce72',address:'seed.evmos.jerrychong.com:26656',provider:"Jerry's Pool"},{id:'86bd5cb6e762f673f1706e5889e039d5406b4b90',address:'evmos.seed.node75.org:10756',provider:'Pro-nodes75'},{id:'e4f7c3181d0028209c664bfd4c259f2c4d947491',address:'seeds.whispernode.com:13456',provider:'WhisperNode🤐'}],persistent_peers:[{id:'906840c2f447915f3d0e37bc68221f5494f541db',address:'3.39.58.32:26656',provider:'Cosmostation'},{id:'7aa31684d201f8ebc0b1e832d90d7490345d77ee',address:'52.10.99.253:26656',provider:'Cosmostation'},{id:'5740e4a36e646e80cc5648daf5e983e5b5d8f265',address:'54.39.18.27:26656',provider:'Figment'},{id:'de2c5e946e21360d4ffa3885579fa038a7d9776e',address:'46.101.148.190:26656',provider:'DragonStake'},{id:'588cedb70fa1d98c14a2f2c1456bfa41e1a156a8',address:'evmos-sentry.mercury-nodes.net:29539',provider:'Mercury'},{id:'a7779498a15dfd5adc678f0f6672935413413f42',address:'alice.peers.evmos.bh.rocks:26656',provider:'BlockHunters'},{id:'d4a5fcc56f369665c232788c22844dc3a018fe08',address:'peer.evmos.silknodes.io:26602',provider:'Silk Nodes'},{id:'2d588e1bc71431f6c677a9ed7f5ff8f7caa82573',address:'evmos-rpc.agoranodes.com:26656',provider:'AgoraNodes'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'evmos.mainnet.peer.autostake.net:26736',provider:'AutoStake 🛡️ Slash Protected'}]},apis:{rpc:[{address:'https://rpc.evmos.kingnodes.com',provider:'kingnodes'},{address:'https://rpc-evmos.ecostake.com',provider:'ecostake'},{address:'https://rpc-evmos.whispernode.com',provider:' WhisperNode 🤐'},{address:'https://evmos.rpc.interchain.ivaldilabs.xyz',provider:'Ivaldi Labs'},{address:'https://evmos-rpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://tendermint.bd.evmos.org:26657',provider:'Blockdaemon'},{address:'https://rpc-evmos-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'https://rpc.evmos.posthuman.digital',provider:'POSTHUMAN ꝏ DVS'},{address:'https://rpc.evmos.interbloc.org',provider:'Interbloc'},{address:'https://rpc.evmos.testnet.run',provider:'TestNetRun'},{address:'https://rpc.evmos.nodestake.top',provider:'NodeStake'},{address:'https://rpc.evmos.bh.rocks',provider:'BlockHunters'},{address:'https://rpc-evmos.goldenratiostaking.net',provider:'Golden Ratio Staking'},{address:'https://rpc.evmos.chaintools.tech/',provider:'ChainTools'},{address:'https://evmos-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc.evmos.silknodes.io/',provider:'Silk Nodes'},{address:'https://evmos-rpc.agoranodes.com/',provider:'AgoraNodes'},{address:'https://rpc.evmos.silentvalidator.com/',provider:'silent'},{address:'https://rpc.evmos.tcnetwork.io',provider:'TC Network'},{address:'https://evmos.rpc.stakin-nodes.com',provider:'Stakin'},{address:'https://rpc-evmos.architectnodes.com',provider:'Architect Nodes'},{address:'https://evmos-rpc.validatrium.club',provider:'Validatrium'}],rest:[{address:'https://api.evmos.kingnodes.com',provider:'kingnodes'},{address:'https://rest-evmos.ecostake.com',provider:'ecostake'},{address:'https://lcd-evmos.whispernode.com',provider:' WhisperNode 🤐'},{address:'https://evmos.rest.interchain.ivaldilabs.xyz',provider:'Ivaldi Labs'},{address:'https://rest.bd.evmos.org:1317',provider:'Blockdaemon'},{address:'https://evmos-api.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://api-evmos-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://lcd.evmos.posthuman.digital',provider:'POSTHUMAN ꝏ DVS'},{address:'https://api.evmos.interbloc.org',provider:'Interbloc'},{address:'https://api.evmos.testnet.run',provider:'TestNetRun'},{address:'https://lcd.evmos.bh.rocks',provider:'BlockHunters'},{address:'https://rpc.evmos.chaintools.tech/',provider:'ChainTools'},{address:'https://api.evmos.nodestake.top',provider:'NodeStake'},{address:'https://evmos-api.polkachu.com',provider:'Polkachu'},{address:'https://api.evmos.silknodes.io/',provider:'Silk Nodes'},{address:'https://evmos-rest.agoranodes.com',provider:'AgoraNodes'},{address:'https://api.evmos.silentvalidator.com/',provider:'silent'},{address:'https://rest.evmos.tcnetwork.io',provider:'TC Network'},{address:'https://evmos.rest.stakin-nodes.com',provider:'Stakin'},{address:'https://rest-evmos.architectnodes.com',provider:'Architect Nodes'},{address:'https://evmos-api.validatrium.club',provider:'Validatrium'},{address:'https://evmos.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'}],grpc:[{address:'https://grpc.evmos.kingnodes.com',provider:'kingnodes'},{address:'https://grpc.bd.evmos.org:9090',provider:'evmos.org'},{address:'grpc-evmos-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'grpc.evmos.posthuman.digital:443',provider:'POSTHUMAN ꝏ DVS'},{address:'https://evmos-grpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'evmos.grpc.interchain.ivaldilabs.xyz:443',provider:'Ivaldi Labs'},{address:'grpc.evmos.testnet.run:8091',provider:'TestNetRun'},{address:'https://grpc.evmos.nodestake.top',provider:'NodeStake'},{address:'https://grpc.evmos.bh.rocks',provider:'BlockHunters'},{address:'https://evmos.grpcui.chaintools.host/',provider:'ChainTools'},{address:'evmos-grpc.polkachu.com:13490',provider:'Polkachu'},{address:'https://grpc.evmos.silknodes.io/',provider:'Silk Nodes'},{address:'https://evmos-grpc.agoranodes.com',provider:'AgoraNodes'},{address:'https://grpc.evmos.silentvalidator.com/',provider:'silent'},{address:'evmos.grpc.stakin-nodes.com:443',provider:'Stakin'}],'evm-http-jsonrpc':[{address:'https://eth.bd.evmos.org:8545',provider:'Blockdaemon'},{address:'https://jsonrpc-evmos-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://evmos-json-rpc.stakely.io',provider:'Stakely'},{address:'https://jsonrpc.evmos.nodestake.top',provider:'NodeStake'},{address:'https://json-rpc.evmos.bh.rocks',provider:'BlockHunters'},{address:'https://evmos-json-rpc.agoranodes.com',provider:'AgoraNodes'},{address:'https://evm-rpc.evmos.silentvalidator.com/',provider:'silent'},{address:'https://json-rpc.evmos.tcnetwork.io',provider:'TC Network'},{address:'https://jsonrpc-evmos.goldenratiostaking.net',provider:'Golden Ratio Staking'},{address:'https://evmosevm.rpc.stakin-nodes.com',provider:'Stakin'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/evmos',tx_page:'https://ezstaking.tools/evmos/txs/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/evmos',tx_page:'https://www.mintscan.io/evmos/txs/${txHash}',account_page:'https://www.mintscan.io/evmos/account/${accountAddress}'},{kind:'bigdipper',url:'https://evmos.bigdipper.live',tx_page:'https://evmos.bigdipper.live/transactions/${txHash}'},{kind:'blockscout',url:'https://evm.evmos.org',tx_page:'https://evm.evmos.org/tx/${txHash}'},{kind:'ping.pub',url:'https://ping.pub/evmos',tx_page:'https://ping.pub/evmos/tx/${txHash}'},{kind:'explorers.guru',url:'https://evmos.explorers.guru',tx_page:'https://evmos.explorers.guru/transaction/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/evmos',tx_page:'https://atomscan.com/evmos/transactions/${txHash}'},{kind:'tcnetwork',url:'https://evmos.tcnetwork.io',tx_page:'https://evmos.tcnetwork.io/transaction/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'fetchhub',status:'live',network_type:'mainnet',pretty_name:'Fetch.ai',chain_id:'fetchhub-4',bech32_prefix:'fetch',daemon_name:'fetchd',node_home:'$HOME/.fetchd',slip44:118,fees:{fee_tokens:[{denom:'afet',low_gas_price:0.025,average_gas_price:0.025,high_gas_price:0.035}]},staking:{staking_tokens:[{denom:'afet'}]},codebase:{git_repo:'https://github.com/fetchai/fetchd',recommended_version:'v0.10.5',compatible_versions:['v0.10.5'],genesis:{genesis_url:'https://raw.githubusercontent.com/fetchai/genesis-fetchhub/fetchhub-4/fetchhub-4/data/genesis_migrated_5300200.json'}},peers:{seeds:[{id:'17693da418c15c95d629994a320e2c4f51a8069b',address:'connect-fetchhub.fetch.ai:36456',provider:'fetch.ai'},{id:'a575c681c2861fe945f77cb3aba0357da294f1f2',address:'connect-fetchhub.fetch.ai:36457',provider:'fetch.ai'},{id:'d7cda986c9f59ab9e05058a803c3d0300d15d8da',address:'connect-fetchhub.fetch.ai:36458',provider:'fetch.ai'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:15256',provider:'Polkachu'}],persistent_peers:[{id:'e3d21a822e3903a96c14bfd8f8e06132f198d7c4',address:'sentries-fetchhub.fetch.ai:36400',provider:'fetch.ai'},{id:'4be243f5d22403f6069d2ed3c4a79161216f22a0',address:'sentries-fetchhub.fetch.ai:36401',provider:'fetch.ai'},{id:'d6faadb9e785642b355136ed278d5b5d6b2f87dd',address:'sentries-fetchhub.fetch.ai:36402',provider:'fetch.ai'}]},apis:{rpc:[{address:'https://rpc-fetchhub.fetch.ai:443',provider:'fetch.ai'},{address:'https://fetchapi.terminet.io',provider:'Terminet'},{address:'https://rpc-fetchhub-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://fetch-rpc.polkachu.com',provider:'Polkachu'},{address:'https://fetchai-rpc.kleomedes.network',provider:'Kleomedes'},{address:'https://fetch-rpc.teasel.org',provider:'𝗧𝗲𝗮𝘀𝗲𝗹'},{address:'https://fetch-rpc.antrixy.org',provider:'Antrix'},{address:'https://rpc-fetch.architectnodes.com',provider:'Architect Nodes'},{address:'https://fetch-rpc.ibs.team',provider:'Inter Blockchain Services'}],rest:[{address:'https://rest-fetchhub.fetch.ai',provider:'fetch.ai'},{address:'https://api-fetchhub-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://fetch-api.polkachu.com',provider:'Polkachu'},{address:'https://fetchai-api.kleomedes.network',provider:'Kleomedes'},{address:'https://fetch-rest.teasel.org',provider:'𝗧𝗲𝗮𝘀𝗲𝗹'},{address:'https://fetch-rest.antrixy.org',provider:'Antrix'},{address:'https://rest-fetch.architectnodes.com',provider:'Architect Nodes'},{address:'https://fetch-api.ibs.team',provider:'Inter Blockchain Services'}],grpc:[{address:'https://grpc-fetchhub.fetch.ai:443',provider:'fetch.ai'},{address:'grpc-fetchhub-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'fetch-grpc.polkachu.com:15290',provider:'Polkachu'},{address:'fetch-grpc.teasel.org:443',provider:'𝗧𝗲𝗮𝘀𝗲𝗹'},{address:'fetch-grpc.antrixy.org:443',provider:'Antrix'}]},explorers:[{kind:'mintscan',url:'https://www.mintscan.io/fetchai',tx_page:'https://www.mintscan.io/fetchai/txs/${txHash}',account_page:'https://www.mintscan.io/fetchai/account/${accountAddress}'},{kind:'bigdipper',url:'https://explore-fetchhub.fetch.ai',tx_page:'https://explore-fetchhub.fetch.ai/transactions/${txHash}'},{kind:'ping.pub',url:'https://ping.pub/fetchhub',tx_page:'https://ping.pub/fetchhub/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/fetchai',tx_page:'https://atomscan.com/fetchai/transactions/${txHash}'},{kind:'bigdipper',url:'https://fetch-explorer.teasel.org',tx_page:'https://fetch-explorer.teasel.org/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'firmachain',status:'live',network_type:'mainnet',website:'https://firmachain.org/',pretty_name:'FirmaChain',chain_id:'colosseum-1',bech32_prefix:'firma',slip44:7777777,fees:{fee_tokens:[{denom:'ufct',fixed_min_gas_price:0.1}]},codebase:{git_repo:'https://github.com/firmachain/firmachain',recommended_version:'v0.3.3',compatible_versions:['v0.3.3'],genesis:{genesis_url:'https://raw.githubusercontent.com/FirmaChain/mainnet/main/colosseum-1/genesis.json'}},daemon_name:'firmachaind',node_home:'$HOME/.firmachain',key_algos:['secp256k1'],peers:{seeds:[{id:'f89dcc15241e30323ae6f491011779d53f9a5487',address:'mainnet-seed1.firmachain.dev:26656',provider:'FirmaChain'},{id:'04cce0da4cf5ceb5ffc04d158faddfc5dc419154',address:'mainnet-seed2.firmachain.dev:26656',provider:'FirmaChain'},{id:'940977bdc070422b3a62e4985f2fe79b7ee737f7',address:'mainnet-seed3.firmachain.dev:26656',provider:'FirmaChain'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:16456',provider:'Lavender.Five Nodes 🐝'}]},apis:{rpc:[{address:'https://lcd-mainnet.firmachain.dev:26657',provider:'FirmaChain'},{address:'https://rpc.firmachain.chaintools.tech/',provider:'ChainTools'},{address:'https://firmachain-rpc.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'}],rest:[{address:'https://lcd-mainnet.firmachain.dev:1317',provider:'FirmaChain'},{address:'https://api.firmachain.chaintools.tech/',provider:'ChainTools'},{address:'https://firmachain-api.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'}],grpc:[{address:'https://firmachain-grpc.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/firmachain',tx_page:'https://ezstaking.tools/firmachain/txs/${txHash}'},{kind:'bigdipper',url:'https://explorer.firmachain.dev',tx_page:'https://explorer.firmachain.dev/transactions/${txHash}'},{kind:'explorer.ChainTools',url:'https://explorer.chaintools.tech/firmachain',tx_page:'https://explorer.chaintools.tech/firmachain/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'galaxy',status:'live',network_type:'mainnet',website:'https://galaxychain.zone/',pretty_name:'Galaxy',chain_id:'galaxy-1',bech32_prefix:'galaxy',daemon_name:'galaxyd',node_home:'$HOME/.galaxy',slip44:118,fees:{fee_tokens:[{denom:'uglx',low_gas_price:0.025,average_gas_price:0.025,high_gas_price:0.035}]},staking:{staking_tokens:[{denom:'uglx'}]},codebase:{git_repo:'https://github.com/galaxies-labs/galaxy',recommended_version:'v1.0.0',compatible_versions:['v1.0.0'],binaries:{'linux/amd64':'https://github.com/galaxies-labs/galaxy/releases/download/v1.0.0/galaxy_v1.0.0_linux_amd64.tar.gz','darwin/amd64':'https://github.com/galaxies-labs/galaxy/releases/download/v1.0.0/galaxy_v1.0.0_darwin_amd64.tar.gz'},genesis:{genesis_url:'https://github.com/OrbisWorlds/networks/raw/main/galaxy-1/genesis.json'}},peers:{seeds:[{id:'574e8402e255f895680db2904168724258fd6ff8',address:'13.125.60.249:26656',provider:'Galaxies Labs'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:14856',provider:'Polkachu'}],persistent_peers:[{id:'bf446887a7a00c8babfeba2f92ba569a206a3ea7',address:'65.108.71.140:26676',provider:'StakeLab'},{id:'1e9ee1911298a15128c8485ea47b18be08939e01',address:'136.244.29.116:38656',provider:'OtterSync'},{id:'a4bd8fed416aa29d9cc061e2b9dffa7f4b679c91',address:'65.21.131.144:30656',provider:'Blockscope'},{id:'801f4e17769bd2ee02b27720d901a42cb8d052ea',address:'65.108.192.3:24656',provider:'Paranormal Brothers'},{id:'8fc2d8c2fadd278eae617a9c2a2f008e01e8ef68',address:'206.246.71.251:26656',provider:'TAKESHI'},{id:'10f7caa39969dc36450b138848a06e7deabe6fed',address:'95.111.244.128:26656',provider:'Pathrocknetwork'},{id:'cd8fd9e1677c701015b8909116f88974028cd0b4',address:'203.135.141.28:26656',provider:'Decentralizehk'},{id:'b4b6f1563f2891ed5735d6133d78fc7c17ce12d0',address:'185.234.69.139:26656',provider:'DomaNodes'},{id:'5b3fd251b74e6af11f4c71d420fd1837f4869e85',address:'45.33.62.64:26656',provider:'FireStake'},{id:'51b3263a333de94198fe4c4d819b48fbd107f93a',address:'5.9.13.234:26356',provider:'Goooodnes'},{id:'e21bf32eaedee13d8dc240baacf23fee97a8edac',address:'141.94.141.144:43656',provider:'cyberG'},{id:'8b447bd4fa1e56d8252538a6e23573e5e78924fa',address:'161.97.155.94:26656',provider:'3Tekos'},{id:'8d059154ea0a6e25c5695a1e163e601482769604',address:'95.217.207.236:31256',provider:'web34ever'},{id:'7ded7314f57a078076507d7b291e100ad2dc158b',address:'65.108.41.172:36656',provider:'moonsoon'}]},apis:{rpc:[{address:'https://rpc.galaxychain.zone'},{address:'https://galaxy-rpc.polkachu.com/',provider:'Polkachu'},{address:'https://galaxy.nodejumper.io',provider:'Nodejumper 🚀'},{address:'https://rpc.galaxy.bh.rocks',provider:'BlockHunters 🎯'}],rest:[{address:'https://rest.galaxychain.zone'},{address:'https://galaxy-api.polkachu.com',provider:'Polkachu'},{address:'https://galaxy.nodejumper.io:1317',provider:'Nodejumper 🚀'},{address:'https://api.galaxy.bh.rocks',provider:'BlockHunters 🎯'}],grpc:[{address:'galaxy-grpc.polkachu.com:14890',provider:'Polkachu'},{address:'https://galaxy.nodejumper.io:9090',provider:'Nodejumper 🚀'},{address:'https://grpc.galaxy.bh.rocks',provider:'BlockHunters 🎯'}]},explorers:[{kind:'ping.pub',url:'https://explorer.postcapitalist.io/Galaxy',tx_page:'https://explorer.postcapitalist.io/Galaxy/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'genesisl1',status:'live',network_type:'mainnet',pretty_name:'GenesisL1',chain_id:'genesis_29-2',bech32_prefix:'genesis',daemon_name:'genesisd',node_home:'$HOME/.genesisd',slip44:118,fees:{fee_tokens:[{denom:'el1',low_gas_price:999999999,average_gas_price:1000000000,high_gas_price:1000000001}]},staking:{staking_tokens:[{denom:'el1'}]},codebase:{git_repo:'https://github.com/alpha-omega-labs/genesisd',recommended_version:'v0.3.0',compatible_versions:['v0.3.0'],genesis:{genesis_url:'https://github.com/alpha-omega-labs/genesisd/raw/neolithic/genesis_29-1-state/genesis.json'}},peers:{persistent_peers:[{id:'36111b4156ace8f1cfa5584c3ccf479de4d94936',address:'65.21.34.226:26656',provider:'GenesisL1'},{id:'c23b3d58ccae0cf34fc12075c933659ff8cca200',address:'95.217.207.154:26656'},{id:'37d8aa8a31d66d663586ba7b803afd68c01126c4',address:'65.21.134.70:26656'},{id:'d7d4ea7a661c40305cab84ac227cdb3814df4e43',address:'139.162.195.228:26656'},{id:'be81a20b7134552e270774ec861c4998fabc2969',address:'genesisl1.3ventures.io:26656'}]},apis:{rpc:[{address:'https://26657.genesisl1.org',provider:'GenesisL1'}],rest:[{address:'https://api.genesisl1.org',provider:'GenesisL1'}]},explorers:[{kind:'ping.pub',url:'https://ping.pub/genesisL1',tx_page:'https://ping.pub/genesisL1/tx/${txHash}'},{kind:'ping.pub',url:'https://exp.utsa.tech/genesis',tx_page:'https://exp.utsa.tech/genesis/tx/${txHash}'},{kind:'ATOMScan',url:'https://atomscan.com/genesisl1',tx_page:'https://atomscan.com/genesisl1/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'gravitybridge',status:'live',network_type:'mainnet',website:'https://www.gravitybridge.net/',pretty_name:'Gravity Bridge',chain_id:'gravity-bridge-3',bech32_prefix:'gravity',daemon_name:'gravity',node_home:'$HOME/.gravity',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'ugraviton',fixed_min_gas_price:0,low_gas_price:0,average_gas_price:0,high_gas_price:0.035}]},staking:{staking_tokens:[{denom:'ugraviton'}]},codebase:{git_repo:'https://github.com/Gravity-Bridge/Gravity-Bridge',recommended_version:'v1.8.0',compatible_versions:['v1.8.0'],binaries:{'linux/amd64':'https://github.com/Gravity-Bridge/Gravity-Bridge/releases/download/v1.8.0/gravity-linux-amd64','linux/arm64':'https://github.com/Gravity-Bridge/Gravity-Bridge/releases/download/v1.8.0/gravity-linux-arm64','darwin/amd64':'https://github.com/Gravity-Bridge/Gravity-Bridge/releases/download/v1.8.0/gravity-darwin-amd64','windows/amd64':'https://github.com/Gravity-Bridge/Gravity-Bridge/releases/download/v1.8.0/gravity-windows-amd64.exe'},genesis:{genesis_url:'https://raw.githubusercontent.com/Gravity-Bridge/Gravity-Docs/main/genesis.json'}},peers:{seeds:[{id:'2b089bfb4c7366efb402b48376a7209632380c9c',address:'65.19.136.133:26656',provider:'althea'},{id:'63e662f5e048d4902c7c7126291cf1fc17687e3c',address:'95.211.103.175:26656',provider:'amhost'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:14256',provider:'Polkachu'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:14256',provider:'Lavender.Five Nodes 🐝'},{id:'86bd5cb6e762f673f1706e5889e039d5406b4b90',address:'gravity.seed.node75.org:10556',provider:'Pro-Nodes'}],persistent_peers:[{id:'21be3f7686c24f8bd9442b325a50f5b5227777a7',address:'202.61.231.15:26656',provider:'SkyNet'},{id:'9aa7e0c250466a2a147f8b7d2b886b0d45d44ca0',address:'45.138.49.222:26656',provider:'ps350'}]},apis:{rpc:[{address:'https://gravitychain.io:26657',provider:'althea'},{address:'http://gravity-bridge-1-08.nodes.amhost.net:26657',provider:'amhost'},{address:'https://gravity-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc-gravitybridge-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://rpc.gravity-bridge.nodestake.top',provider:'NodeStake'},{address:'https://gravitybridge-rpc.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://rpc.gravity.bh.rocks/',provider:'BlockHunters 🎯'}],rest:[{address:'https://gravitychain.io:1317',provider:'althea'},{address:'https://api-gravitybridge-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://api.gravity-bridge.nodestake.top',provider:'NodeStake'},{address:'https://gravity-api.polkachu.com',provider:'Polkachu'},{address:'https://gravitybridge-api.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://api.gravity.bh.rocks/',provider:'BlockHunters 🎯'}],grpc:[{address:'https://gravitychain.io:9090',provider:'althea'},{address:'gravity-bridge-1-08.nodes.amhost.net:9090',provider:'amhost'},{address:'grpc-gravitybridge-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'https://grpc.gravity-bridge.nodestake.top',provider:'NodeStake'},{address:'gravity-grpc.polkachu.com:14290',provider:'Polkachu'},{address:'https://gravitybridge-grpc.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://grpc.gravity.bh.rocks:443/',provider:'BlockHunters 🎯'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/gravitybridge',tx_page:'https://ezstaking.tools/gravitybridge/txs/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/gravity-bridge',tx_page:'https://www.mintscan.io/gravity-bridge/${txHash}',account_page:'https://www.mintscan.io/gravity-bridge/account/${accountAddress}'},{kind:'ping.pub',url:'https://ping.pub/gravity-bridge',tx_page:'https://ping.pub/gravity-bridge/tx/${txHash}'},{kind:'explorers.guru',url:'https://gravity.explorers.guru',tx_page:'https://gravity.explorers.guru/transaction/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/gravity-bridge',tx_page:'https://atomscan.com/gravity-bridge/transactions/${txHash}'},{kind:'TC Network',url:'https://explorer.tcnetwork.io/gravitybridge',tx_page:'https://explorer.tcnetwork.io/gravitybridge/transaction/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'idep',status:'live',network_type:'mainnet',website:'https://www.idep.network/',pretty_name:'IDEP',chain_id:'Antora',bech32_prefix:'idep',daemon_name:'idep',node_home:'$HOME/.ion',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'idep',fixed_min_gas_price:0}]},codebase:{git_repo:'https://github.com/IDEP-network/ion',recommended_version:'v1.0.0',compatible_versions:['v1.0.0'],binaries:{'linux/amd64':'https://github.com/IDEP-network/Antora/raw/main/iond'},genesis:{genesis_url:'https://github.com/IDEP-network/Antora/raw/main/genesis.json'}},peers:{seeds:[{id:'6e52997400aaa1b3d2155e45cf2559bf7a4c5e76',address:'164.92.161.91:26656',provider:'IDEP'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:16556',provider:'Lavender.Five Nodes 🐝'}],persistent_peers:[{id:'8ffc74dbcd5ab32bc89e058ec53060d5762f88b5',address:'178.63.100.102:26656',provider:'IDEP'},{id:'3a8cfcbaac7d102e9cfad31f856e1852be2125f3',address:'sentry-1.idep.ezstaking.xyz:26756',provider:'EZStaking.io'},{id:'32a1a93033968e391266484cd4896dfc9b326e4c',address:'sentry-2.idep.ezstaking.xyz:26789',provider:'EZStaking.io'}]},apis:{rpc:[{address:'https://rpc.idep.nodestake.top',provider:'NodeStake'},{address:'https://idep-rpc.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'}],rest:[{address:'https://api.idep.nodestake.top',provider:'NodeStake'},{address:'https://idep-api.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'}],grpc:[{address:'https://grpc.idep.nodestake.top',provider:'NodeStake'},{address:'https://idep-grpc.lavenderfive.com:443/',provider:'Lavender.Five Nodes 🐝'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/idep',tx_page:'https://ezstaking.tools/idep/txs/${txHash}'},{kind:'chadscan',url:'https://chadscan.com',tx_page:'https://chadscan.com/transactions/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/idep',tx_page:'https://atomscan.com/idep/transactions/${txHash}'},{kind:'TC Network',url:'https://explorer.tcnetwork.io/idep',tx_page:'https://explorer.tcnetwork.io/idep/transaction/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'impacthub',status:'live',network_type:'mainnet',website:'https://www.ixo.world/',pretty_name:'ixo',chain_id:'ixo-4',bech32_prefix:'ixo',daemon_name:'ixod',node_home:'$HOME/.ixod',key_algos:['secp256k1','ed25519'],slip44:118,fees:{fee_tokens:[{denom:'uixo',fixed_min_gas_price:0.025}]},codebase:{git_repo:'https://github.com/ixofoundation/ixo-blockchain',recommended_version:'v0.19.2',compatible_versions:['v0.19.2'],genesis:{genesis_url:'https://raw.githubusercontent.com/ixofoundation/genesis/980961a8e344dd39bd092493e58b4421aa1c0014/ixo-4/genesis.json'}},peers:{seeds:[{id:'36e4738c7efcf353d3048e5e6073406d045bae9d',address:'80.64.208.43:26656',provider:'simplyvc'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:16656',provider:'Lavender.Five Nodes 🐝'}],persistent_peers:[{id:'36e4738c7efcf353d3048e5e6073406d045bae9d',address:'80.64.208.43:26656',provider:'simplyvc'},{id:'c95af93f0386f8e19e65997262c9f874d1901dc5',address:'18.163.242.188:26656'}]},apis:{rpc:[{address:'https://rpc-impacthub.keplr.app',provider:'chainapsis'},{address:'https://proxies.sifchain.finance/api/impacthub-3/rpc',provider:'sifchain'},{address:'https://impacthub.ixo.world/rpc/',provider:'ixoworld'},{address:'https://rpc-ixo-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://impacthub-rpc.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://ixo-rpc.ibs.team',provider:'Inter Blockchain Services'}],rest:[{address:'https://lcd-impacthub.keplr.app',provider:'chainapsis'},{address:'https://proxies.sifchain.finance/api/impacthub-3/rest',provider:'sifchain'},{address:'http://18.220.101.192:1317/',provider:'regen'},{address:'https://impacthub.ixo.world/rest/',provider:'ixoworld'},{address:'https://api-ixo-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://impacthub-api.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://ixo-api.ibs.team',provider:'Inter Blockchain Services'}],grpc:[{address:'grpc-ixo-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'https://impacthub-grpc.lavenderfive.com:443/',provider:'Lavender.Five Nodes 🐝'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/impacthub',tx_page:'https://ezstaking.tools/impacthub/txs/${txHash}'},{kind:'bigdipper',url:'https://blockscan.ixo.world',tx_page:'https://blockscan.ixo.world/transactions/${txHash}'},{kind:'ping.pub',url:'https://ping.pub/ixo',tx_page:'https://ping.pub/ixo/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/ixo',tx_page:'https://atomscan.com/ixo/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'imversed',status:'live',network_type:'mainnet',website:'https://imversed.network/',pretty_name:'Imversed',chain_id:'imversed_5555555-1',bech32_prefix:'imv',daemon_name:'imversed',node_home:'$HOME/.imversed',key_algos:['ethsecp256k1'],extra_codecs:['ethermint'],slip44:60,fees:{fee_tokens:[{denom:'aimv',fixed_min_gas_price:250000000,low_gas_price:20000000000,average_gas_price:25000000000,high_gas_price:40000000000}]},staking:{staking_tokens:[{denom:'aimv'}]},codebase:{git_repo:'https://github.com/imversed/imversed',recommended_version:'v3.11',compatible_versions:['v3.11'],binaries:{'linux/amd64':'https://github.com/imversed/imversed/releases/download/v3.11/imversed_3.11_Linux_amd64.tar.gz'},genesis:{genesis_url:'https://static.imversed.com/mainnet/genesis.json'}},peers:{seeds:[{id:'6413d43ff0dce9400515f24e8e93a0cf28f0efff',address:'35.209.184.54:26656'}],persistent_peers:[{id:'0968486e82c910b1d7adaacb43bf7e633b19665a',address:'35.209.184.219:26656'}]},apis:{rpc:[{address:'https://rpc.imversed.network:443',provider:'imversed'}],grpc:[{address:'https://grpc.imversed.network:443',provider:'imversed'}],rest:[{address:'https://rest.imversed.network:443',provider:'imversed'}],'evm-http-jsonrpc':[{address:'https://jsonrpc.imversed.network:443',provider:'imversed'}]},explorers:[{kind:'blockscout',url:'https://txe.imversed.network/',tx_page:'https://txe.imversed.network/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'injective',status:'live',network_type:'mainnet',website:'https://injective.com/',pretty_name:'Injective',chain_id:'injective-1',bech32_prefix:'inj',extra_codecs:['injective'],slip44:60,daemon_name:'injectived',node_home:'$HOME/.injectived',fees:{fee_tokens:[{denom:'inj',low_gas_price:500000000,average_gas_price:700000000,high_gas_price:900000000}]},staking:{staking_tokens:[{denom:'inj'}]},codebase:{git_repo:'https://github.com/InjectiveLabs/injective-chain-releases',recommended_version:'v1.8.0-1668679102',compatible_versions:['v1.8.0-1668679102'],binaries:{'linux/amd64':'https://github.com/InjectiveLabs/injective-chain-releases/releases/download/v1.8.0-1668679102/linux-amd64.zip','darwin/amd64':'https://github.com/InjectiveLabs/injective-chain-releases/releases/download/v1.8.0-1668679102/darwin-amd64.zip'},genesis:{genesis_url:'https://raw.githubusercontent.com/InjectiveLabs/mainnet-config/master/10001/genesis.json'}},peers:{seeds:[{id:'38c18461209694e1f667ff2c8636ba827cc01c86',address:'176.9.143.252:11751',provider:'injectivelabs.org'},{id:'4f9025feca44211eddc26cd983372114947b2e85',address:'176.9.140.49:11751',provider:'injectivelabs.org'},{id:'c98bb1b889ddb58b46e4ad3726c1382d37cd5609',address:'65.109.51.80:11751',provider:'injectivelabs.org'},{id:'23d0eea9bb42316ff5ea2f8b4cd8475ef3f35209',address:'65.109.36.70:11751',provider:'injectivelabs.org'},{id:'f9ae40fb4a37b63bea573cc0509b4a63baa1a37a',address:'15.235.114.80:11751',provider:'injectivelabs.org'},{id:'7f3473ddab10322b63789acb4ac58647929111ba',address:'15.235.13.116:11751',provider:'injectivelabs.org'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:14356',provider:'polkachu.com'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'injective.mainnet.seed.autostake.net:26726',provider:'AutoStake 🛡️ Slash Protected'},{id:'1846e76e14913124a07e231586d487a0636c0296',address:'tenderseed.ccvalidators.com:26007',provider:'ccvalidators.com'}],persistent_peers:[{id:'38c18461209694e1f667ff2c8636ba827cc01c86',address:'176.9.143.252:11751',provider:'injectivelabs.org'},{id:'4f9025feca44211eddc26cd983372114947b2e85',address:'176.9.140.49:11751',provider:'injectivelabs.org'},{id:'c98bb1b889ddb58b46e4ad3726c1382d37cd5609',address:'65.109.51.80:11751',provider:'injectivelabs.org'},{id:'23d0eea9bb42316ff5ea2f8b4cd8475ef3f35209',address:'65.109.36.70:11751',provider:'injectivelabs.org'},{id:'f9ae40fb4a37b63bea573cc0509b4a63baa1a37a',address:'15.235.114.80:11751',provider:'injectivelabs.org'},{id:'7f3473ddab10322b63789acb4ac58647929111ba',address:'15.235.13.116:11751',provider:'injectivelabs.org'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'injective.mainnet.peer.autostake.net:26726',provider:'AutoStake 🛡️ Slash Protected'}]},apis:{rpc:[{address:'https://k8s.global.mainnet.tm.injective.network:443',provider:'Injectivelabs'},{address:'https://injective-rpc.quickapi.com:443',provider:'Chainlayer'},{address:'https://injective-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc-injective-ia.cosmosia.notional.ventures/',provider:'Notional'}],rest:[{address:'https://k8s.global.mainnet.lcd.injective.network:443',provider:'Injectivelabs'},{address:'https://injective-lcd.quickapi.com:443',provider:'Chainlayer'},{address:'https://api-injective-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://injective-api.polkachu.com',provider:'Polkachu'},{address:'https://injective.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'}],grpc:[{address:'k8s.global.mainnet.chain.grpc.injective.network:443',provider:'Injectivelabs'},{address:'grpc-injective-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'injective-grpc.polkachu.com:14390',provider:'Polkachu'}]},explorers:[{kind:'injectiveprotocol',url:'https://explorer.injective.network/',tx_page:'https://explorer.injective.network/transaction/${txHash}'},{kind:'ping.pub',url:'https://ping.pub/injective',tx_page:'https://ping.pub/injective/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/injective',tx_page:'https://atomscan.com/injective/transactions/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/injective',tx_page:'https://www.mintscan.io/injective/${txHash}',account_page:'https://www.mintscan.io/injective/account/${accountAddress}'}]},{$schema:'../chain.schema.json',chain_name:'irisnet',status:'live',network_type:'mainnet',pretty_name:'IRISnet',chain_id:'irishub-1',bech32_prefix:'iaa',daemon_name:'iris',node_home:'$HOME/.iris',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'uiris'}]},staking:{staking_tokens:[{denom:'uiris'}]},codebase:{git_repo:'https://github.com/irisnet/irishub',recommended_version:'v1.3.0',compatible_versions:['v1.3.0'],genesis:{genesis_url:'https://raw.githubusercontent.com/irisnet/mainnet/master/config/genesis.json'}},peers:{seeds:[{id:'6a6de770deaa4b8c061dffd82e9c7f4d40c2165d',address:'seed-1.mainnet.irisnet.org:26656'},{id:'a17d7923293203c64ba75723db4d5f28e642f469',address:'seed-2.mainnet.irisnet.org:26656'}],persistent_peers:[{id:'fdc0406afdd3acc63f74f5439e09104f663a7c1f',address:'44.241.177.178:26656',provider:'cosmostation'},{id:'090bcbe5302e6104821a96c4899912870db04cb9',address:'52.11.128.123:26656',provider:'cosmostation'},{id:'83b3f989f3ce089afdf733f8aa06e792d7e00c08',address:'3.34.6.30:26656',provider:'cosmostation'},{id:'87f18756b93d835c59fe5ce2a8da51858837eb5b',address:'54.180.15.28:26656',provider:'Node-A-Team'},{id:'90e48220190b16cad95145b6213d512d703e5617',address:'138.197.158.189:26656',provider:'Figment'},{id:'ebfb43ca1b592b5f8a1faf3e2aa1a34e8e1099cc',address:'iris01.dokia.cloud:26656',provider:'Dokia'},{id:'92fadc989ed29aee0d46afce3226f8565d1f36cb',address:'144.91.116.17:46656',provider:'syncnode'},{id:'4ac6200974d3fd80a8e49d145a2c254ed37a9b9a',address:'159.69.106.156:26656',provider:'P2P.ORG'},{id:'4e02a4b4f4350ea2b770cd03dc41fedcadb13176',address:'159.69.55.206:26656',provider:'P2P.ORG'},{id:'84cc32adca3986b35953886ad075431d318a98b5',address:'52.214.130.28:46656',provider:'stake.fish'}]},apis:{rpc:[{address:'https://rpc-iris.keplr.app',provider:'chainapsis'},{address:'https://rpc-irisnet-ia.cosmosia.notional.ventures/',provider:'Notional'}],rest:[{address:'https://lcd-iris.keplr.app',provider:'chainapsis'},{address:'https://api-irisnet-ia.cosmosia.notional.ventures/',provider:'Notional'}],grpc:[{address:'grpc-irisnet-ia.cosmosia.notional.ventures:443',provider:'Notional'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/irisnet',tx_page:'https://ezstaking.tools/irisnet/txs/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/iris',tx_page:'https://www.mintscan.io/iris/txs/${txHash}',account_page:'https://www.mintscan.io/iris/account/${accountAddress}'},{kind:'ping.pub',url:'https://ping.pub/iris-network',tx_page:'https://ping.pub/iris-network/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/iris-network',tx_page:'https://atomscan.com/iris-network/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'jackal',chain_id:'jackal-1',website:'https://jackalprotocol.com',pretty_name:'Jackal',status:'live',network_type:'mainnet',bech32_prefix:'jkl',daemon_name:'canined',node_home:'$HOME/.canine',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'ujkl',fixed_min_gas_price:0}]},codebase:{git_repo:'https://github.com/JackalLabs/canine-chain',recommended_version:'v1.1.2-hotfix',compatible_versions:['v1.1.2-hotfix'],binaries:{'linux/amd64':'https://github.com/JackalLabs/canine-chain/releases/download/v1.1.2/canined-Linux','darwin/amd64':'https://github.com/JackalLabs/canine-chain/releases/download/v1.1.2/canined-macOS'},genesis:{genesis_url:'https://cdn.discordapp.com/attachments/1002389406650466405/1034968352591986859/updated_genesis2.json'}},peers:{seeds:[{id:'fda1f87472c9c2ee89a0ba36a9a9cc38f96e283a',address:'198.244.212.27:26656'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:17556',provider:'Lavender.Five Nodes 🐝'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:17556',provider:'Polkachu'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'jackal.mainnet.peer.autostake.net:26906',provider:'AutoStake 🛡️ Slash Protected'},{id:'f6c5d2bf222699a35968e5f262baacd6c34e261c',address:'seeds.whispernode.com:17556',provider:'WhisperNode🤐'}],persistent_peers:[{id:'fda1f87472c9c2ee89a0ba36a9a9cc38f96e283a',address:'198.244.212.27:26656'},{id:'d8203bad2c26883c7fb8be1d259a098a273f0840',address:'135.181.20.44:2506'},{id:'53300f221a72ba385f86ca42709a46413d47f5b0',address:'pve7.badgerbite.io:36657'},{id:'fa0d8085abaf34d9a2349bef0b19dff6f89013b5',address:'209.34.206.38:26656'},{id:'0ab9ec918cd36a28be1fcf538f7f76ede2b81659',address:'89.58.38.59:26656'},{id:'2af06d39d68345d41cd16182e3472d96c5a0150b',address:'136.244.29.116:27656'}]},apis:{rpc:[{address:'https://rpc.jackalprotocol.com',provider:'Jackal Labs'},{address:'https://jackal-rpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://rpc-jackal.d-stake.xyz',provider:'D-stake'},{address:'https://rpc.jackal.nodestake.top',provider:'NodeStake'},{address:'https://rpc-jackal.nodeist.net',provider:'Nodeist'},{address:'https://jackal-rpc.polkachu.com',provider:'Polkachu'},{address:'https://jackal-rpc.agoranodes.com',provider:'AgoraNodes'},{address:'https://m-jackal.rpc.utsa.tech',provider:'lesnik | UTSA'},{address:'https://jackal-rpc.kleomedes.network',provider:'Kleomedes'},{address:'https://rpc-jackal.huginn.tech',provider:'Huginn'},{address:'https://jackal.nodejumper.io:443',provider:'Nodejumper 🚀'},{address:'https://rpc-jkl.kjinc.io',provider:'KJINC.io'}],rest:[{address:'https://api.jackalprotocol.com',provider:'Jackal Labs'},{address:'https://jackal-api.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://api-jackal.d-stake.xyz',provider:'D-stake'},{address:'https://api.jackal.nodestake.top',provider:'NodeStake'},{address:'https://api-jackal.nodeist.net',provider:'Nodeist'},{address:'https://jackal-api.polkachu.com',provider:'Polkachu'},{address:'https://jackal-rest.agoranodes.com',provider:'AgoraNodes'},{address:'https://m-jackal.api.utsa.tech',provider:'lesnik | UTSA'},{address:'https://jackal-api.kleomedes.network',provider:'Kleomedes'},{address:'https://api.jackal.huginn.tech',provider:'Huginn'},{address:'https://jackal.nodejumper.io:1317',provider:'Nodejumper 🚀'},{address:'https://api-jkl.kjinc.io',provider:'KJINC.io'},{address:'https://jackal.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'}],grpc:[{address:'https://grpc.jackalprotocol.com',provider:'Jackal Labs'},{address:'https://jackal-grpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://grpc.jackal.nodestake.top',provider:'NodeStake'},{address:'https://grpc-jackal.nodeist.net',provider:'Nodeist'},{address:'https://grpc-jackal.d-stake.xyz',provider:'D-stake'},{address:'jackal-grpc.polkachu.com:17590',provider:'Polkachu'},{address:'https://jackal-grpc.agoranodes.com',provider:'AgoraNodes'},{address:'https://jackal.nodejumper.io:9090',provider:'Nodejumper 🚀'}],wss:[{address:'wss://jackal-rpc.agoranodes.com',provider:'AgoraNodes'}]},explorers:[{kind:'ping.pub',url:'https://ping.pub/jackal',tx_page:'https://ping.pub/jackal/tx/${txHash}'},{kind:'NodeStake',url:'https://explorer.nodestake.top/jackal',tx_page:'https://explorer.nodestake.top/jackal/tx/${txHash}'},{kind:'lesnik | UTSA',url:'https://exp.utsa.tech/jackal',tx_page:'https://exp.utsa.tech/jackal/tx/${txHash}'},{kind:'Nodeist Explorer',url:'https://exp.nodeist.net/jackal',tx_page:'https://exp.nodeist.net/jackal/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'juno',status:'live',network_type:'mainnet',website:'https://www.junonetwork.io/',pretty_name:'Juno',chain_id:'juno-1',bech32_prefix:'juno',daemon_name:'junod',node_home:'$HOME/.juno',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'ujuno',fixed_min_gas_price:0.0025,low_gas_price:0.03,average_gas_price:0.04,high_gas_price:0.05}]},staking:{staking_tokens:[{denom:'ujuno'}]},codebase:{git_repo:'https://github.com/CosmosContracts/juno',recommended_version:'v11.0.0',compatible_versions:['v11.0.0'],cosmos_sdk_version:'0.45',tendermint_version:'0.34',cosmwasm_version:'0.28',cosmwasm_enabled:true,genesis:{genesis_url:'https://download.dimi.sh/juno-phoenix2-genesis.tar.gz'}},peers:{seeds:[{id:'babc3f3f7804933265ec9c40ad94f4da8e9e0017',address:'seed.rhinostake.com:12656',provider:'RHINO'},{id:'2484353dab0b2c1275765b8ffa2c50b3b36158ca',address:'seed-node.junochain.com:26656'},{id:'90b09362d9ce3845096c4938eea0dba682b0ad2c',address:'juno-seed-new.blockpane.com:26656'},{id:'22ee6e65e5e79cd0b970dd11e52761de8d1d6dfd',address:'seeds.pupmos.network:2001',provider:'PUPMØS'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:12656',provider:'Polkachu'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:12656',provider:'Lavender.Five Nodes 🐝'},{id:'ea67180befe4d9ca71142d21ada8ff58cc08f71c',address:'seeds.goldenratiostaking.net:1627',provider:'Golden Ratio Staking'},{id:'47d942718533d36823e16b9502c035ca9f318ef4',address:'seeds.whispernode.com:12656',provider:'WhisperNode🤐'}],persistent_peers:[{id:'b1f46f1a1955fc773d3b73180179b0e0a07adce1',address:'162.55.244.250:39656'},{id:'7f593757c0cde8972ce929381d8ac8e446837811',address:'178.18.255.244:26656'},{id:'7b22dfc605989d66b89d2dfe118d799ea5abc2f0',address:'167.99.210.65:26656'},{id:'4bd9cac019775047d27f9b9cea66b25270ab497d',address:'137.184.7.164:26656'},{id:'bd822a8057902fbc80fd9135e335f0dfefa32342',address:'65.21.202.159:38656'},{id:'15827c6c13f919e4d9c11bcca23dff4e3e79b1b8',address:'51.38.52.210:38656'},{id:'e665df28999b2b7b40cff2fe4030682c380bf294',address:'188.40.106.109:38656'},{id:'92804ce50c85ff4c7cf149d347dd880fc3735bf4',address:'34.94.231.154:26656'},{id:'795ed214b8354e8468f46d1bbbf6e128a88fe3bd',address:'34.127.19.222:26656'},{id:'ea9c1ac0e91639b2c7957d9604655e2263abe4e1',address:'185.181.103.136:26656'}]},apis:{rpc:[{address:'https://rpc-juno.whispernode.com',provider:' WhisperNode 🤐'},{address:'https://rpc-juno.itastakers.com',provider:'itastakers'},{address:'https://rpc-juno.ecostake.com',provider:'ecostake'},{address:'https://juno-rpc.polkachu.com',provider:'Polkachu'},{address:'https://juno.rpc.interchain.ivaldilabs.xyz',provider:'Ivaldi Labs'},{address:'https://juno-rpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://rpc-juno.pupmos.network',provider:'PUPMØS'},{address:'https://rpc-juno-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://rpc.juno.chaintools.tech/',provider:'ChainTools'},{address:'https://rpc.juno.silknodes.io/',provider:'Silk Nodes'},{address:'https://juno-rpc.kleomedes.network',provider:'Kleomedes'},{address:'https://rpc.juno.interbloc.org',provider:'Interbloc'},{address:'https://juno.nodejumper.io',provider:'Nodejumper 🚀'},{address:'https://juno.rpc.stakin-nodes.com',provider:'Stakin'},{address:'https://juno-rpc.icycro.org',provider:'IcyCRO 🧊'},{address:'https://rpc-juno.goldenratiostaking.net',provider:'Golden Ratio Staking'},{address:'https://rpc.juno.bh.rocks',provider:'BlockHunters 🎯'},{address:'https://rpc.juno.kingnodes.com',provider:'kingnodes 👑'},{address:'https://juno-rpc.reece.sh',provider:'Reecepbcups'},{address:'http://juno.rpc.stakeandrelax.net:12657',provider:'Stake&Relax Validator 🦥'}],rest:[{address:'https://lcd-juno.whispernode.com',provider:' WhisperNode 🤐'},{address:'https://lcd-juno.itastakers.com',provider:'itastakers'},{address:'https://juno.rest.interchain.ivaldilabs.xyz',provider:'Ivaldi Labs'},{address:'https://rest-juno.ecostake.com',provider:'ecostake'},{address:'https://juno-api.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://api-juno.pupmos.network',provider:'PUPMØS'},{address:'https://api-juno-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://api.juno.chaintools.tech/',provider:'ChainTools'},{address:'https://juno-api.polkachu.com',provider:'Polkachu'},{address:'https://api.juno.silknodes.io/',provider:'Silk Nodes'},{address:'https://juno-api.kleomedes.network',provider:'Kleomedes'},{address:'https://api.juno.interbloc.org',provider:'Interbloc'},{address:'https://juno.nodejumper.io:1317',provider:'Nodejumper 🚀'},{address:'https://juno.rest.stakin-nodes.com',provider:'Stakin'},{address:'https://api.juno.bh.rocks',provider:'BlockHunters 🎯'},{address:'https://api.juno.kingnodes.com',provider:'kingnodes 👑'},{address:'https://juno-api.reece.sh',provider:'Reecepbcups'}],grpc:[{address:'35.243.205.230:9090',provider:'strangelove'},{address:'grpc-juno-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'https://juno-grpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://juno.grpcui.chaintools.host/',provider:'ChainTools'},{address:'juno-grpc.polkachu.com:12690',provider:'Polkachu'},{address:'https://grpc.juno.silknodes.io/',provider:'Silk Nodes'},{address:'juno.grpc.interchain.ivaldilabs.xyz:443',provider:'Ivaldi Labs'},{address:'https://juno.nodejumper.io:9090',provider:'Nodejumper 🚀'},{address:'juno.grpc.stakin-nodes.com:443',provider:'Stakin'},{address:'https://grpc.juno.bh.rocks:443',provider:'BlockHunters 🎯'},{address:'https://grpc.juno.kingnodes.com',provider:'kingnodes 👑'},{address:'http://juno.grpc.stakeandrelax.net:12690',provider:'Stake&Relax Validator 🦥'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/juno',tx_page:'https://ezstaking.tools/juno/txs/${txHash}'},{kind:'ping.pub',url:'https://ping.pub/juno',tx_page:'https://ping.pub/juno/tx/${txHash}'},{kind:'explorers.guru',url:'https://juno.explorers.guru',tx_page:'https://juno.explorers.guru/transaction/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/juno',tx_page:'https://www.mintscan.io/juno/txs/${txHash}',account_page:'https://www.mintscan.io/juno/account/${accountAddress}'},{kind:'atomscan',url:'https://atomscan.com/juno',tx_page:'https://atomscan.com/juno/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'kava',status:'live',network_type:'mainnet',website:'https://www.kava.io/',pretty_name:'Kava',chain_id:'kava_2222-10',bech32_prefix:'kava',daemon_name:'kava',node_home:'$HOME/.kava',slip44:459,codebase:{git_repo:'https://github.com/kava-Labs/kava/',recommended_version:'v0.18.0',compatible_versions:['v0.18.0'],genesis:{genesis_url:'https://kava-genesis-files.s3.us-east-1.amazonaws.com/kava_2222-10/genesis.json'}},peers:{seeds:[{id:'5c56fc779cd75c0c4d8225b8afe5259a076608dd',address:'18.206.28.123:26656'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:13956',provider:'Polkachu'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'kava.mainnet.seed.autostake.net:26656',provider:'AutoStake 🛡️ Slash Protected'}],persistent_peers:[{id:'7827de7a17483f79a914f790cc8ca8431b2764d7',address:'3.221.174.66:26656'},{id:'1b5be4ece049083399e1d467c219c8978ed8d3ca',address:'3.217.223.43:26656'},{id:'e5d74b3f06226fb0798509e36021e81b7bce934d',address:'3.209.43.104:26656'},{id:'fb4a0dbe6947540bc94f4f2f11ce7c70b8fcffc9',address:'54.92.246.92:26656'},{id:'8b5c4a890c8ae7efbbe3360af71be1c3c3a9e12e',address:'121.78.241.68:46656'},{id:'1291ef230910953545fb3d83c4e989578da978a1',address:'35.157.56.248:26656'},{id:'06d11b66eac77ad7b149773cf974a595dd947398',address:'35.247.175.128:50056'},{id:'11f965df6fb3091e0fa3a1e4c129ff697939b827',address:'52.26.236.235:26656'},{id:'5a9de901ce9b6961f22cf829f4aefb66dff77d3a',address:'54.177.121.234:26656'},{id:'9084eab1fa9414abad5e41416482fe75f39b2071',address:'54.215.73.103:26656'},{id:'418cc8f69fa0212503dd5b2a9ac3ce0dd3b33e72',address:'13.209.245.58:26656'},{id:'f3a64f5d1a992d327a5d2b3282d7df294d787832',address:'173.212.197.110:26666'},{id:'1074a6f31d2c7df6e21ce0e574a5cb75f1763be1',address:'13.56.31.21:26656'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'kava.mainnet.peer.autostake.net:26656',provider:'AutoStake 🛡️ Slash Protected'}]},apis:{rpc:[{address:'https://rpc.data.kava.io',provider:'kava'},{address:'https://kava-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc-kava-ia.cosmosia.notional.ventures/',provider:'Notional'}],rest:[{address:'https://api.data.kava.io/',provider:'kava'},{address:'https://api-kava-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://kava-api.polkachu.com',provider:'Polkachu'},{address:'https://kava.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'}],grpc:[{address:'https://grpc.data.kava.io/',provider:'kava'},{address:'grpc-kava-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'kava-grpc.polkachu.com:13990',provider:'Polkachu'}],'evm-http-jsonrpc':[{address:'https://evm.kava.io/',provider:'kava'}]},explorers:[{kind:'mintscan',url:'https://www.mintscan.io/kava',tx_page:'https://www.mintscan.io/kava/txs/${txHash}',account_page:'https://www.mintscan.io/kava/account/${accountAddress}'},{kind:'ping.pub',url:'https://ping.pub/kava',tx_page:'https://ping.pub/kava/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/kava',tx_page:'https://atomscan.com/kava/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'kichain',status:'live',network_type:'mainnet',website:'https://foundation.ki/',pretty_name:'Ki',chain_id:'kichain-2',bech32_prefix:'ki',daemon_name:'kid',node_home:'$HOME/.kid',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'uxki',fixed_min_gas_price:0.025}]},codebase:{git_repo:'https://github.com/KiFoundation/ki-tools',recommended_version:'4.1.0',compatible_versions:['4.1.0'],genesis:{genesis_url:'https://raw.githubusercontent.com/KiFoundation/ki-networks/v0.1/Mainnet/kichain-2/genesis.json'}},peers:{seeds:[{id:'24cbccfa8813accd0ebdb09e7cdb54cff2e8fcd9',address:'51.89.166.197:26656',provider:'kifoundation'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:13556',provider:'Polkachu'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:13556',provider:'Lavender.Five Nodes 🐝'}],persistent_peers:[{id:'81396d4703a2e3cbd136c7324e4df5686fd48218',address:'35.180.8.214:26656',provider:'kifoundation'},{id:'c597db55d9a609b8b77c3d37ecf1fa9a67117cc0',address:'144.217.82.4:26656',provider:'kifoundation'},{id:'50af457247b59aa558a26a14bd7ac4bf86eeae70',address:'195.201.164.223:26656',provider:'everstake'},{id:'81eef39d2ca9a07490857d197423da4ba5e01879',address:'15.188.134.35:26656',provider:'cosmostation'},{id:'5adb5ad6a6fcef624866cefdb551dafdc07f7e78',address:'15.188.198.188:26656',provider:'cosmostation'},{id:'41b321292cbe50c5c30017cc71c404481be0e20b',address:'3.38.12.5:26656',provider:'cosmostation'}]},apis:{rpc:[{address:'https://rpc-mainnet.blockchain.ki',provider:'kifoundation'},{address:'https://kichain-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc-kichain-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://rpc.kichain.chaintools.tech/',provider:'ChainTools'},{address:'https://kichain-rpc.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://rpc.ki.nodestake.top',provider:'NodeStake'},{address:'https://ki-rpc.ibs.team/',provider:'Inter Blockchain Services'},{address:'https://kichain.nodejumper.io',provider:'Nodejumper 🚀'}],rest:[{address:'https://api-mainnet.blockchain.ki',provider:'kifoundation'},{address:'https://api-kichain-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://api.kichain.chaintools.tech/',provider:'ChainTools'},{address:'https://kichain-api.polkachu.com',provider:'Polkachu'},{address:'https://kichain-api.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://api.ki.nodestake.top',provider:'NodeStake'},{address:'https://ki-api.ibs.team/',provider:'Inter Blockchain Services'},{address:'https://kichain.nodejumper.io:1317',provider:'Nodejumper 🚀'}],grpc:[{address:'grpc-kichain-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'kichain-grpc.polkachu.com:13590',provider:'Polkachu'},{address:'https://kichain-grpc.lavenderfive.com:443/',provider:'Lavender.Five Nodes 🐝'},{address:'https://grpc.ki.nodestake.top',provider:'NodeStake'},{address:'https://kichain.nodejumper.io:9090',provider:'Nodejumper 🚀'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/kichain',tx_page:'https://ezstaking.tools/kichain/txs/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/ki-chain',tx_page:'https://www.mintscan.io/ki-chain/txs/${txHash}',account_page:'https://www.mintscan.io/ki-chain/account/${accountAddress}'},{kind:'ping.pub',url:'https://ping.pub/kichain',tx_page:'https://ping.pub/kichain/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/ki-chain',tx_page:'https://atomscan.com/ki-chain/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'konstellation',status:'live',network_type:'mainnet',website:'https://konstellation.tech/',pretty_name:'Konstellation',chain_id:'darchub',bech32_prefix:'darc',daemon_name:'knstld',node_home:'$HOME/.knstld',codebase:{git_repo:'https://github.com/knstl/konstellation',recommended_version:'v0.6.2',compatible_versions:['v0.6.2'],genesis:{genesis_url:'https://raw.githubusercontent.com/Konstellation/konstellation/master/config/genesis.json'}},fees:{fee_tokens:[{denom:'udarc',fixed_min_gas_price:0}]},peers:{seeds:[{id:'1bd4b89e05e5d7ea5d2dba89c799c2e624cb35d7',address:'node1.konstellation.tech:26656'},{id:'a32dda75cf5ffe4ab0ff9a0969e525807e01f2e5',address:'node2.konstellation.tech:26656'},{id:'06fed4bbe81ead6073a7254e860331179af74f4c',address:'node3.konstellation.tech:26656'},{id:'d4a713a657883cca49d71b1b2cab4ab5e94b0843',address:'node4.konstellation.tech:26656'},{id:'1c9aff1ea9d1cafd584aa61a70582e7c4b0c8675',address:'node5.konstellation.tech:26656'},{id:'0f4eef8db37ec7ef9f6d3324689db2847ee8f795',address:'node10.konstellation.tech:26656'},{id:'7e8119050ecb80450ad476b50423b9230c10c8d0',address:'node11.konstellation.tech:26656'},{id:'dbb7589202f6c751f2b93c6bbcd0e660676ab91c',address:'node12.konstellation.tech:26656'},{id:'f2c2ebec24507d54fea88976e9f93f0fbfa0d6d0',address:'node13.konstellation.tech:26656'},{id:'00f7f4506d84f9d1458201946e1194564b444ce0',address:'node14.konstellation.tech:26656'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:13356',provider:'Polkachu'},{id:'099ea7cefa6ab8709b78f2491b147361ca2bf6a0',address:'seed-konstellation.starsquid.io:15612',provider:'Starsquid'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'konstellation.mainnet.seed.autostake.net:26826',provider:'AutoStake 🛡️ Slash Protected'}],persistent_peers:[{id:'1bd4b89e05e5d7ea5d2dba89c799c2e624cb35d7',address:'node1.konstellation.tech:26656'},{id:'a32dda75cf5ffe4ab0ff9a0969e525807e01f2e5',address:'node2.konstellation.tech:26656'},{id:'06fed4bbe81ead6073a7254e860331179af74f4c',address:'node3.konstellation.tech:26656'},{id:'d4a713a657883cca49d71b1b2cab4ab5e94b0843',address:'node4.konstellation.tech:26656'},{id:'1c9aff1ea9d1cafd584aa61a70582e7c4b0c8675',address:'node5.konstellation.tech:26656'},{id:'0f4eef8db37ec7ef9f6d3324689db2847ee8f795',address:'node10.konstellation.tech:26656'},{id:'7e8119050ecb80450ad476b50423b9230c10c8d0',address:'node11.konstellation.tech:26656'},{id:'dbb7589202f6c751f2b93c6bbcd0e660676ab91c',address:'node12.konstellation.tech:26656'},{id:'f2c2ebec24507d54fea88976e9f93f0fbfa0d6d0',address:'node13.konstellation.tech:26656'},{id:'00f7f4506d84f9d1458201946e1194564b444ce0',address:'node14.konstellation.tech:26656'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'konstellation.mainnet.peer.autostake.net:26826',provider:'AutoStake 🛡️ Slash Protected'}]},apis:{rpc:[{address:'https://node1.konstellation.tech:26657',provider:'konstellation'},{address:'https://konstellation-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc.konstellation.badgerbite.xyz:443',provider:'BadgerBite'},{address:'https://rpc-konstellation-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://rpc-konstellation.starsquid.io',provider:'Starsquid'}],rest:[{address:'https://node1.konstellation.tech:1318',provider:'konstellation'},{address:'https://api-konstellation-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://konstellation-api.polkachu.com',provider:'Polkachu'},{address:'https://api-konstellation.starsquid.io',provider:'Starsquid'},{address:'https://konstellation.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'}],grpc:[{address:'grpc-konstellation-ia.cosmosia.notional.ventures:443/',provider:'Notional'},{address:'konstellation-grpc.polkachu.com:13390',provider:'Polkachu'}]},explorers:[{kind:'konstellation',url:'https://explorer.konstellation.tech/',tx_page:'https://explorer.konstellation.tech/tx/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/konstellation',tx_page:'https://www.mintscan.io/konstellation/txs/${txHash}',account_page:'https://www.mintscan.io/konstellation/account/${accountAddress}'}],slip44:118},{$schema:'../chain.schema.json',chain_name:'kujira',chain_id:'kaiyo-1',pretty_name:'Kujira',status:'live',network_type:'mainnet',website:'https://kujira.app/',bech32_prefix:'kujira',daemon_name:'kujirad',node_home:'$HOME/.kujira',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'ukuji',fixed_min_gas_price:0.00119}]},codebase:{git_repo:'https://github.com/Team-Kujira/core',recommended_version:'v0.7.1',compatible_versions:['v0.7.1'],genesis:{genesis_url:'https://github.com/Team-Kujira/networks/raw/master/mainnet/kaiyo-1.json'}},peers:{seeds:[{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:11856',provider:'Polkachu'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:11856',provider:'Lavender.Five Nodes 🐝'},{id:'322abfd7c0bcdf8a3d98ccb46ae2572bae0e8301',address:'seed-kujira.starsquid.io:15602',provider:'Starsquid'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'kujira.mainnet.seed.autostake.net:26796',provider:'AutoStake 🛡️ Slash Protected'},{id:'400f3d9e30b69e78a7fb891f60d76fa3c73f0ecc',address:'kujira.rpc.kjnodes.com:13659',provider:'kjnodes'},{id:'c28827cb96c14c905b127b92065a3fb4cd77d7f6',address:'seeds.whispernode.com:11856',provider:'WhisperNode🤐'}],persistent_peers:[{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'kujira.mainnet.peer.autostake.net:26796',provider:'AutoStake 🛡️ Slash Protected'}]},apis:{rpc:[{address:'https://rpc-kujira.whispernode.com',provider:'WhisperNode 🤐'},{address:'https://rpc.kaiyo.kujira.setten.io',provider:'setten.io'},{address:'https://kujira-rpc.polkachu.com',provider:'polkachu'},{address:'https://rpc-kujira.ecostake.com',provider:'ecostake'},{address:'https://kujira-rpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://rpc.kujira.chaintools.tech/',provider:'ChainTools'},{address:'https://rpc-kujira-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://kujira-rpc.wildsage.io',provider:'WildSage Labs'},{address:'https://rpc-kujira.nodeist.net',provider:'Nodeist'},{address:'https://kujira-rpc.ibs.team/',provider:'Inter Blockchain Services'},{address:'https://rpc-kujira.starsquid.io',provider:'Starsquid'},{address:'https://kujira.rpc.kjnodes.com',provider:'kjnodes'},{address:'https://kuji-rpc.kleomedes.network',provider:'Kleomedes'},{address:'https://rpc-kujira.huginn.tech',provider:'Huginn'}],grpc:[{address:'https://kujira.grpcui.chaintools.host/',provider:'ChainTools'},{address:'https://grpc-kujira-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://kujira-grpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'kujira-grpc.polkachu.com:11890',provider:'Polkachu'},{address:'https://grpc-kujira.nodeist.net',provider:'Nodeist'}],rest:[{address:'https://lcd-kujira.whispernode.com',provider:'WhisperNode 🤐'},{address:'https://lcd.kaiyo.kujira.setten.io',provider:'setten.io'},{address:'https://kujira-api.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://kujira-api.polkachu.com/',provider:'polkachu'},{address:'https://rest-kujira.ecostake.com',provider:'ecostake'},{address:'https://api.kujira.chaintools.tech/',provider:'ChainTools'},{address:'https://api-kujira-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://kujira-lcd.wildsage.io/',provider:'WildSage Labs'},{address:'https://api-kujira.nodeist.net',provider:'Nodeist'},{address:'https://kujira-api.ibs.team/',provider:'Inter Blockchain Services'},{address:'https://api-kujira.starsquid.io',provider:'Starsquid'},{address:'https://kujira.api.kjnodes.com',provider:'kjnodes'},{address:'https://kuji-api.kleomedes.network',provider:'Kleomedes'},{address:'https://api.kujira.huginn.tech',provider:'Huginn'},{address:'https://kujira.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'}]},explorers:[{kind:'kujira',url:'https://finder.kujira.app',tx_page:'https://finder.kujira.app/kaiyo-1/tx/${txHash}'},{kind:'explorers.guru',url:'https://kujira.explorers.guru',tx_page:'https://kujira.explorers.guru/transaction/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/kujira',tx_page:'https://atomscan.com/kujira/transactions/${txHash}'},{kind:'Nodeist Explorer',url:'https://exp.nodeist.net/M-Kujira',tx_page:'https://exp.nodeist.net/M-Kujira/transactions/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/kujira',tx_page:'https://www.mintscan.io/kujira/txs/${txHash}',account_page:'https://www.mintscan.io/kujira/account/${accountAddress}'}],logo_URIs:{png:'https://raw.githubusercontent.com/cosmos/chain-registry/master/kujira/images/kujira-chain-logo.png'}},{$schema:'../chain.schema.json',chain_name:'lambda',status:'live',network_type:'mainnet',pretty_name:'Lambda',chain_id:'lambda_92000-1',bech32_prefix:'lamb',node_home:'$HOME/.lambdavm',daemon_name:'lambdavm',slip44:60,fees:{fee_tokens:[{denom:'ulamb',low_gas_price:10000000000,average_gas_price:25000000000,high_gas_price:40000000000}]},staking:{staking_tokens:[{denom:'ulamb'}]},codebase:{git_repo:'https://github.com/LambdaIM/lambdavm',recommended_version:'v1.0.0',compatible_versions:['v1.0.0'],genesis:{genesis_url:'https://raw.githubusercontent.com/LambdaIM/mainnet/main/lambda_92000-1/genesis.json'}},peers:{seeds:[{id:'2c4f8e193fd10ab3a2bc919b484fd1c78eceffb3',address:'13.213.214.88:26656',provider:'Lambda'},{id:'50a1a5fe2f00b4ba1f6dd8bfd40b566f1b55b7a3',address:'lambda.peer.stavr.tech:21026',provider:'stavr'},{id:'d475be798a3b8d9eceb56b5cb276ff75d515cb7b',address:'38.242.215.240:26657',provider:''},{id:'4cf9c0f6627d1a936f76cf9a507ad4a74f20a254',address:'194.163.165.176:36656',provider:''},{id:'59b74a8b4870ab3f914ca4d9d9fd50e715cc0a58',address:'144.76.97.251:45656',provider:''}],persistent_peers:[{id:'2c4f8e193fd10ab3a2bc919b484fd1c78eceffb3',address:'13.213.214.88:26656',provider:'Lambda'}]},apis:{rpc:[{address:'https://rpc.lambda.im',provider:'Lambda'},{address:'https://rpc.lambda.nodestake.top',provider:'NodeStake'},{address:'https://rpc-lambda.d-stake.xyz',provider:'D-stake'},{address:'https://lambda-rpc.jambulmerah.dev:443',provider:'JambulMerah | Cosmos⚛️Lovers❤️'}],rest:[{address:'https://rest.lambda.im',provider:'Lambda'},{address:'https://api.lambda.nodestake.top',provider:'NodeStake'},{address:'https://api-lambda.d-stake.xyz',provider:'D-stake'},{address:'https://lambda-api.jambulmerah.dev',provider:'JambulMerah | Cosmos⚛️Lovers❤️'}],grpc:[{address:'https://grpc.lambda.im',provider:'Lambda'},{address:'https://grpc.lambda.nodestake.top',provider:'NodeStake'},{address:'https://grpc-lambda.d-stake.xyz',provider:'D-stake'},{address:'lambda.grpc.jambulmerah.dev:18090',provider:'JambulMerah | Cosmos⚛️Lovers❤️'}],'evm-http-jsonrpc':[{address:'https://eth.lambda.im',provider:'Lambda'},{address:'https://jsonrpc.lambda.nodestake.top',provider:'NodeStake'},{address:'https://jsonrpc-lambda.d-stake.xyz',provider:'D-stake'},{address:'https://lambda-jsonrpc.jambulmerah.dev',provider:'JambulMerah | Cosmos⚛️Lovers❤️'}]},explorers:[{kind:'blockscout',url:'https://explorer.lambda.im/',tx_page:'https://explorer.lambda.im/tx/${txHash}'},{kind:'NodeStake',url:'https://explorer.nodestake.top/lambda',tx_page:'https://explorer.nodestake.top/lambda/txs/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'likecoin',status:'live',website:'https://like.co/',network_type:'mainnet',pretty_name:'LikeCoin',chain_id:'likecoin-mainnet-2',bech32_prefix:'like',daemon_name:'liked',node_home:'$HOME/.liked',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'nanolike',low_gas_price:1,average_gas_price:10,high_gas_price:1000}]},staking:{staking_tokens:[{denom:'nanolike'}]},codebase:{git_repo:'https://github.com/likecoin/likecoin-chain',recommended_version:'v3.1.0',compatible_versions:['v3.1.0'],binaries:{'linux/amd64':'https://github.com/likecoin/likecoin-chain/releases/download/v3.1.0/likecoin-chain_3.1.0_Linux_x86_64.tar.gz','linux/arm64':'https://github.com/likecoin/likecoin-chain/releases/download/v3.1.0/likecoin-chain_3.1.0_Linux_arm64.tar.gz','darwin/amd64':'https://github.com/likecoin/likecoin-chain/releases/download/v3.1.0/likecoin-chain_3.1.0_Darwin_x86_64.tar.gz','darwin/arm64':'https://github.com/likecoin/likecoin-chain/releases/download/v3.1.0/likecoin-chain_3.1.0_Darwin_arm64.tar.gz','windows/amd64':'https://github.com/likecoin/likecoin-chain/releases/download/v3.1.0/likecoin-chain_3.1.0_Windows_x86_64.zip'},cosmos_sdk_version:'0.45',tendermint_version:'0.34',genesis:{genesis_url:'https://raw.githubusercontent.com/likecoin/mainnet/982c14399089950a59d3ebbedcbbc7ead6040457/genesis.json'}},peers:{seeds:[{id:'913bd0f4bea4ef512ffba39ab90eae84c1420862',address:'34.82.131.35:26656',provider:'like.co'},{id:'e44a2165ac573f84151671b092aa4936ac305e2a',address:'nnkken.dev:26656',provider:'nnkken'}],persistent_peers:[{id:'f087d600cf3d34d3bac04a9723a53180619e8445',address:'35.247.83.138:26656',provider:'like.co'},{id:'75822abfbcc23dcefd025e245b46e2dec5357f75',address:'207.246.101.4:26656',provider:'forbole'},{id:'9f62898076c35d78df21c1d2280be922221c23af',address:'139.59.8.62:2180',provider:'Notional'},{id:'20afcd5637b2278efc78c54fd523bd331d1820f2',address:'78.47.110.110:26656',provider:'moonbeam'},{id:'5940f55e0e7e2f1a2c9507bf62fbfd7c6d2f3874',address:'likechain.oursky.com:26656',provider:'Oursky'}]},apis:{rpc:[{address:'https://mainnet-node.like.co/rpc/',provider:'like.co'},{address:'https://rpc-likecoin-ia.cosmosia.notional.ventures/',provider:'Notional'}],rest:[{address:'https://mainnet-node.like.co',provider:'like.co'},{address:'https://api-likecoin-ia.cosmosia.notional.ventures/',provider:'Notional'}],grpc:[{address:'grpc-likecoin-ia.cosmosia.notional.ventures:443',provider:'Notional'}]},explorers:[{kind:'mintscan',url:'https://www.mintscan.io/likecoin',tx_page:'https://www.mintscan.io/likecoin/txs/${txHash}',account_page:'https://www.mintscan.io/likecoin/account/${accountAddress}'},{kind:'bigdipper',url:'https://likecoin.bigdipper.live/',tx_page:'https://likecoin.bigdipper.live/transactions/${txHash}'},{kind:'lunie-ng',url:'https://stake.like.co/'},{kind:'ping.pub',url:'https://ping.pub/likecoin',tx_page:'https://ping.pub/likecoin/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/likecoin',tx_page:'https://atomscan.com/likecoin/transactions/${txHash}'}],logo_URIs:{png:'https://raw.githubusercontent.com/cosmos/chain-registry/master/likecoin/images/likecoin-chain-logo.png',svg:'https://raw.githubusercontent.com/cosmos/chain-registry/master/likecoin/images/likecoin-chain-logo.svg'},keywords:['depub','like']},{$schema:'../chain.schema.json',chain_name:'logos',status:'live',network_type:'mainnet',pretty_name:'Logos',chain_id:'logos_7002-1',bech32_prefix:'logos',daemon_name:'logosd',node_home:'$HOME/.logos',key_algos:['ethsecp256k1'],extra_codecs:['ethermint'],slip44:60,fees:{fee_tokens:[{denom:'aLYT'}]},peers:{seeds:[],persistent_peers:[]},apis:{rpc:[{address:'https://logos-rpc.provable.dev:443/',provider:'laurel.provable'}],rest:[{address:'https://logos.provable.dev/rest/',provider:'laurel.provable'}],grpc:[{address:'https://logos-grpc.provable.dev:443',provider:'laurel.provable'}],'evm-http-jsonrpc':[{address:'https://logos-evm.provable.dev/',provider:'laurel.provable'}]},explorers:[],logo_URIs:{png:'https://raw.githubusercontent.com/cosmos/chain-registry/master/logos/images/logos.png',svg:'https://raw.githubusercontent.com/cosmos/chain-registry/master/logos/images/logos.svg'},codebase:{genesis:{genesis_url:''}}},{$schema:'../chain.schema.json',chain_name:'loyal',status:'live',network_type:'mainnet',website:'https://www.joinloyal.com/',pretty_name:'Loyal',chain_id:'loyal-1',bech32_prefix:'loyal',daemon_name:'loyald',node_home:'$HOME/.loyal',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'ulyl',fixed_min_gas_price:0}]},staking:{staking_tokens:[{denom:'ulyl'}]},codebase:{git_repo:'https://github.com/LoyalLabs/loyal',recommended_version:'v0.25.1',compatible_versions:['v0.25.1'],genesis:{genesis_url:'https://raw.githubusercontent.com/LoyalLabs/net/main/mainnet/genesis.json'}},peers:{seeds:[{id:'7490c272d1c9db40b7b9b61b0df3bb4365cb63a6',address:'loyal-seed.netdots.net:26656'},{id:'f8f5d04e17c998478c29ba6ab74b2e995a2b6dcd',address:'tenderseed.ccvalidators.com:29002'}],persistent_peers:[{id:'b66ecdf36bb19a9af0460b3ae0901aece93ae006',address:'pubnode1.joinloyal.io:26656'},{id:'9f779b69d2ba3548de5427432571e8f88f72a59a',address:'149.102.153.60:2566'},{id:'7490c272d1c9db40b7b9b61b0df3bb4365cb63a6',address:'54.80.32.192:26656'},{id:'a19b19f09084e9f1579243a5613efde8ae5aa946',address:'65.21.199.148:26624'},{id:'607dbee191f06d9479d7ae8f9fc5de75ca840d6f',address:'185.215.167.227:31656'}]},apis:{rpc:[{address:'https://main-rpc.joinloyal.io/'}],rest:[{address:'https://main-lcd.joinloyal.io/'}]},explorers:[{kind:'Loyal explorer',url:'https://ping-pub.joinloyal.io/loyal',tx_page:'https://ping-pub.joinloyal.io/loyal/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'lumenx',status:'live',network_type:'mainnet',pretty_name:'LumenX',chain_id:'LumenX',bech32_prefix:'lumen',daemon_name:'lumenxd',node_home:'$HOME/.lumenx',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'ulumen',fixed_min_gas_price:0.0025}]},codebase:{git_repo:'https://github.com/metaprotocol-ai/lumenx',recommended_version:'v0.1.0',compatible_versions:['v0.1.0'],genesis:{genesis_url:'https://raw.githubusercontent.com/metaprotocol-ai/lumenx/master/config/genesis.json'}},peers:{seeds:[{id:'bc22063df30a0644df742cdb2764b1004df6e3e3',address:'node1.lumenex.io:26656'},{id:'9cd5f77ac27254891f64801470b0c3432188c62c',address:'node2.lumenex.io:26656'},{id:'78669849476c8b728abe178475c6f016edf175cf',address:'node3.lumenex.io:26656'},{id:'48444a4bacc0cafa049d777152473769ab17c0c3',address:'node4.lumenex.io:26656'}],persistent_peers:[{id:'bc22063df30a0644df742cdb2764b1004df6e3e3',address:'node1.lumenex.io:26656'},{id:'9cd5f77ac27254891f64801470b0c3432188c62c',address:'node2.lumenex.io:26656'},{id:'78669849476c8b728abe178475c6f016edf175cf',address:'node3.lumenex.io:26656'},{id:'48444a4bacc0cafa049d777152473769ab17c0c3',address:'node4.lumenex.io:26656'}]},apis:{rpc:[{address:'https://rpc.lumenx.chaintools.tech/',provider:'ChainTools'},{address:'https://rpc-lumenx.cryptonet.pl/',provider:'CryptoNet'}],rest:[{address:'https://api.lumenx.chaintools.tech/',provider:'ChainTools'},{address:'https://api-lumenx.cryptonet.pl/',provider:'CryptoNet'}]},explorers:[{kind:'ping.pub',url:'https://explorer.chaintools.tech/lumenx',tx_page:'https://explorer.chaintools.tech/lumenx/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'lumnetwork',status:'live',network_type:'mainnet',website:'https://lum.network/',pretty_name:'Lum Network',chain_id:'lum-network-1',bech32_prefix:'lum',daemon_name:'lumd',node_home:'$HOME/.lumd',key_algos:['secp256k1'],slip44:880,fees:{fee_tokens:[{denom:'ulum',fixed_min_gas_price:0.001}]},codebase:{git_repo:'https://github.com/lum-network/chain',recommended_version:'v1.3.0',compatible_versions:['v1.3.0'],genesis:{genesis_url:'https://raw.githubusercontent.com/lum-network/mainnet/master/genesis.json'}},peers:{seeds:[{id:'19ad16527c98b782ee35df56b65a3a251bd99971',address:'peer-1.mainnet.lum.network:26656',provider:'lum foundation'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:16756',provider:'Lavender.Five Nodes 🐝'},{id:'6e73250b636b55e8c1033ba96c14b9cc6d45958c',address:'seed-lum.starsquid.io:15608',provider:'Starsquid'},{id:'0df233b1eb62504f96a856ce358014b2fb8ce91b',address:'lum-seed.panthea.eu:43656',provider:'Panthea EU'}],persistent_peers:[{id:'b47626b9d78ed7ed3c413304387026f907c70cbe',address:'peer-0.mainnet.lum.network:26656',provider:'lum foundation'},{id:'e12fcc7d9fc9b8b2901aec950f161418794cccf0',address:'65.108.77.38:26656',provider:'everstake'},{id:'4166de0e7721b6eec9c776abf2c38c40e7f820c5',address:'202.61.239.130:26656',provider:'stakecito'},{id:'fbaeeff89ec94a4f6c4a2a61e24af7d06b3be0c8',address:'46.166.140.180:26656',provider:'simply staking'},{id:'5a29947212a2615e43dac54deb55356a162e173a',address:'35.181.76.160:26656',provider:'imperator'},{id:'5ea36d78ae774c9086c2d3fc8b91f12aa4bf3029',address:'46.101.251.76:26656',provider:'cryptocrew'},{id:'433c60a5bc0a693484b7af26208922b84773117e',address:'34.209.132.0:26656',provider:'cosmostation'},{id:'9afac13ba62fbfaf8d06867c30007162511093c0',address:'54.214.134.223:26656',provider:'cosmostation'},{id:'43216584c1e6b1056566a4825b15cdfbfc79d9e8',address:'lum-peer.panthea.eu:33656',provider:'Panthea EU'}]},apis:{rpc:[{address:'https://node0.mainnet.lum.network/rpc',provider:'Lum Foundation'},{address:'https://lum-rpc.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://rpc-lum.starsquid.io',provider:'Starsquid'},{address:'https://lum-rpc.panthea.eu',provider:'Panthea EU'},{address:'https://rpc.lum.bh.rocks',provider:'BlockHunters 🎯'}],rest:[{address:'https://node0.mainnet.lum.network/rest',provider:'Lum Foundation'},{address:'https://lum-api.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://api-lum.starsquid.io',provider:'Starsquid'},{address:'https://lum-api.panthea.eu',provider:'Panthea EU'},{address:'https://api.lum.bh.rocks',provider:'BlockHunters 🎯'}],grpc:[{address:'https://lum-grpc.lavenderfive.com:443/',provider:'Lavender.Five Nodes 🐝'},{address:'https://grpc.lum.bh.rocks:443/',provider:'BlockHunters 🎯'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/lumnetwork',tx_page:'https://ezstaking.tools/lumnetwork/txs/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/lum',tx_page:'https://www.mintscan.io/lum/txs/${txHash}',account_page:'https://www.mintscan.io/lum/account/${accountAddress}'},{kind:'lum-network',url:'https://explorer.lum.network',tx_page:'https://explorer.lum.network/txs/${txHash}'},{kind:'ping.pub',url:'https://ping.pub/lum-network',tx_page:'https://ping.pub/lum-network/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/lum-network',tx_page:'https://atomscan.com/lum-network/transactions/${txHash}'}]},{$schema:'../../chain.schema.json',chain_name:'medasdigital-1',status:'live',network_type:'mainnet',website:'https://medas-digital.io/',pretty_name:'Medas Digital Network',chain_id:'medasdigital-1',bech32_prefix:'medas',daemon_name:'medasdigitald',node_home:'$HOME/.medasdigital',key_algos:['secp256k1'],fees:{fee_tokens:[{denom:'umedas',fixed_min_gas_price:0,low_gas_price:0,average_gas_price:0.1,high_gas_price:1}]},staking:{staking_tokens:[{denom:'umedas'}]},codebase:{git_repo:'https://github.com/oxygene76/medasdigital/',recommended_version:'v0.94',compatible_versions:['v0.94'],genesis:{genesis_url:'https://github.com/oxygene76/medasdigital/tree/main/networks/mainnet/genesis.json'}},peers:{persistent_peers:[{id:'afa88136727d46b4c15fe6e041f53fdb25cc37c0',address:'212.6.177.10:26656',provider:'Neptun Validator'},{id:'a50887a49a5c908631a036013d38cc825b10f8fe',address:'212.6.177.11:26656',provider:'Uranus Validator'},{id:'e89a2ed10488de6d8134ff67101aa1a883a0c6bd',address:'212.6.177.12:26656',provider:'Saturn Validator'},{id:'95d55f5d4a61d18508441f3357fadf221abe43ca',address:'64.251.18.192:26656',provider:'Mars Validator'},{id:'15376dbf45a1cf907958e2a684c436a62cc0825d',address:'67.207.180.166:26656',provider:'Jupiter Validator'}]},apis:{rpc:[{address:'https://rpc.medas-digital.io:26657/',provider:'Neptun Validator'}],grpc:[{address:'grpc.medas-digital.io:9090',provider:'Neptun Validator'}],rest:[{address:'https://lcd.medas-digital.io:1317/',provider:'Neptun Validator'}]},explorers:[{kind:'Mintscan',url:'https://www.mintscan.io/medasdigital',tx_page:'https://www.mintscan.io/medasdigital/txs/${txHash}'}],slip44:118},{$schema:'../chain.schema.json',chain_name:'meme',status:'live',network_type:'mainnet',pretty_name:'MEME',chain_id:'meme-1',bech32_prefix:'meme',daemon_name:'memed',node_home:'$HOME/.memed',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'umeme',fixed_min_gas_price:0.025,low_gas_price:0.025,average_gas_price:0.035,high_gas_price:0.045}]},staking:{staking_tokens:[{denom:'umeme'}]},codebase:{git_repo:'https://github.com/memecosmos/meme/',recommended_version:'v1.0.0',compatible_versions:['v1.0.0'],genesis:{genesis_url:'https://github.com/memecosmos/mainnet/raw/main/meme-1/genesis.json'}},peers:{seeds:[{id:'dbe97ebeb4d07999a1fe2de2f92a56cc07385259',address:'seeds.pupmos.network:2005',provider:'PUPMØS'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:14756',provider:'Polkachu'}],persistent_peers:[{id:'a9959fef554ee407f23dffbcd4c0711e02a07d18',address:'207.246.107.204:26656',provider:'MEME Foundation'},{id:'f6e846ee01e14bc06e9b1b8be9237d8c365614e7',address:'45.76.154.44:26656',provider:'MEME Foundation'},{id:'1e2a4e7c513d1ba267fe2e689d4dfe6d6105f644',address:'139.180.140.142:26656',provider:'MEME Foundation'},{id:'c57fce65a0e6be87763ae38d607b817b3acde620',address:'173.212.215.104:26656',provider:'Theamsolutions'},{id:'c1e05690adfbc970817e0debb5d7770ee9f2f3ac',address:'65.108.131.174:47656',provider:'Polkachu'},{id:'fc21b0c26b6840915f6fe2daf56565e1c30e0956',address:'162.55.245.104:26656',provider:'PUPMØS'}]},apis:{rpc:[{address:'https://rpc-meme-1.meme.sx/',provider:'MEME Foundation'},{address:'https://meme-rpc.polkachu.com/',provider:'Polkachu'},{address:'https://rpc-meme.pupmos.network/',provider:'PUPMØS'},{address:'https://meme-rpc.kleomedes.network',provider:'Kleomedes'},{address:'http://meme.statesync.nodersteam.com:26657',provider:'Nodersteam'},{address:'https://rpc.meme.interbloc.org/',provider:'Interbloc'}],rest:[{address:'https://api-meme-1.meme.sx/',provider:'MEME Foundation'},{address:'https://api.meme.interbloc.org/',provider:'Interbloc'},{address:'https://meme-api.polkachu.com/',provider:'Polkachu'},{address:'https://api-meme.pupmos.network/',provider:'PUPMØS'},{address:'https://meme-api.kleomedes.network',provider:'Kleomedes'}],grpc:[{address:'meme-grpc.polkachu.com:14790',provider:'Polkachu'}]},explorers:[{kind:'ping.pub',url:'https://ping.pub/meme',tx_page:'https://ping.pub/meme/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/meme',tx_page:'https://atomscan.com/meme/transactions/${txHash}',account_page:'https://atomscan.com/meme/accounts/${accountAddress}'},{kind:'MEME Explorer',url:'https://explorer.meme.sx/meme',tx_page:'https://explorer.meme.sx/meme/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/meme',tx_page:'https://atomscan.com/meme/transactions/${txHash}'},{kind:'Brochain',url:'https://explorer.brocha.in/meme',tx_page:'https://explorer.brocha.in/meme/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'microtick',status:'killed',network_type:'mainnet',pretty_name:'Microtick',chain_id:'microtick-1',bech32_prefix:'micro',daemon_name:'mtm',codebase:{git_repo:'https://github.com/microtick/mtzone',recommended_version:'mtm-v2.0.4',compatible_versions:['mtm-v2.0.4'],genesis:{genesis_url:'https://raw.githubusercontent.com/microtick/stargate-genesis/master/genesis.json'}},explorers:[{kind:'ping.pub',url:'https://ping.pub/microtick',tx_page:'https://ping.pub/microtick/tx/${txHash}'}],slip44:118},{$schema:'../chain.schema.json',chain_name:'mises',status:'live',network_type:'mainnet',website:'https://mises.site',pretty_name:'Mises',chain_id:'mainnet',bech32_prefix:'mises',node_home:'$HOME/.misestm',daemon_name:'misestmd',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'umis',fixed_min_gas_price:0}]},staking:{staking_tokens:[{denom:'umis'}]},codebase:{git_repo:'https://github.com/mises-id/mises-tm',recommended_version:'v1.0.4',compatible_versions:['v1.0.4'],genesis:{genesis_url:'https://raw.githubusercontent.com/mises-id/mainnet/master/genesis.json'}},peers:{seeds:[{id:'1070b5c04c9b2af28aedf1b8cbeaf7e90b123464',address:'rpc.gw.mises.site:36656',provider:'Mises-1'},{id:'40a8318fa18fa9d900f4b0d967df7b1020689fa0',address:'e1.mises.site:26656',provider:'Mises-2'},{id:'0d25c5db4cbdc4171c8272278040db774011c268',address:'e2.mises.site:26656',provider:'Mises-3'},{id:'1adcfe9b030125b9caa72f3eae3b1274cbaca2cd',address:'w1.mises.site:26656',provider:'Mises-4'},{id:'1a96557a74cb8448249b9d15c3cc38cd3aff553d',address:'w2.mises.site:26656',provider:'Mises-5'}],persistent_peers:[{id:'de2eff71ca8f2bce98418ab3538a366bc7e9dca0',address:'mises.peer.jambulmerah.dev:16656',provider:'JambulMerah | Cosmos⚛️Lovers❤️'}]},apis:{rpc:[{address:'https://rpc.gw.mises.site:443',provider:'Mises-1'},{address:'https://e1.mises.site:443',provider:'Mises-2'},{address:'https://e2.mises.site:443',provider:'Mises-3'},{address:'https://w1.mises.site:443',provider:'Mises-4'},{address:'https://w2.mises.site:443',provider:'Mises-5'},{address:'https://mises-rpc.jambulmerah.dev:443',provider:'JambulMerah | Cosmos⚛️Lovers❤️'}],rest:[{address:'https://mises-api.jambulmerah.dev',provider:'JambulMerah | Cosmos⚛️Lovers❤️'}],grpc:[{address:'mises.grpc.jambulmerah.dev:16090',provider:'JambulMerah | Cosmos⚛️Lovers❤️'}]},explorers:[{kind:'Mises-GW Explorer',url:'https://gw.mises.site',tx_page:'https://gw.mises.site/tx/${txHash}'},{kind:'Jambulmerah ping.pub based',url:'https://explorer.jambulmerah.dev/mises',tx_page:'https://explorer.jambulmerah.dev/mises/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'mythos',status:'live',network_type:'mainnet',pretty_name:'Mythos',chain_id:'mythos_7001-1',bech32_prefix:'mythos',daemon_name:'mythosd',node_home:'$HOME/.mythosd',key_algos:['ethsecp256k1'],extra_codecs:['ethermint'],slip44:60,fees:{fee_tokens:[{denom:'aMYT'}]},peers:{seeds:[],persistent_peers:[]},apis:{rpc:[{address:'https://mythos-rpc.provable.dev:443/',provider:'laurel.provable'}],rest:[{address:'https://mythos.provable.dev/rest/',provider:'laurel.provable'}],grpc:[{address:'https://mythos-grpc.provable.dev:443',provider:'laurel.provable'}],'evm-http-jsonrpc':[{address:'https://mythos-evm.provable.dev/',provider:'laurel.provable'}]},explorers:[],logo_URIs:{png:'https://raw.githubusercontent.com/cosmos/chain-registry/master/mythos/images/mythos.png',svg:'https://raw.githubusercontent.com/cosmos/chain-registry/master/mythos/images/mythos.svg'},codebase:{genesis:{genesis_url:''}}},{$schema:'../chain.schema.json',chain_name:'nomic',status:'live',network_type:'mainnet',pretty_name:'Nomic',website:'https://nomic.io/',chain_id:'nomic-stakenet-3',bech32_prefix:'nomic',daemon_name:'nomic',node_home:'$HOME/.nomic-stakenet-3',codebase:{git_repo:'https://github.com/nomic-io/nomic',recommended_version:'develop',compatible_versions:['develop','v3'],genesis:{genesis_url:'https://raw.githubusercontent.com/nomic-io/nomic/develop/genesis.json'}},peers:{seeds:[{id:'238120dfe716082754048057c1fdc3d6f09609b5',address:'161.35.51.124:26656'},{id:'a67d7a4d90f84d5c67bfc196aac68441ba9484a6',address:'167.99.119.196:26659'},{id:'34544f82960d2ff2b1defb7b04f097557f4183be',address:'seeds.goldenratiostaking.net:26656',provider:'Golden Ratio Staking'},{id:'10beadbcd4bc5fef8a1f5f57353bdb8646f7a554',address:'seeds.whispernode.com:26656',provider:'WhisperNode🤐'}],persistent_peers:[]},apis:{rpc:[{address:'http://138.197.71.46:26657',provider:'nomic-io'},{address:'https://nomic-rpc.polkachu.com/',provider:'Polkachu'},{address:'https://rpc.nomic.interbloc.org',provider:'Interbloc'},{address:'https://rpc.nomic.bh.rocks',provider:'BlockHunters 🎯'}],rest:[{address:'https://app.nomic.io:8443',provider:'nomic-io'}]},slip44:118},{$schema:'../chain.schema.json',chain_name:'nyx',status:'live',network_type:'mainnet',website:'https://nymtech.net/',pretty_name:'Nym',chain_id:'nyx',bech32_prefix:'n',daemon_name:'nyxd',node_home:'$HOME/.nyxd',slip44:118,fees:{fee_tokens:[{denom:'unym',fixed_min_gas_price:0.25}]},codebase:{git_repo:'https://github.com/nymtech/nym/',recommended_version:'v.1.1',compatible_versions:['v1.0'],binaries:{'linux/amd64':'https://github.com/nymtech/nym/releases/'},genesis:{genesis_url:'https://nymtech.net/genesis/genesis.json'}},peers:{seeds:[],persistent_peers:[{id:'4acf579e2744268f834c713e894850995bbf0ffa',address:'50.18.31.225:26656'},{id:'33f8e220cc44f2fed6a839b55f4520f0cf6fa8b2',address:'142.132.147.189:38656'},{id:'a58b9b102e7d91f4900036b40b8232d386245c55',address:'3.65.247.65:26656'},{id:'5185b9f7abedbbbf48149491731fe9b6aa39b17b',address:'38.242.194.49:26656'},{id:'ee03a6777fb76a2efd0106c3769daaa064a3fcb5',address:'51.79.21.187:26656'},{id:'6bac8d8e4b43a230d2da45480d82ec87144c2f23',address:'nyx-validator.nym.blockfend.com:26656'},{id:'3905ef90a12784a6f0ae4435fcd8ad13816f12ac',address:'35.245.211.169:26656'},{id:'510cdd3e5ed0367eafa3d1c277ede2e0a4536dbb',address:'35.215.58.39:26656'},{id:'ded5157860dcd05e6308ef453df9bd53c1112bb6',address:'35.215.44.229:26656'},{id:'2f57a4a5926ceadb91a6df09a82ebad322777a6c',address:'sentry-2.nym.ezstaking.xyz:26666'},{id:'8fb63514b6325459fb90ede3b3697ec0827b6f50',address:'35.223.70.235:26656'},{id:'6625c048105d86d8bd6c22bc1359e10f4de1e6d4',address:'34.125.78.165:26656'},{id:'7c5a3701cb4095fd28484e39d29e270001c19ae1',address:'65.108.110.59:38656'},{id:'a0fd38e40fd53699437d90456e0a2e62df0607e0',address:'15.235.9.199:26656'},{id:'e6d01a3ab3467953d14ad79a56a5a5eec0625096',address:'35.215.56.11:26656'},{id:'22120fe1203d2721cda9dd2548a346fdae43aedb',address:'51.79.80.25:26656'},{id:'611c8b24adc5ae17477b3dfedae32af117d6d276',address:'35.215.45.32:26656'},{id:'4e1663adac48c439baa5fbaebb9c9ddde91f9c18',address:'51.79.72.10:26656'},{id:'b436cf49cd0e163ea1aa9eaf38e3d2250eb42c9e',address:'51.222.248.217:26656'},{id:'2e2ae7a117b22c0a09b685b963603150f702b6af',address:'144.126.133.37:10053'}]},apis:{rpc:[{address:'https://rpc.nyx.nodes.guru/',provider:'nodes guru'},{address:'https://nym.vladiatorlabs.io/',provider:'vladiatorlabs'},{address:'https://rpc.nyx.ezstaking.io/',provider:'ezstaking'},{address:'https://rpc.nym.forbole.com/',provider:'forbole'},{address:'https://rpc-nyx.testnet.run/',provider:'testnet-run'},{address:'https://nym-mainnet-rpc.commodum.io/',provider:'commodum'},{address:'https://nym-rpc.polkachu.com/',provider:'polkachu'}],rest:[{address:'https://api.akash.forbole.com:443',provider:'nodes guru'}],grpc:[{address:'nym-grpc.polkachu.com:15390',provider:'polkachu'}]},explorers:[{kind:'Nodes Guru explorer',url:'https://nym.explorers.guru/',tx_page:'https://nym.explorers.guru/transaction/${txHash}',account_page:'https://nym.explorers.guru/account/${accountAddress}'},{kind:'EZStaking Tools',url:'https://ezstaking.tools/nyx'},{kind:'mintscan',url:'https://www.mintscan.io/nyx',tx_page:'https://www.mintscan.io/nyx/txs/${txHash}',account_page:'https://www.mintscan.io/nyx/account/${accountAddress}'},{kind:'ping.pub',url:'https://ping.pub/nyx',tx_page:'https://ping.pub/nyx/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'octa',status:'live',network_type:'mainnet',pretty_name:'Octa',chain_id:'octa',bech32_prefix:'octa',daemon_name:'octadaemon',node_home:'$HOME/.octa',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'uocta',fixed_min_gas_price:0}]},codebase:{git_repo:'',recommended_version:'',compatible_versions:[],binaries:{'linux/amd64':'','linux/arm64':'','darwin/amd64':'','windows/amd64':''},genesis:{genesis_url:'https://octa-coin-assets.s3.eu-central-1.amazonaws.com/genesis.json'}},peers:{seeds:[{id:'d35844470ba3c80f052091a9c86d44198e579246',address:'3.73.39.110:26656'}],persistent_peers:[{id:'935118052f48eede9ed7d38d3da8e20cb5747e39',address:'3.123.21.45:26656',provider:'GenesisNode'},{id:'61823fb4af8a48ac161522114c6640b76fd8a6d9',address:'3.71.102.151:26656',provider:'Basic_Validator'}]},apis:{rpc:[{address:'http://3.71.102.151:26657',provider:'octa'}],rest:[{address:'http://3.71.102.151:1317',provider:'octa'}]},explorers:[{kind:'Octa explorer',url:'http://explorer.octa-coin.com/',tx_page:'http://explorer.octa-coin.com/txs/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'odin',status:'live',network_type:'mainnet',website:'https://odinprotocol.io/',pretty_name:'Odin Protocol',chain_id:'odin-mainnet-freya',bech32_prefix:'odin',daemon_name:'odind',node_home:'$HOME/.odin',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'loki',fixed_min_gas_price:0.0125}]},codebase:{git_repo:'https://github.com/ODIN-PROTOCOL/odin-core',recommended_version:'v0.6.2',compatible_versions:['v0.6.2'],genesis:{genesis_url:'https://raw.githubusercontent.com/ODIN-PROTOCOL/networks/master/mainnets/odin-mainnet-freya/genesis.json'}},peers:{persistent_peers:[{id:'9d16b1ce74a34b869d69ad5fe34eaca614a36ecd',address:'35.241.238.207:26656',provider:'Odin Protocol'},{id:'02e905f49e1b869f55ad010979931b542302a9e6',address:'35.241.221.154:26656',provider:'Odin Protocol'},{id:'4847c79f1601d24d3605278a0183d416a99aa093',address:'34.140.252.7:26656',provider:'Odin Protocol'},{id:'0165cd0d60549a37abb00b6acc8227a54609c648',address:'34.79.179.216:26656',provider:'Odin Protocol'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'odin.mainnet.peer.autostake.net:26766',provider:'AutoStake.net'}],seeds:[{id:'c8ee9f66163f0c1220c586eab1a2a57f6381357f',address:'odin.seed.rhinostake.com:16658',provider:'Rhino Stake'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:16856',provider:'Lavender.Five Nodes 🐝'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'odin.mainnet.seed.autostake.net:26766',provider:'AutoStake.net'}]},apis:{rpc:[{address:'http://34.79.179.216:26657',provider:'Odin Protocol'},{address:'https://odin-rpc.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'}],rest:[{address:'http://34.79.179.216:1317/',provider:'Odin Protocol'},{address:'https://odin-api.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'}],grpc:[{address:'https://odin-grpc.lavenderfive.com:443/',provider:'Lavender.Five Nodes 🐝'}]},explorers:[{kind:'odin web',url:'https://mainnet.odinprotocol.io/',tx_page:'https://mainnet.odinprotocol.io/transactions/${txHash}'},{kind:'ping.pub',url:'https://ping.pub/odin',tx_page:'https://ping.pub/odin/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'okexchain',status:'live',network_type:'mainnet',pretty_name:'OKExChain',chain_id:'exchain-66',bech32_prefix:'ex',daemon_name:'exchaind',node_home:'$HOME/.exchaind',slip44:60,fees:{fee_tokens:[{denom:'wei',low_gas_price:200000000,average_gas_price:250000000,high_gas_price:400000000}]},codebase:{git_repo:'https://github.com/okex/exchain',recommended_version:'v1.6.1.1',compatible_versions:['v1.2.2','v1.6.1.1'],binaries:{},genesis:{genesis_url:'https://github.com/okex/mainnet/blob/main/genesis.json'}},peers:{seeds:[{id:'e926c8154a2af4390de02303f0977802f15eafe2',address:'3.16.103.80:26656',provider:'Chillcrypto'},{id:'7fa5b1d1f1e48659fa750b6aec702418a0e75f13',address:'175.41.191.69:26656',provider:'Unique farming'},{id:'c8f32b793871b56a11d94336d9ce6472f893524b',address:'35.74.8.189:26656',provider:'DeLab'}],persistent_peers:[{id:'bbd4aa19249ad42de4fe2ca99209894412fd4707',address:'3.135.138.205:26656',provider:'ChainHub'},{id:'0eb87d4eb92f8f04d9c2d444dd403671a634af56',address:'13.125.38.24:26656',provider:'DeLab'},{id:'3449bb4d2180dfaa9ddb13776177b0e67f95ebb4',address:'54.255.93.228:26656',provider:'Chillcrypto'},{id:'b2a2f799a726b74f83f73b62e1bfef017575b21a',address:'54.151.166.67:26656',provider:'Unique farming'},{id:'01b21d39f250a3a5411113aae4a7032eaf9b344e',address:'3.64.37.17:26656',provider:'Nodeplus'},{id:'54c195e08ff53e9fd31973dd73d530dcd1506807',address:'52.78.236.126:26656',provider:'Blockpro'}]},apis:{rpc:[{address:'https://exchaintmrpc.okex.org',provider:'okx chain'}],rest:[{address:'https://exchainrpc.okex.org/',provider:'okx chain'}]},explorers:[{kind:'OKLink',url:'https://www.oklink.com/en/okc',tx_page:'https://www.oklink.com/en/okc/tx/${txHash}',account_page:'https://www.oklink.com/en/okc/address/${accountAddress}'}]},{$schema:'../chain.schema.json',chain_name:'omniflixhub',status:'live',network_type:'mainnet',website:'https://omniflix.co/home',pretty_name:'OmniFlix',chain_id:'omniflixhub-1',daemon_name:'omniflixhubd',node_home:'$HOME/.omniflixhub',bech32_prefix:'omniflix',slip44:118,codebase:{git_repo:'https://github.com/OmniFlix/omniflixhub',recommended_version:'v0.8.0',compatible_versions:['v0.8.0'],genesis:{genesis_url:'https://raw.githubusercontent.com/OmniFlix/mainnet/main/omniflixhub-1/genesis.json'}},fees:{fee_tokens:[{denom:'uflix',fixed_min_gas_price:0}]},peers:{seeds:[{id:'babc3f3f7804933265ec9c40ad94f4da8e9e0017',address:'seed.rhinostake.com:16956',provider:'RHINO'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:16956',provider:'Lavender.Five Nodes 🐝'}],persistent_peers:[{id:'2df1f357f08049ba0c0dddfffe805f0e135e54ec',address:'35.247.185.216:26656'},{id:'6198ac4bc907f6d1a78309ef58491370afc49799',address:'34.124.195.219:26656'},{id:'574b37cc6e80663e70673cbe848147c2643ca48e',address:'35.240.187.174:26656'},{id:'8313c9d55006da030588f61806b3e056a113e6e8',address:'34.87.18.204:26656'}]},apis:{rpc:[{address:'https://rpc.omniflix.kingnodes.com',provider:'kingnodes'},{address:'https://omniflixhub-rpc.skynetvalidators.com',provider:'skynet-validators'},{address:'https://rpc.omniflix.nodestake.top',provider:'NodeStake'},{address:'https://rpc.omniflix.chaintools.tech/',provider:'ChainTools'},{address:'https://rpc-omniflixhub-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://omniflix-rpc.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://rpc-omniflix.huginn.tech:443',provider:'Huginn'},{address:'https://rpc.omniflix.silentvalidator.com/',provider:'silent'},{address:'https://omniflix.nodejumper.io',provider:'Nodejumper 🚀'}],rest:[{address:'https://api.omniflix.kingnodes.com',provider:'kingnodes'},{address:'https://omniflixhub-api.skynetvalidators.com',provider:'skynet-validators'},{address:'https://api.omniflix.nodestake.top',provider:'NodeStake'},{address:'https://api.omniflix.chaintools.tech/',provider:'ChainTools'},{address:'https://api-omniflixhub-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://omniflix-api.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://api.omniflix.huginn.tech:443',provider:'Huginn'},{address:'https://api.omniflix.silentvalidator.com/',provider:'silent'},{address:'https://omniflix.nodejumper.io:1317',provider:'Nodejumper 🚀'}],grpc:[{address:'https://grpc.omniflix.kingnodes.com',provider:'kingnodes'},{address:'https://grpc.omniflix.nodestake.top',provider:'NodeStake'},{address:'grpc-omniflixhub-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'https://omniflix-grpc.lavenderfive.com:443/',provider:'Lavender.Five Nodes 🐝'},{address:'https://grpc.omniflix.silentvalidator.com/',provider:'silent'},{address:'https://omniflix.nodejumper.io:9090',provider:'Nodejumper 🚀'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/omniflixhub',tx_page:'https://ezstaking.tools/omniflixhub/txs/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/omniflix',tx_page:'https://www.mintscan.io/omniflix/txs/${txHash}',account_page:'https://www.mintscan.io/omniflix/account/${accountAddress}'},{kind:'atomscan',url:'https://atomscan.com/omniflixhub',tx_page:'https://atomscan.com/omniflixhub/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'onomy',status:'live',network_type:'mainnet',website:'https://onomy.io/',pretty_name:'Onomy',chain_id:'onomy-mainnet-1',bech32_prefix:'onomy',daemon_name:'onomyd',node_home:'$HOME/.onomyd',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'anom',low_gas_price:0,average_gas_price:0.03,high_gas_price:0.06}]},staking:{staking_tokens:[{denom:'anom'}]},codebase:{git_repo:'https://github.com/onomyprotocol/onomy',recommended_version:'v1.0.1',compatible_versions:['v1.0.1'],binaries:{'linux/amd64':'https://github.com/onomyprotocol/onomy/releases/download/v1.0.1/onomyd','linux/arm64':'https://github.com/onomyprotocol/onomy/releases/download/v1.0.1/onomyd-arm'},cosmos_sdk_version:'0.44',tendermint_version:'0.34',ibc_go_version:'2.0.4',genesis:{genesis_url:'https://raw.githubusercontent.com/onomyprotocol/onomy/main/genesis/mainnet/genesis-mainnet-1.json'}},peers:{seeds:[{id:'211535f9b799bcc8d46023fa180f3359afd4c1d3',address:'44.213.44.5:26656',provider:'onomy'},{id:'cd9a47cebe8eef076a5795e1b8460a8e0b2384e5',address:'3.210.0.126:26656',provider:'onomy'}],persistent_peers:[{id:'c213f678b9e3b7c37b9229318b3e27b95c9d5af4',address:'52.70.182.125:26656',provider:'WhisperNode 🤐'},{id:'00ce2f84f6b91639a7cedb2239e38ffddf9e36de',address:'44.195.221.88:26656',provider:'cosmostation'}]},apis:{rpc:[{address:'https://rpc-mainnet.onomy.io',provider:'onomy'}],rest:[{address:'https://rest-mainnet.onomy.io',provider:'onomy'}],grpc:[{address:'https://grpc-mainnet.onomy.io:9090',provider:'onomy'}]},explorers:[{kind:'Big Dipper',url:'https://explorer.onomy.io',tx_page:'https://explorer.onomy.io/transactions/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/onomy-protocol',tx_page:'https://www.mintscan.io/onomy-protocol/txs/${txHash}',account_page:'https://www.mintscan.io/onomy-protocol/account/${accountAddress}'}],logo_URIs:{png:'https://raw.githubusercontent.com/cosmos/chain-registry/master/onomy/images/nom.png'},keywords:['dex','stablecoin','bridge','staking']},{$schema:'../chain.schema.json',chain_name:'oraichain',status:'live',network_type:'mainnet',website:'https://orai.io/',pretty_name:'Oraichain',chain_id:'Oraichain',bech32_prefix:'orai',daemon_name:'oraid',node_home:'$WORKSPACE/.oraid',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'orai',fixed_min_gas_price:0}]},codebase:{git_repo:'https://github.com/oraichain/orai',recommended_version:'v0.40.3',compatible_versions:['v0.40.3'],binaries:{'linux/amd64':'https://orai.s3.us-east-2.amazonaws.com/v0.40.3/oraid'},genesis:{genesis_url:'https://raw.githubusercontent.com/oraichain/oraichain-static-files/master/mainnet-static-files/genesis.json'}},peers:{seeds:[{id:'0baa806b3a4dd17be6e06369d899f140c3897d6e',address:'18.223.242.70:26656',provider:'oraichain-team'},{id:'9749da4a81526266d7b8fe9a03d260cd3db241ad',address:'18.116.209.76:26656',provider:'oraichain-team'},{id:'59d49e39d507bb190e746bcf5590d65879c132e2',address:'13.79.247.74:26656',provider:'vaiot'},{id:'35c1f999d67de56736b412a1325370a8e2fdb34a',address:'5.189.169.99:26656',provider:'ORAI Vanguard'},{id:'5ad3b29bf56b9ba95c67f282aa281b6f0903e921',address:'64.225.53.108:26656',provider:'oraichain-team'},{id:'d091cabe3584cb32043cc0c9199b0c7a5b68ddcb',address:'seed.orai.synergynodes.com:26656',provider:'synergynodes'}],persistent_peers:[{id:'0baa806b3a4dd17be6e06369d899f140c3897d6e',address:'18.223.242.70:26656'},{id:'9749da4a81526266d7b8fe9a03d260cd3db241ad',address:'18.116.209.76:26656'},{id:'59d49e39d507bb190e746bcf5590d65879c132e2',address:'13.79.247.74:26656'},{id:'35c1f999d67de56736b412a1325370a8e2fdb34a',address:'5.189.169.99:26656'},{id:'5ad3b29bf56b9ba95c67f282aa281b6f0903e921',address:'64.225.53.108:26656'},{id:'d091cabe3584cb32043cc0c9199b0c7a5b68ddcb',address:'seed.orai.synergynodes.com:26656',provider:'synergynodes'},{id:'8b346750e75fd584645192a65c62c7ab88741791',address:'peer-oraichain.vchain.zone',provider:'Vchain-team'}]},apis:{rpc:[{address:'https://rpc.orai.io',provider:'oraichain-team'},{address:'http://18.223.242.70:26657',provider:'oraichain-team'},{address:'http://18.116.209.76:26657',provider:'oraichain-team'},{address:'http://64.225.53.108:26657',provider:'oraichain-team'},{address:'http://13.79.247.74:26657',provider:'vaiot'},{address:'https://rpc-oraichain.vchain.zone',provider:'Vchain-team'}],rest:[{address:'http://lcd.orai.io',provider:'oraichain-team'},{address:'http://18.223.242.70:1317',provider:'oraichain-team'},{address:'http://18.116.209.76:1317',provider:'oraichain-team'},{address:'http://64.225.53.108:1317',provider:'oraichain-team'},{address:'https://rest-oraichain.vchain.zone',provider:'Vchain-team'}]},explorers:[{kind:'oraiscan',url:'https://scan.orai.io',tx_page:'https://scan.orai.io/txs/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'osmosis',status:'live',network_type:'mainnet',website:'https://osmosis.zone/',update_link:'https://raw.githubusercontent.com/osmosis-labs/osmosis/main/chain.schema.json',pretty_name:'Osmosis',chain_id:'osmosis-1',bech32_prefix:'osmo',daemon_name:'osmosisd',node_home:'$HOME/.osmosisd',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'uosmo',fixed_min_gas_price:0,low_gas_price:0,average_gas_price:0.025,high_gas_price:0.04}]},staking:{staking_tokens:[{denom:'uosmo'}]},codebase:{git_repo:'https://github.com/osmosis-labs/osmosis',recommended_version:'v13.1.0',compatible_versions:['v13.1.0','v13.1.1','v13.1.2'],binaries:{'linux/amd64':'https://github.com/osmosis-labs/osmosis/releases/download/v13.1.0/osmosisd-13.1.0-linux-amd64?checksum=sha256:50e734ee44e15c00927e4ce6c721bd79f5580f2b70cf37df52329224ad8089f0','linux/arm64':'https://github.com/osmosis-labs/osmosis/releases/download/v13.1.0/osmosisd-13.1.0-linux-arm64?checksum=sha256:ddc45deb04e7f4b7bdaaf3263ff1cbc469f7bfc51d3c9dae5d6817cb9e3c0bd7'},cosmos_sdk_version:'0.45',tendermint_version:'0.34',cosmwasm_version:'0.29',cosmwasm_enabled:true,ibc_go_version:'3.4.0',ics_enabled:['ics20-1'],genesis:{name:'v3',genesis_url:'https://github.com/osmosis-labs/networks/raw/main/osmosis-1/genesis.json'},versions:[{name:'v3',tag:'v3.1.0',height:0,next_version_name:'v4'},{name:'v4',tag:'v4.2.0',height:1314500,next_version_name:'v5'},{name:'v5',tag:'v6.4.1',height:2383300,next_version_name:'v7'},{name:'v7',tag:'v8.0.0',height:3401000,next_version_name:'v9'},{name:'v9',tag:'v10.0.1',height:4707300,next_version_name:'v11'},{name:'v11',tag:'v11.0.0',height:5432450,next_version_name:'v12'},{name:'v12',tag:'v12.3.0',height:6246000,next_version_name:'v13'},{name:'v13',tag:'v13.1.0',height:7241500}]},peers:{seeds:[{id:'83adaa38d1c15450056050fd4c9763fcc7e02e2c',address:'ec2-44-234-84-104.us-west-2.compute.amazonaws.com:26656',provider:'notional'},{id:'23142ab5d94ad7fa3433a889dcd3c6bb6d5f247d',address:'95.217.193.163:26656',provider:'notional'},{id:'f82d1a360dc92d4e74fdc2c8e32f4239e59aebdf',address:'95.217.121.243:26656',provider:'notional'},{id:'e437756a853061cc6f1639c2ac997d9f7e84be67',address:'144.76.183.180:26656',provider:'notional'},{id:'f515a8599b40f0e84dfad935ba414674ab11a668',address:'osmosis.blockpane.com:26656',provider:'blockpane'},{id:'7c66126b64cd66bafd9ccfc721f068df451d31a3',address:'osmosis-seed.sunshinevalidation.io:9393',provider:'sunshine-validation'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:12556',provider:'Polkachu'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:12556',provider:'Lavender.Five Nodes 🐝'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'osmosis.mainnet.seed.autostake.net:26716',provider:'AutoStake 🛡️ Slash Protected'},{id:'3cc024d1c760c9cd96e6413abaf3b36a8bdca58e',address:'seeds.goldenratiostaking.net:1630',provider:'Golden Ratio Staking'},{id:'bd7064a50f5843e2c84c71c4dc18ac07424bdcc1',address:'seeds.whispernode.com:12556',provider:'WhisperNode🤐'}],persistent_peers:[{id:'b63e1e588e8feb7e4a4adf0f2542d755e606d3f1',address:'5.9.105.113:26656',provider:'WhisperNode 🤐'},{id:'8f67a2fcdd7ade970b1983bf1697111d35dfdd6f',address:'52.79.199.137:26656',provider:'cosmostation'},{id:'00c328a33578466c711874ec5ee7ada75951f99a',address:'35.82.201.64:26656',provider:'cosmostation'},{id:'cfb6f2d686014135d4a6034aa6645abd0020cac6',address:'52.79.88.57:26656',provider:'cosmostation'},{id:'8d9967d5f865c68f6fe2630c0f725b0363554e77',address:'134.255.252.173:26656',provider:'divecrypto'},{id:'785bc83577e3980545bac051de8f57a9fd82695f',address:'194.233.164.146:26656',provider:'forbole'},{id:'778fdedf6effe996f039f22901a3360bc838b52e',address:'161.97.187.189:36657',provider:'kalpatech'},{id:'64d36f3a186a113c02db0cf7c588c7c85d946b5b',address:'209.97.132.170:26656',provider:'solidstake'},{id:'4d9ac3510d9f5cfc975a28eb2a7b8da866f7bc47',address:'37.187.38.191:26656',provider:'stakelab'},{id:'2115945f074ddb038de5d835e287fa03e32f0628',address:'95.217.43.85:26656',provider:'stakerspace'},{id:'bf2c480eff178d2647ba1adfeee8ced568fe752c',address:'91.65.128.44:26656',provider:'stakerus'},{id:'2f9c16151400d8516b0f58c030b3595be20b804c',address:'37.120.245.167:26656',provider:'syncnode'},{id:'bada684070727cb3dda430bcc79b329e93399665',address:'173.212.240.91:26656',provider:'qf3l3k'},{id:'3fea02d121cb24503d5fbc53216a527257a9ab55',address:'143.198.145.208:26656',provider:'witval'},{id:'7de029fa5e9c1f39557c0e3523c1ae0b07c58be0',address:'78.141.219.223:26656',provider:'artifactstaking'},{id:'7024d1ca024d5e33e7dc1dcb5ed08349768220b9',address:'134.122.42.20:26656',provider:'figment'},{id:'d326ad6dffa7763853982f334022944259b4e7f4',address:'143.110.212.33:26656',provider:'figment'},{id:'e7916387e05acd53d1b8c0f842c13def365c7bb6',address:'176.9.64.212:26666',provider:'medusanode'},{id:'55eea69c21b46000c1594d8b4a448563b075d9e3',address:'34.107.19.235:26656',provider:'binaryholdings'},{id:'9faf468b90a3b2b85ffd88645a15b3715f68bb0b',address:'195.201.122.100:26656',provider:'chainflow'},{id:'ffc82412c0261a94df122b9cc0ce1de81da5246b',address:'15.222.240.16:26656',provider:'cephalopod'},{id:'5b90a530464885fd28c31f698c81694d0b4a1982',address:'35.183.238.70:26656',provider:'cephalopod'},{id:'7b6689cb18d625bbc069aa99d9d5521293db442c',address:'51.158.97.192:26656',provider:'mp20'},{id:'fda06dcebe2acd17857a6c9e9a7b365da3771ceb',address:'52.206.252.176:26656',provider:'stargaze'},{id:'8d9fd90a009e4b6e9572bf9a84b532a366790a1d',address:'193.26.156.221:26656',provider:'validatus'},{id:'44a760a66071dae257c5c044be604219bfc3510c',address:'49.12.35.177:36656',provider:'in3s.com'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'osmosis.mainnet.peer.autostake.net:26716',provider:'AutoStake 🛡️ Slash Protected'}]},apis:{rpc:[{address:'https://rpc.osmosis.zone/',provider:'Osmosis Foundation'},{address:'https://rpc-osmosis.blockapsis.com',provider:'chainapsis'},{address:'https://osmosis-rpc.quickapi.com:443',provider:'Chainlayer'},{address:'https://rpc-osmosis.whispernode.com',provider:'WhisperNode 🤐'},{address:'https://osmosis-rpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://osmosis.validator.network/',provider:'validatornetwork'},{address:'https://rpc-osmosis.ecostake.com',provider:'ecostake'},{address:'https://osmosis-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc-osmosis-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://rpc.osmosis.interbloc.org',provider:'Interbloc'},{address:'https://rpc.osmosis.silknodes.io',provider:'Silk Nodes'},{address:'https://osmosis.nodejumper.io',provider:'Nodejumper 🚀'},{address:'https://osmosis.rpc.stakin-nodes.com',provider:'Stakin'},{address:'https://rpc.osmosis.goldenratiostaking.net',provider:'Golden Ratio Staking'},{address:'https://osmosis-rpc.ibs.team',provider:'Inter Blockchain Services'},{address:'https://osmosis.rpc.interchain.ivaldilabs.xyz',provider:'Ivaldi Labs'},{address:'https://rpc.osl.zone',provider:'Osmosis Support Lab'}],rest:[{address:'https://lcd.osmosis.zone/',provider:'Osmosis Foundation'},{address:'https://osmosis-lcd.quickapi.com:443',provider:'Chainlayer'},{address:'https://lcd-osmosis.whispernode.com',provider:'WhisperNode 🤐'},{address:'https://lcd-osmosis.blockapsis.com',provider:'chainapsis'},{address:'https://osmosis-api.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://rest-osmosis.ecostake.com',provider:'ecostake'},{address:'https://api-osmosis-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://api.osmosis.interbloc.org',provider:'Interbloc'},{address:'https://osmosis-api.polkachu.com',provider:'Polkachu'},{address:'https://api.osmosis.silknodes.io',provider:'Silk Nodes'},{address:'https://osmosis.nodejumper.io:1317',provider:'Nodejumper 🚀'},{address:'https://osmosis.rest.stakin-nodes.com',provider:'Stakin'},{address:'https://osmosis-api.ibs.team',provider:'Inter Blockchain Services'},{address:'https://osmosis.rest.interchain.ivaldilabs.xyz',provider:'Ivaldi Labs'},{address:'https://api.osl.zone',provider:'Osmosis Support Lab'},{address:'https://osmosis.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'},{address:'https://osmosis.stakesystems.io/',provider:'stakesystems'}],grpc:[{address:'osmosis.strange.love:9090',provider:'strangelove'},{address:'https://osmosis-grpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'grpc-osmosis-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'osmosis-grpc.polkachu.com:12590',provider:'Polkachu'},{address:'https://grpc.osmosis.silknodes.io',provider:'Silk Nodes'},{address:'https://osmosis.nodejumper.io:9090',provider:'Nodejumper 🚀'},{address:'osmosis.grpc.stakin-nodes.com:443',provider:'Stakin'},{address:'osmosis.grpc.interchain.ivaldilabs.xyz:433',provider:'Ivaldi Labs'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/osmosis',tx_page:'https://ezstaking.tools/osmosis/txs/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/osmosis',tx_page:'https://www.mintscan.io/osmosis/txs/${txHash}',account_page:'https://www.mintscan.io/osmosis/account/${accountAddress}'},{kind:'ping.pub',url:'https://ping.pub/osmosis',tx_page:'https://ping.pub/osmosis/tx/${txHash}'},{kind:'explorers.guru',url:'https://osmosis.explorers.guru',tx_page:'https://osmosis.explorers.guru/transaction/${txHash}',account_page:'https://osmosis.explorers.guru/transaction/${accountAddress}'},{kind:'atomscan',url:'https://atomscan.com/osmosis',tx_page:'https://atomscan.com/osmosis/transactions/${txHash}'}],logo_URIs:{png:'https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmosis-chain-logo.png'},keywords:['dex']},{$schema:'../chain.schema.json',chain_name:'panacea',status:'live',network_type:'mainnet',website:'https://medibloc.com/en/',pretty_name:'Medibloc',chain_id:'panacea-3',bech32_prefix:'panacea',daemon_name:'panacead',node_home:'$HOME/.panacead',key_algos:['secp256k1'],slip44:371,fees:{fee_tokens:[{denom:'umed',fixed_min_gas_price:5,low_gas_price:5,average_gas_price:7,high_gas_price:9}]},staking:{staking_tokens:[{denom:'umed'}]},codebase:{git_repo:'https://github.com/medibloc/panacea-core',recommended_version:'v2.0.5',compatible_versions:['v2.0.5'],binaries:{},genesis:{genesis_url:'https://github.com/medibloc/panacea-mainnet/raw/master/panacea-3/genesis.json'}},peers:{persistent_peers:[{id:'e93f5df69cc1b9bda230b3efcf162d4672293ded',address:'3.35.82.40:26656',provider:'medibloc'},{id:'0e0db1c7ab1e37c76f2ceced0bb72e1c60ef17a6',address:'13.124.96.254:26656',provider:'medibloc'},{id:'a83232db3a40e486b54b1463a43431e8490b808b',address:'52.79.108.35:26656',provider:'medibloc'}]},apis:{rpc:[{address:'https://rpc.gopanacea.org',provider:'medibloc'}],rest:[{address:'https://api.gopanacea.org',provider:'medibloc'}]},explorers:[{kind:'mintscan',url:'https://www.mintscan.io/medibloc',tx_page:'https://www.mintscan.io/medibloc/txs/${txHash}'},{kind:'bigdipper',url:'https://explorer.gopanacea.org',tx_page:'https://explorer.gopanacea.org/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'passage',chain_id:'passage-1',pretty_name:'Passage',status:'live',network_type:'mainnet',website:'https://passage3d.com/',bech32_prefix:'pasg',daemon_name:'passage',node_home:'$HOME/.passage',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'upasg',fixed_min_gas_price:0}]},codebase:{git_repo:'https://github.com/envadiv/Passage3D',recommended_version:'v1.1.0',compatible_versions:['v1.1.0'],genesis:{genesis_url:'https://raw.githubusercontent.com/envadiv/mainnet/main/passage-1/genesis.json'}},peers:{seeds:[{id:'aebb8431609cb126a977592446f5de252d8b7fa1',address:'104.236.201.138:26656'},{id:'b6beabfb9309330944f44a1686742c2751748b83',address:'5.161.47.163:26656'},{id:'7a9a36630523f54c1a0d56fc01e0e153fd11a53d',address:'167.235.24.145:26656'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:15656',provider:'Polkachu'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:15656',provider:'Lavender.Five Nodes 🐝'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'passage.mainnet.seed.autostake.net:26916',provider:'AutoStake 🛡️ Slash Protected'},{id:'ecfd6a2ab8dc2b196080ff6506cd0d1c68f6f8b5',address:'passage-seed.panthea.eu:40656',provider:'Panthea EU'},{id:'2534bb8af72ab14e001a9f48b7cf9626221c6be5',address:'seeds.whispernode.com:15656',provider:'WhisperNode🤐'}],persistent_peers:[{id:'69975e7afdf731a165e40449fcffc75167a084fc',address:'104.131.169.70:26656'},{id:'d35d652b6cb3bf7d6cb8d4bd7c036ea03e7be2ab',address:'116.203.182.185:26656'},{id:'ffacd3202ded6945fed12fa4fd715b1874985b8c',address:'3.98.38.91:26656'},{id:'8e0b0d4f80d0d2853f853fbd6a76390113f07d72',address:'65.108.127.249:26656'},{id:'0111da7144fd2e8ce0dfe17906ef6fd760325aca',address:'142.132.213.231:26656'},{id:'55f34a3a6a48de316f778aebab7406298169ce02',address:'10.40.40.40:26656'},{id:'a8f1ec69d4dc60481b4250966053836af6f3d39f',address:'167.86.99.7:26656'},{id:'c51fb04ff004829736e6d3cb2c704a6c111470ea',address:'38.242.216.139:26656'},{id:'813f91ac5338de44e28aa7946039986dbec286ff',address:'198.244.228.17:36056'},{id:'9e6f10f401dadcb28a8164574147056b8e3ab748',address:'65.109.34.42:26656'},{id:'f76ccaa550d283ef1adb55c6aca5d94eab6a1806',address:'146.59.81.204:24456'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'passage.mainnet.peer.autostake.net:26916',provider:'AutoStake 🛡️ Slash Protected'},{id:'054b90a8dc7b392e4b1d0e3b6d09bcb2c38251cb',address:'passage-peer.panthea.eu:30656',provider:'Panthea EU'}]},apis:{rpc:[{address:'https://rpc.passage.vitwit.com',provider:'vitwit'},{address:'https://rpc.passage.blockscope.net:26657',provider:'blockscope'},{address:'https://services.staketab.com/passage-rpc',provider:'staketab'},{address:'https://rpc-passage.ecostake.com',provider:'ecostake'},{address:'https://passage-rpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://rpc-passage-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://rpc.passage.nodestake.top',provider:'NodeStake'},{address:'https://passage-rpc.polkachu.com',provider:'Polkachu'},{address:'https://passage-rpc.ibs.team/',provider:'Inter Blockchain Services'},{address:'https://rpc-passage.d-stake.xyz',provider:'D-stake'},{address:'https://passage-rpc.panthea.eu',provider:'Panthea EU'}],rest:[{address:'https://api.passage.vitwit.com',provider:'vitwit'},{address:'https://services.staketab.com/passage-api',provider:'staketab'},{address:'https://rest-passage.ecostake.com',provider:'ecostake'},{address:'https://passage-api.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://api-passage-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://api.passage.nodestake.top',provider:'NodeStake'},{address:'https://passage-api.polkachu.com',provider:'Polkachu'},{address:'https://passage-api.ibs.team/',provider:'Inter Blockchain Services'},{address:'https://api-passage.d-stake.xyz',provider:'D-stake'},{address:'https://passage-api.panthea.eu',provider:'Panthea EU'},{address:'https://passage.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'}],grpc:[{address:'grpc-passage-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'https://passage-grpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'passage-grpc.polkachu.com:15690',provider:'Polkachu'},{address:'https://grpc.passage.nodestake.top',provider:'NodeStake'},{address:'https://grpc-passage.d-stake.xyz',provider:'D-stake'}]},explorers:[{kind:'aneka',url:'https://passage.aneka.io',tx_page:'https://passage.aneka.io/txs/${txHash}',account_page:'https://passage.aneka.io/accounts/${accountAddress}'},{kind:'mintscan',url:'https://www.mintscan.io/passage',tx_page:'https://www.mintscan.io/passage/txs/${txHash}',account_page:'https://www.mintscan.io/passage/account/${accountAddress}'}],logo_URIs:{png:'https://raw.githubusercontent.com/cosmos/chain-registry/master/passage/images/pasg.png'}},{$schema:'../chain.schema.json',chain_name:'persistence',chain_id:'core-1',pretty_name:'Persistence',status:'live',network_type:'mainnet',website:'https://persistence.one/',bech32_prefix:'persistence',daemon_name:'persistenceCore',node_home:'$HOME/.persistenceCore',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'uxprt',fixed_min_gas_price:0}]},staking:{staking_tokens:[{denom:'uxprt'}]},codebase:{git_repo:'https://github.com/persistenceOne/persistenceCore',recommended_version:'v6.1.0',compatible_versions:['v6.1.0'],binaries:{'linux/amd64':'https://github.com/persistenceOne/persistenceCore/releases/download/v5.0.0/persistenceCore-linux-amd64.tar.gz'},genesis:{genesis_url:'https://raw.githubusercontent.com/persistenceOne/genesisTransactions/master/core-1/final_genesis.json'}},peers:{seeds:[{id:'449a0f1b7dafc142cf23a1f6166bbbf035edfb10',address:'13.232.85.66:26656'},{id:'eaa76966cad27a9807b7d8b9a62c9b2ca4924581',address:'tenderseed.ccvalidators.com:26003'},{id:'c16799ee5a236e08b1e49df62a545cf55d976dab',address:'seed-persistence.starsquid.io:15607',provider:'Starsquid'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'persistence.mainnet.seed.autostake.net:26896',provider:'AutoStake 🛡️ Slash Protected'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:15456',provider:'Polkachu'}],persistent_peers:[{id:'876946a947850952383347724206d067d7032b22',address:'3.137.86.151:26656'},{id:'ecc00c5a7abd057ea5ca4a94c48d1d937bbab34a',address:'34.118.19.56:26656'},{id:'ac7e6aab726e842b92c06b8ebbf5a3616872ee80',address:'128.1.133.107:26656'},{id:'b9dab7a1a5ffd16d43b19e40a8020db84e8dfffd',address:'3.14.116.246:44456'},{id:'60385a36ea72a2985bd8450c95b8df8be2adebb8',address:'54.95.235.242:26656'},{id:'a92ff1da2020e5cbc9b05527e9e39c34a84e8a27',address:'34.72.57.218:26656'},{id:'e15524629aee25fea01f62d26c4e062bfda94b70',address:'35.247.171.7:26656'},{id:'7c106099b8d07085431a97387e5a5db2d1ecd71d',address:'18.223.209.36:26656'},{id:'b19a3cf4d9938b41539729d027bf2e3c1a4e1fbb',address:'85.214.130.157:26656'},{id:'7cc92a9e3dcad37e5e7b3adf7814c37070fa9787',address:'161.97.187.189:26656'},{id:'7b9839cd3e994c44cbd747d1ddc51ee695f60e58',address:'157.90.134.48:26656'},{id:'cfb529bd0325fc884296518655f1f315bc42dd0c',address:'185.144.83.165:26656'},{id:'01102f3c84e6602e30e1e39498e242cbb60a0b73',address:'178.62.103.7:26656'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'persistence.mainnet.peer.autostake.net:26896',provider:'AutoStake 🛡️ Slash Protected'},{id:'137818b03a705cf86622b4d97a074091f2f22589',address:'185.225.233.30:26756',provider:'Cosmonaut Stakes'}]},apis:{rpc:[{address:'https://rpc.core.persistence.one',provider:'Persistence'},{address:'https://rpc-persistent-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://rpc-persistence.starsquid.io',provider:'Starsquid'},{address:'https://persistence-rpc.polkachu.com',provider:'Polkachu'},{address:'https://persistence-rpc.kleomedes.network',provider:'Kleomedes'},{address:'https://rpc-persistence.architectnodes.com',provider:'Architect Nodes'},{address:'https://persistence-mainnet-rpc.cosmonautstakes.com',provider:'Cosmonaut Stakes'},{address:'https://persistence-rpc.quantnode.tech',provider:'QuantNode'},{address:'https://persistence-rpc.zenscape.one',provider:'Zenscape'}],rest:[{address:'https://rest.core.persistence.one',provider:'Persistence'},{address:'https://api-persistent-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://api-persistence.starsquid.io',provider:'Starsquid'},{address:'https://persistence-api.polkachu.com',provider:'Polkachu'},{address:'https://persistence-api.kleomedes.network',provider:'Kleomedes'},{address:'https://rest-persistence.architectnodes.com',provider:'Architect Nodes'},{address:'https://persistence.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'},{address:'https://persistence-mainnet-rest.cosmonautstakes.com',provider:'Cosmonaut Stakes'},{address:'https://persistence-lcd.quantnode.tech',provider:'QuantNode'},{address:'https://persistence-rest.zenscape.one',provider:'Zenscape'}],grpc:[{address:'grpc.core.persistence.one:443',provider:'Persistence'},{address:'grpc-persistent-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'persistence-grpc.polkachu.com:15490',provider:'Polkachu'}]},explorers:[{kind:'mintscan',url:'https://www.mintscan.io/persistence',tx_page:'https://www.mintscan.io/persistence/txs/${txHash}',account_page:'https://www.mintscan.io/persistence/account/${accountAddress}'},{kind:'ping.pub',url:'https://ping.pub/persistence',tx_page:'https://ping.pub/persistence/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/persistence',tx_page:'https://atomscan.com/persistence/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'planq',status:'live',network_type:'mainnet',website:'https://planq.network/',pretty_name:'Planq',chain_id:'planq_7070-2',bech32_prefix:'plq',node_home:'$HOME/.planqd',daemon_name:'planqd',key_algos:['ethsecp256k1'],slip44:60,fees:{fee_tokens:[{denom:'aplanq',fixed_min_gas_price:20000000000,low_gas_price:20000000000,average_gas_price:25000000000,high_gas_price:40000000000}]},staking:{staking_tokens:[{denom:'aplanq'}]},codebase:{git_repo:'https://github.com/planq-network/planq',recommended_version:'v1.0.0',compatible_versions:['v1.0.0'],binaries:{'linux/amd64':'https://github.com/planq-network/planq/releases/download/v1.0.0/planq_v1.0.0-next_Linux_x86_64.tar.gz','linux/arm64':'https://github.com/planq-network/planq/releases/download/v1.0.0/planq_v1.0.0-next_Linux_arm64.tar.gz','darwin/amd64':'https://github.com/planq-network/planq/releases/download/v1.0.0/planq_v1.0.0-next_Darwin_x86_64.tar.gz','darwin/arm64':'https://github.com/planq-network/planq/releases/download/v1.0.0/planq_v1.0.0-next_Darwin_arm64.tar.gz','windows/amd64':'https://github.com/planq-network/planq/releases/download/v1.0.0/planq_v1.0.0-next_Windows_x86_64.zip'},genesis:{genesis_url:'https://raw.githubusercontent.com/planq-network/networks/main/mainnet/genesis.json'}},peers:{seeds:[{id:'dd2f0ceaa0b21491ecae17413b242d69916550ae',address:'135.125.247.70:26656',provider:'Planq Foundation EU'},{id:'0525de7e7640008d2a2e01d1a7f6456f28f3324c',address:'51.79.142.6:26656',provider:'Planq Foundation SG'},{id:'21432722b67540f6b366806dff295849738d7865',address:'139.99.223.241:26656',provider:'Planq Foundation AU'}],persistent_peers:[{id:'dd2f0ceaa0b21491ecae17413b242d69916550ae',address:'135.125.247.70:26656',provider:'Planq Foundation EU'}]},apis:{rpc:[{address:'https://rpc.planq.network',provider:'planq.network'},{address:'https://rpc.planq.nodestake.top',provider:'NodeStake'},{address:'https://rpc-planq.comunitynode.my.id',provider:'ComunityNode'}],rest:[{address:'https://rest.planq.network',provider:'planq.network'},{address:'https://api.planq.nodestake.top',provider:'NodeStake'},{address:'https://api-planq.comunitynode.my.id',provider:'ComunityNode'}],grpc:[{address:'https://grpc.planq.network',provider:'planq.network'},{address:'https://grpc.planq.nodestake.top',provider:'NodeStake'}],'evm-http-jsonrpc':[{address:'https://evm-rpc.planq.network',provider:'planq.network'},{address:'https://jsonrpc.planq.nodestake.top',provider:'NodeStake'}]},explorers:[{kind:'bigdipper',url:'https://explorer.planq.network',tx_page:'https://explorer.planq.network/transactions/${txHash}'},{kind:'blockscout',url:'https://evm.planq.network',tx_page:'https://evm.planq.network/tx/${txHash}'},{kind:'NodeStake Explorer',url:'https://explorer.nodestake.top/planq',tx_page:'https://explorer.nodestake.top/planq/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'point',status:'live',network_type:'mainnet',pretty_name:'Point Network',chain_id:'point_10687-1',bech32_prefix:'point',node_home:'$HOME/.pointd',daemon_name:'pointd',slip44:60,fees:{fee_tokens:[{denom:'apoint',low_gas_price:5000000000,average_gas_price:25000000000,high_gas_price:40000000000}]},staking:{staking_tokens:[{denom:'apoint'}]},codebase:{git_repo:'https://github.com/pointnetwork/point-chain',recommended_version:'v8.0.0',compatible_versions:['v8.0.0'],binaries:{'linux/amd64':'','linux/arm64':'','darwin/amd64':'','darwin/arm64':'','windows/amd64':''},genesis:{genesis_url:'https://raw.githubusercontent.com/pointnetwork/point-chain-config/main/mainnet-1/genesis.json'}},peers:{seeds:[{id:'8673c1f04c29c464189e8bf29e51fb0b38da2f19',address:'rpc-mainnet-1.point.space:26656',provider:'Point Network'}],persistent_peers:[{id:'8673c1f04c29c464189e8bf29e51fb0b38da2f19',address:'rpc-mainnet-1.point.space:26656',provider:'Point Network'}]},apis:{rpc:[{address:'https://rpc-mainnet-1.point.space:26657',provider:'Point Network'},{address:'https://rpc.point.nodestake.top',provider:'NodeStake'}],rest:[{address:'https://rpc-mainnet-1.point.space:1317',provider:'Point Network'},{address:'https://api.point.nodestake.top',provider:'NodeStake'}],grpc:[{address:'https://rpc-mainnet-1.point.space:9090',provider:'Point Network'},{address:'https://grpc.point.nodestake.top',provider:'NodeStake'}],'evm-http-jsonrpc':[{address:'https://rpc-mainnet-1.point.space',provider:'Point Network'},{address:'https://jsonrpc.point.nodestake.top',provider:'NodeStake'}]},explorers:[{kind:'blockscout',url:'https://explorer.pointnetwork.io/',tx_page:'https://explorer.pointnetwork.io/tx/${txHash}'},{kind:'ping.pub',url:'https://cosmos.pointnetwork.io/',tx_page:'https://cosmos.pointnetwork.io/point/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'provenance',status:'live',network_type:'mainnet',website:'https://provenance.io/',pretty_name:'Provenance',chain_id:'pio-mainnet-1',bech32_prefix:'pb',daemon_name:'provenanced',node_home:'$HOME/Provenance',key_algos:['secp256k1'],slip44:505,fees:{fee_tokens:[{denom:'nhash',fixed_min_gas_price:1905,low_gas_price:1905,average_gas_price:2100,high_gas_price:2500}]},staking:{staking_tokens:[{denom:'nhash'}]},codebase:{git_repo:'https://github.com/provenance-io/provenance',recommended_version:'v1.8.2',compatible_versions:['v1.7.5','v1.7.6','v1.8.0','v1.8.2'],binaries:{'linux/amd64':'https://github.com/provenance-io/provenance/releases/download/v1.8.2/provenance-linux-amd64-v1.8.2.zip','darwin/amd64':'https://github.com/provenance-io/provenance/releases/download/v1.8.2/provenance-darwin-amd64-v1.8.2.zip'},genesis:{genesis_url:'https://raw.githubusercontent.com/provenance-io/mainnet/main/pio-mainnet-1/genesis.json'}},peers:{seeds:[{id:'4bd2fb0ae5a123f1db325960836004f980ee09b4',address:'seed-0.provenance.io:26656',provider:'figure'},{id:'048b991204d7aac7209229cbe457f622eed96e5d',address:'seed-1.provenance.io:26656',provider:'figure'}]},apis:{rpc:[{address:'https://rpc.provenance.io/',provider:'figure'},{address:'https://rpc-provenance-ia.cosmosia.notional.ventures/',provider:'Notional'}],rest:[{address:'https://api.provenance.io',provider:'figure'},{address:'https://api-provenance-ia.cosmosia.notional.ventures/',provider:'Notional'}],grpc:[{address:'grpc-provenance-ia.cosmosia.notional.ventures:443',provider:'Notional'}]},explorers:[{kind:'provenance',url:'https://explorer.provenance.io',tx_page:'https://explorer.provenance.io/tx/${txHash}'},{kind:'bigdipper',url:'https://bigdipper.provenance.io',tx_page:'https://bigdipper.provenance.io/transactions/${txHash}'},{kind:'hubble',url:'https://hubble.figment.io/provenance/chains/pio-mainnet-1',tx_page:'https://hubble.figment.io/provenance/chains/pio-mainnet-1/${block}/transactions/${txHash}'},{kind:'ping.pub',url:'https://ping.pub/provenance',tx_page:'https://ping.pub/provenance/tx/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/provenance',tx_page:'https://www.mintscan.io/provenance/txs/${txHash}',account_page:'https://www.mintscan.io/provenance/account/${accountAddress}'},{kind:'atomscan',url:'https://atomscan.com/provenance',tx_page:'https://atomscan.com/provenance/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'quicksilver',status:'live',network_type:'mainnet',website:'https://quicksilver.zone/',pretty_name:'Quicksilver',chain_id:'quicksilver-2',daemon_name:'quicksilverd',node_home:'$HOME/.quicksilverd',bech32_prefix:'quick',slip44:118,fees:{fee_tokens:[{denom:'uqck',fixed_min_gas_price:0.0001}]},staking:{staking_tokens:[{denom:'uqck'}]},codebase:{git_repo:'https://github.com/ingenuity-build/quicksilver',recommended_version:'v1.2.0',compatible_versions:['v1.2.0'],cosmos_sdk_version:'0.46',tendermint_version:'0.34',cosmwasm_version:'0.29',cosmwasm_enabled:true,ibc_go_version:'5.2.0',genesis:{genesis_url:'https://github.com/ingenuity-build/mainnet/raw/main/genesis.json'}},peers:{seeds:[{id:'940c0dc153b0e344de6368d101a97fd4d9e69eff',address:'seeds.cros-nest.com:25656',provider:'Cros-Nest'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:11156',provider:'Polkachu'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:11156',provider:'Lavender.Five Nodes 🐝'},{id:'babc3f3f7804933265ec9c40ad94f4da8e9e0017',address:'seed.rhinostake.com:11156',provider:'rhinostake'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'quicksilver.mainnet.seed.autostake.net:27026',provider:'AutoStake 🛡️ Slash Protected'}],persistent_peers:[{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'quicksilver.mainnet.peer.autostake.net:27026',provider:'AutoStake 🛡️ Slash Protected'}]},apis:{rpc:[{address:'https://rpc.quicksilver.zone:443',provider:'Quicksilver'},{address:'https://rpc-quicksilver-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'https://quicksilver-rpc.jambulmerah.dev:443',provider:'JambulMerah'},{address:'https://rpc-quicksilver.d-stake.xyz',provider:'D-Stake'},{address:'https://quicksilver-rpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://m-quicksilver.rpc.utsa.tech',provider:'lesnik | UTSA'},{address:'https://rpc-quicksilver.nodeist.net',provider:'Nodeist'},{address:'https://quicksilver-rpc.ibs.team',provider:'Inter Blockchain Services'}],rest:[{address:'http://lcd.quicksilver.zone:443/',provider:'Quicksilver'},{address:'https://api-quicksilver-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'https://quicksilver-api.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://quicksilver-api.jambulmerah.dev',provider:'JambulMerah'},{address:'https://api-quicksilver.d-stake.xyz',provider:'D-Stake'},{address:'https://m-quicksilver.api.utsa.tech',provider:'lesnik | UTSA'},{address:'https://api-quicksilver.nodeist.net',provider:'Nodeist'},{address:'https://quicksilver.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'},{address:'https://quicksilver-api.ibs.team',provider:'Inter Blockchain Services'}],grpc:[{address:'grpc-quicksilver-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'quicksilver-grpc.jambulmerah.dev:9090',provider:'JambulMerah'},{address:'https://quicksilver-grpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://grpc-quicksilver.d-stake.xyz',provider:'D-Stake'},{address:'https://grpc-quicksilver.nodeist.net',provider:'Nodeist'}]},explorers:[{kind:'mintscan',url:'https://www.mintscan.io/quicksilver',tx_page:'https://www.mintscan.io/quicksilver/txs/${txHash}',account_page:'https://www.mintscan.io/quicksilver/account/${accountAddress}'},{kind:'UTSA explorer',url:'https://exp.utsa.tech/quicksilver',tx_page:'https://exp.utsa.tech/quicksilver/tx/${txHash}'},{kind:'Nodeist Explorer',url:'https://exp.nodeist.net/M-Quicksilver',tx_page:'https://exp.nodeist.net/M-Quicksilver/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'rebus',website:'https://www.rebuschain.com/',status:'live',network_type:'mainnet',pretty_name:'Rebus',chain_id:'reb_1111-1',bech32_prefix:'rebus',daemon_name:'rebusd',node_home:'$HOME/.rebusd',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'arebus',fixed_min_gas_price:0}]},staking:{staking_tokens:[{denom:'arebus'}]},codebase:{git_repo:'https://github.com/rebuschain/rebus.core',recommended_version:'v0.2.3',compatible_versions:['v0.2.0'],versions:[{name:'v0.1.2',tag:'v0.1.2',height:0,next_version_name:'v0.2.3'},{name:'v0.2.3',tag:'v0.2.3',height:473400}],genesis:{genesis_url:'https://github.com/rebuschain/rebus.mainnet/raw/master/reb_1111-1/genesis.zip'}},peers:{seeds:[{id:'f339d2999792b360797d4e22dfd40c0ea4b7402e',address:'51.68.173.153:26656'},{id:'718706d1a1e93c2fe9a3059588236cf96c457ff4',address:'seed.rebus.cros-nest.com:26656'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:17256',provider:'Lavender.Five Nodes 🐝'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'rebus.mainnet.seed.autostake.net:26906',provider:'AutoStake 🛡️ Slash Protected'},{id:'f97a75fb69d3a5fe893dca7c8d238ccc0bd66a8f',address:'rebus-seed.p2p.brocha.in:30548',provider:'Brochain'},{id:'400f3d9e30b69e78a7fb891f60d76fa3c73f0ecc',address:'rebus.rpc.kjnodes.com:21659',provider:'kjnodes'}],persistent_peers:[{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'rebus.mainnet.peer.autostake.net:26906',provider:'AutoStake 🛡️ Slash Protected'}]},apis:{rpc:[{address:'https://api.rebuschain.com:26657/',provider:'Rebuschain'},{address:'https://rebus.rpc.manticore.team:443/',provider:'MantiCore'},{address:'https://rpc.rebus.nodestake.top/',provider:'NodeStake'},{address:'https://rpc-1.rebus.nodes.guru',provider:'Nodes.Guru'},{address:'https://api.mainnet.rebus.money:26657',provider:'Rebuschain'},{address:'https://rpc-rebus.nodeist.net',provider:'Nodeist'},{address:'https://rpc-rebus.d-stake.xyz',provider:'D-stake'},{address:'https://rebus-rpc.brocha.in',provider:'Brochain'},{address:'https://rebus.nodejumper.io',provider:'Nodejumper 🚀'},{address:'https://rebus.rpc.kjnodes.com',provider:'kjnodes'},{address:'https://rpc.rebus.bh.rocks',provider:'BlockHunters 🎯'},{address:'https://rebus-rpc.kleomedes.network',provider:'Kleomedes'},{address:'https://rpc-rebus.huginn.tech',provider:'Huginn'},{address:'https://rpc.rebus.rektdao.club',provider:'rektDAO'}],rest:[{address:'https://api.rebuschain.com:1317/',provider:'Rebuschain'},{address:'https://rebus.api.manticore.team:443/',provider:'MantiCore'},{address:'https://api.rebus.nodestake.top/',provider:'NodeStake'},{address:'https://api-1.rebus.nodes.guru',provider:'Nodes.Guru'},{address:'https://api.mainnet.rebus.money:1317',provider:'Rebuschain'},{address:'https://api-rebus.nodeist.net',provider:'Nodeist'},{address:'https://api-rebus.d-stake.xyz',provider:'D-stake'},{address:'https://rebus-rest.brocha.in',provider:'Brochain'},{address:'https://rebus.nodejumper.io:1317',provider:'Nodejumper 🚀'},{address:'https://rebus.api.kjnodes.com',provider:'kjnodes'},{address:'https://api.rebus.bh.rocks',provider:'BlockHunters 🎯'},{address:'https://rebus-api.kleomedes.network',provider:'Kleomedes'},{address:'https://api.rebus.huginn.tech',provider:'Huginn'},{address:'https://api.rebus.rektdao.club',provider:'rektDAO'},{address:'https://rebus.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'}],grpc:[{address:'https://rebus.grpc.manticore.team:443/',provider:'MantiCore'},{address:'https://grpc.rebus.nodestake.top/',provider:'NodeStake'},{address:'https://grpc-rebus.nodeist.net',provider:'Nodeist'},{address:'https://grpc-rebus.d-stake.xyz',provider:'D-stake'},{address:'https://rebus.nodejumper.io:9090',provider:'Nodejumper 🚀'},{address:'https://rebus-grpc.brocha.in',provider:'Brochain'},{address:'https://grpc.rebus.bh.rocks:443',provider:'BlockHunters 🎯'}]},explorers:[{kind:'explorers.guru',url:'https://rebus.explorers.guru',tx_page:'https://rebus.explorers.guru/transaction/${txHash}'},{kind:'NodeStake',url:'https://explorer.nodestake.top/rebus',tx_page:'https://explorer.nodestake.top/rebus/tx/${txHash}'},{kind:'Nodeist Explorer',url:'https://exp.nodeist.net/M-Rebus',tx_page:'https://exp.nodeist.net/M-Rebus/tx/${txHash}'},{kind:'Brochain',url:'https://explorer.brocha.in/rebus',tx_page:'https://explorer.brocha.in/rebus/tx/${txHash}'},{kind:'tcnetwork',url:'https://rebus.tcnetwork.io',tx_page:'https://rebus.tcnetwork.io/transaction/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'regen',status:'live',network_type:'mainnet',website:'https://www.regen.network/',pretty_name:'Regen',chain_id:'regen-1',bech32_prefix:'regen',daemon_name:'regen',node_home:'$HOME/.regen',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'uregen'}]},staking:{staking_tokens:[{denom:'uregen'}]},codebase:{git_repo:'https://github.com/regen-network/regen-ledger',recommended_version:'v4.0.0',compatible_versions:['v4.0.0'],binaries:{'linux/amd64':'https://github.com/regen-network/regen-ledger/releases/download/v4.0.0/regen-ledger_4.0.0_linux_amd64.zip','linux/arm64':'https://github.com/regen-network/regen-ledger/releases/download/v4.0.0/regen-ledger_4.0.0_linux_arm64.zip','darwin/amd64':'https://github.com/regen-network/regen-ledger/releases/download/v4.0.0/regen-ledger_4.0.0_darwin_amd64.zip','darwin/arm64':'https://github.com/regen-network/regen-ledger/releases/download/v4.0.0/regen-ledger_4.0.0_darwin_arm64.zip','windows/amd64':'https://github.com/regen-network/regen-ledger/releases/download/v4.0.0/regen-ledger_4.0.0_windows_amd64.zip'},cosmos_sdk_version:'0.45',tendermint_version:'0.34',genesis:{genesis_url:'https://raw.githubusercontent.com/regen-network/mainnet/main/regen-1/genesis.json'}},peers:{seeds:[{id:'aebb8431609cb126a977592446f5de252d8b7fa1',address:'104.236.201.138:26656'},{id:'d309774e794b111a0fa2056f40aed9d488b6195e',address:'regen-seed.sunshinevalidation.io:32064',provider:'sunshine-validation'}],persistent_peers:[{id:'69975e7afdf731a165e40449fcffc75167a084fc',address:'104.131.169.70:26656'},{id:'d35d652b6cb3bf7d6cb8d4bd7c036ea03e7be2ab',address:'116.203.182.185:26656'},{id:'ffacd3202ded6945fed12fa4fd715b1874985b8c',address:'3.98.38.91:26656'}]},apis:{rpc:[{address:'https://rpc-regen.ecostake.com',provider:'ecostake'},{address:'http://public-rpc.regen.vitwit.com:26657',provider:'vitwit'},{address:'https://regen.stakesystems.io:2053',provider:'stakesystems'},{address:'http://rpc.regen.forbole.com:80',provider:'forbole'},{address:'https://rpc-regen-ia.cosmosia.notional.ventures/',provider:'Notional'}],grpc:[{address:'regen.stakesystems.io:2083',provider:'stakesystems'},{address:'grpc-regen-ia.cosmosia.notional.ventures:443',provider:'Notional'}],rest:[{address:'https://rest-regen.ecostake.com',provider:'ecostake'},{address:'http://public-rpc.regen.vitwit.com:1317',provider:'vitwit'},{address:'https://regen.stakesystems.io',provider:'stakesystems'},{address:'https://api-regen-ia.cosmosia.notional.ventures/',provider:'Notional'}]},explorers:[{kind:'mintscan',url:'https://www.mintscan.io/regen',tx_page:'https://www.mintscan.io/regen/txs/${txHash}',account_page:'https://www.mintscan.io/regen/account/${accountAddress}'},{kind:'ping.pub',url:'https://ping.pub/regen',tx_page:'https://ping.pub/regen/tx/${txHash}'},{kind:'bigdipper',url:'https://regen.bigdipper.live/',tx_page:'https://regen.bigdipper.live/transactions/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/regen-network',tx_page:'https://atomscan.com/regen-network/transactions/${txHash}'}],logo_URIs:{png:'https://raw.githubusercontent.com/cosmos/chain-registry/master/regen/images/regen.png'}},{$schema:'../chain.schema.json',chain_name:'rizon',status:'live',network_type:'mainnet',website:'https://rizon.world/',pretty_name:'Rizon',chain_id:'titan-1',bech32_prefix:'rizon',daemon_name:'rizond',node_home:'$HOME/.rizon',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'uatolo',low_gas_price:0.025,average_gas_price:0.025,high_gas_price:0.035}]},staking:{staking_tokens:[{denom:'uatolo'}]},codebase:{git_repo:'https://github.com/rizon-world/rizon',recommended_version:'v0.4.1',compatible_versions:['v0.4.1'],genesis:{genesis_url:'https://raw.githubusercontent.com/rizon-world/mainnet/master/genesis.json'}},peers:{seeds:[{id:'83c9cdc2db2b4eff4acc9cd7d664ad5ae6191080',address:'seed-1.mainnet.rizon.world:26656'},{id:'ae1476777536e2be26507c4fbcf86b67540adb64',address:'seed-2.mainnet.rizon.world:26656'},{id:'8abf316257a264dc8744dee6be4981cfbbcaf4e4',address:'seed-3.mainnet.rizon.world:26656'}]},apis:{rpc:[{address:'http://seed-1.mainnet.rizon.world:26657',provider:'HDAC Technology AG'},{address:'https://rpcapi.rizon.world/',provider:'HDAC Technology AG'},{address:'https://rpc.rizon.chaintools.tech/',provider:'ChainTools'},{address:'https://rizon-rpc.ibs.team/',provider:'Inter Blockchain Services'},{address:'https://rizon.nodejumper.io',provider:'Nodejumper 🚀'}],rest:[{address:'http://seed-1.mainnet.rizon.world:1317',provider:'HDAC Technology AG'},{address:'https://restapi.rizon.world/',provider:'HDAC Technology AG'},{address:'https://api.rizon.chaintools.tech/',provider:'ChainTools'},{address:'https://rizon-api.ibs.team/',provider:'Inter Blockchain Services'},{address:'https://rizon.nodejumper.io:1317',provider:'Nodejumper 🚀'}],grpc:[{address:'https://rizon.nodejumper.io:9090',provider:'Nodejumper 🚀'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/rizon',tx_page:'https://ezstaking.tools/rizon/txs/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/rizon',tx_page:'https://www.mintscan.io/rizon/txs/${txHash}',account_page:'https://www.mintscan.io/rizon/account/${accountAddress}'},{kind:'ping.pub',url:'https://ping.pub/rizon',tx_page:'https://ping.pub/rizon/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/rizon',tx_page:'https://atomscan.com/rizon/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'secretnetwork',status:'live',network_type:'mainnet',website:'https://scrt.network/',pretty_name:'Secret Network',chain_id:'secret-4',bech32_prefix:'secret',daemon_name:'secretd',node_home:'$HOME/.secretd',key_algos:['secp256k1'],slip44:529,fees:{fee_tokens:[{denom:'uscrt',fixed_min_gas_price:0.00125}]},staking:{staking_tokens:[{denom:'uscrt'}]},codebase:{git_repo:'https://github.com/scrtlabs/SecretNetwork',recommended_version:'v1.6',binaries:{'linux/amd64':'https://github.com/scrtlabs/SecretNetwork/releases/download/v1.6/secretnetwork_1.6_mainnet_goleveldb_amd64.deb'},compatible_versions:['v1.5'],genesis:{genesis_url:'https://github.com/scrtlabs/SecretNetwork/releases/download/v1.2.0/genesis.json'},versions:[{name:'v1.2',tag:'v1.2',height:0,next_version_name:'v1.3'},{name:'v1.3',tag:'v1.3',height:3343000,next_version_name:'v1.4'},{name:'v1.4',tag:'v1.4',height:5309200,next_version_name:'v1.5'},{name:'v1.5',tag:'v1.5',height:5941700,next_version_name:'v1.6'},{name:'v1.6',tag:'v1.6',height:6537300,next_version_name:'v1.7'}]},peers:{seeds:[{id:'6fb7169f7630da9468bf7cc0bcbbed1eb9ed0d7b',address:'scrt-seed-01.scrtlabs.com:26656',provider:'SCRT Labs'},{id:'ab6394e953e0b570bb1deeb5a8b387aa0dc6188a',address:'scrt-seed-02.scrtlabs.com:26656',provider:'SCRT Labs'},{id:'9cdaa5856e0245ecd73bd464308fb990fbc53b57',address:'scrt-seed-03.scrtlabs.com:26656',provider:'SCRT Labs'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:17156',provider:'Lavender.Five Nodes 🐝'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'secret.mainnet.seed.autostake.net:26656',provider:'AutoStake 🛡️ Slash Protected'},{id:'d6a6edd7d3d04b59955e135e2d27b7dcc285ead7',address:'seeds.whispernode.com:17156',provider:'WhisperNode🤐'}],persistent_peers:[{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'secret.mainnet.peer.autostake.net:26656',provider:'AutoStake 🛡️ Slash Protected'}]},apis:{rpc:[{address:'https://rpc.scrt.network',provider:'SCRT Network'},{address:'https://secret-4.api.trivium.network:26657',provider:'Trivium | Trivium.Network'},{address:'https://scrt-rpc.blockpane.com',provider:'[ block pane ]'},{address:'https://secret-rpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://secret.rpc.consensus.one',provider:'Consensus One'},{address:'https://rpc.secret.forbole.com/',provider:'Forbole'},{address:'https://secretnetwork-rpc.stakely.io',provider:'Stakely.io'},{address:'https://rpc-secret.whispernode.com',provider:'WhisperNode🤐'},{address:'https://scrt-rpc.agoranodes.com',provider:'AgoraNodes'}],rest:[{address:'https://api.scrt.network',provider:'SCRT Network'},{address:'https://secret-4.api.trivium.network:1317',provider:'Trivium | Trivium.Network'},{address:'https://secret-api.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://scrt-lcd.blockpane.com',provider:'[ block pane ]'},{address:'https://secret.api.consensus.one',provider:'Consensus One'},{address:'https://api.secret.forbole.com/',provider:'Forbole'},{address:'https://secretnetwork-lcd.stakely.io',provider:'Stakely.io'},{address:'https://secret.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'},{address:'https://lcd-secret.whispernode.com',provider:'WhisperNode🤐'},{address:'https://scrt-lcd.agoranodes.com',provider:'AgoraNodes'}],'grpc-web':[{address:'https://secret-4.api.trivium.network:9091',provider:'Trivium | Trivium.Network'},{address:'http://scrt-rpc.blockpane.com:9091',provider:'[ block pane ]'}],grpc:[{address:'https://secret-grpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://scrt-grpc.agoranodes.com',provider:'AgoraNodes'}],wss:[{address:'wss://scrt-rpc.agoranodes.com',provider:'AgoraNodes'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/secretnetwork',tx_page:'https://ezstaking.tools/secretnetwork/txs/${txHash}'},{kind:'secret nodes',url:'https://secretnodes.com/secret/chains/secret-4',tx_page:'https://secretnodes.com/secret/chains/secret-4/transactions/${txHash}'},{kind:'ping.pub',url:'https://ping.pub/secret',tx_page:'https://ping.pub/secret/tx/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/secret',tx_page:'https://www.mintscan.io/secret/txs/${txHash}',account_page:'https://www.mintscan.io/secret/account/${accountAddress}'},{kind:'atomscan',url:'https://atomscan.com/secret-network',tx_page:'https://atomscan.com/secret-network/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'sentinel',status:'live',network_type:'mainnet',website:'https://sentinel.co/',pretty_name:'Sentinel',chain_id:'sentinelhub-2',bech32_prefix:'sent',daemon_name:'sentinelhub',node_home:'$HOME/.sentinelhub',slip44:118,key_algos:['secp256k1'],fees:{fee_tokens:[{denom:'udvpn'}]},staking:{staking_tokens:[{denom:'udvpn'}]},codebase:{git_repo:'https://github.com/sentinel-official/hub',recommended_version:'v0.6.2',compatible_versions:['v0.6.2'],genesis:{genesis_url:'https://raw.githubusercontent.com/sentinel-official/networks/main/sentinelhub-2/genesis.zip'}},peers:{seeds:[{id:'c3aa0ff9b3eb17be1b0a26d7c8a5683e8e528e1a',address:'159.89.192.105:26656'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'sentinel.mainnet.seed.autostake.net:26706',provider:'AutoStake 🛡️ Slash Protected'},{id:'1a409560619766355f818ef2e42c935453782635',address:'seeds.whispernode.com:17256',provider:'WhisperNode🤐'}],persistent_peers:[{id:'05fe2a7847fd27345250915fd06752c424f40651',address:'85.222.234.135:26656'},{id:'387027e3b1180d3a619cbbf3462704a490785963',address:'54.176.90.228:26656'},{id:'63bd9cfce0f0d274aad5b166dd06d829021aec43',address:'121.78.247.243:56656'},{id:'855807cc6a919c22ec943050ebb5c80b23724ed0',address:'3.239.11.246:26656'},{id:'8caefbf8f4318ecc93f2c901cf11470e4a16c818',address:'161.97.135.122:26656'},{id:'9174af5f16f74660cccf49f893d243949af45f7f',address:'54.177.29.46:26656'},{id:'9fa528bd2b9e7c80724a1d8a4e1a2a8a83e7d123',address:'142.93.72.221:26656'},{id:'a77f6a094578dad899e2f40e0626b4c6d4705311',address:'3.36.165.232:26656'},{id:'bd45a11390d16d128a9eeea3935b53d7a1a3c120',address:'15.236.127.69:26656'},{id:'cdb8dd7628460a546ce1594ca0bc0c20366514cf',address:'34.72.64.178:26656'},{id:'d1efceccb04ded9a604e5235f76da86872157d68',address:'161.97.149.223:26656'},{id:'e00b23444cc8dbb353d5faa765ab36cfc0116b57',address:'83.60.98.134:28685'},{id:'e5ee89bd4fc371c6a0e66d2b8daefd891b6b87b5',address:'157.90.117.58:26656'},{id:'f7ceb735606f90df7eb6cd987641876955b6e325',address:'46.4.55.150:36656'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'sentinel.mainnet.peer.autostake.net:26706',provider:'AutoStake 🛡️ Slash Protected'}]},apis:{rpc:[{address:'https://rpc-sentinel-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://rpc-sentinel.keplr.app',provider:'chainapsis'},{address:'https://rpc-sentinel.whispernode.com',provider:'WhisperNode🤐'},{address:'https://rpc.sentinel1.badgerbite.xyz',provider:'BadgerBite'},{address:'https://rpc.sentinel.chaintools.tech/',provider:'ChainTools'},{address:'https://rpc.sentinel.freak12techno.io/',provider:'freak12techno'}],rest:[{address:'https://api-sentinel-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://lcd-sentinel.keplr.app',provider:'chainapsis'},{address:'https://lcd-sentinel.whispernode.com',provider:'WhisperNode🤐'},{address:'https://api.sentinel.chaintools.tech/',provider:'ChainTools'},{address:'https://api.sentinel.freak12techno.io/',provider:'freak12techno'},{address:'https://sentinel.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'}],grpc:[{address:'grpc-sentinel-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'https://sentinel.grpcui.chaintools.host/',provider:'ChainTools'}]},explorers:[{kind:'mintscan',url:'https://www.mintscan.io/sentinel',tx_page:'https://www.mintscan.io/sentinel/txs/${txHash}',account_page:'https://www.mintscan.io/sentinel/account/${accountAddress}'}]},{$schema:'../chain.schema.json',chain_name:'shareledger',status:'live',network_type:'mainnet',website:'https://www.sharering.network/',pretty_name:'Shareledger',chain_id:'ShareRing-VoyagerNet',bech32_prefix:'shareledger',daemon_name:'shareledger',node_home:'$HOME/.shareledger',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'nshr',fixed_min_gas_price:0,low_gas_price:2000,average_gas_price:3000,high_gas_price:4000}]},staking:{staking_tokens:[{denom:'nshr'}]},codebase:{git_repo:'https://github.com/ShareRing/Shareledger/',recommended_version:'1.4.1',compatible_versions:['1.4.1'],binaries:{'linux/amd64':'https://github.com/ShareRing/Shareledger/releases/download/v1.4.1/shareledger'},cosmos_sdk_version:'0.45',tendermint_version:'0.34',cosmwasm_version:'0.27',cosmwasm_enabled:true,ibc_go_version:'3.0.0',ics_enabled:['ics20-1'],genesis:{name:'v1',genesis_url:'https://github.com/ShareRing/Shareledger/releases/download/v1.2.0/genesis.json'},versions:[{name:'v1',tag:'v1.2.0',height:4382920,next_version_name:'v2'},{name:'v2',tag:'v1.3.0',height:6905000,next_version_name:'v3'},{name:'v3',tag:'v1.4.0',height:7325550,next_version_name:'v4'},{name:'v4',tag:'v1.4.1',height:7507600,next_version_name:'v5'}]},peers:{seeds:[{id:'1877cddbd4f1e5c6d1d33106667a69ec31eeb281',address:'192.168.194.50:26656'},{id:'f42ed8ada782a66d89d4f12784990b562f78376a',address:'192.168.194.75:26656'},{id:'6f9ac0fd8f3341fe2342c378d8d31b1291db1661',address:'192.168.194.22:26656'},{id:'02d3c76619687479d3d038d96fe36a472bd834f9',address:'192.168.194.64:26656'},{id:'b916ca079551cc638149123a1621f98b113090e7',address:'192.168.194.230:26656'},{id:'f3018717656d99d66d5a38b62fee2d5cb1663fbf',address:'192.168.194.232:26656'},{id:'183748b5ff4c2e8fa7a832ac5ffe2e662b7052f1',address:'192.168.194.231:26656'},{id:'d15a915ebe511516a7b3fe324b9efd12af0d5550',address:'192.168.194.185:26656'},{id:'45bece57c460890aac44ee6e70c3f745fe019dc6',address:'192.168.194.136:26656'},{id:'717741f841dd22370b772a05ab26362b07b4f16c',address:'192.168.194.101:26656'},{id:'1b0a92dc461a5c5a3e6294c22e17fc30da08c16a',address:'192.168.194.53:26656'},{id:'69fd2d16de0c0b07a4be36838d7678c6734ace8c',address:'192.168.194.109:26656'}]},apis:{rpc:[{address:'https://rpc.explorer.shareri.ng',provider:'ShareRing'}],rest:[{address:'https://lcd.explorer.shareri.ng/',provider:'ShareRing'}],grpc:[{address:'https://rpc.explorer.shareri.ng',provider:'ShareRing'}]},explorers:[{kind:'big dipper',url:'https://explorer.shareri.ng',tx_page:'https://explorer.shareri.ng/transactions/${txHash}',account_page:'https://explorer.shareri.ng/accounts/${accountAddress}'}],logo_URIs:{png:'https://raw.githubusercontent.com/cosmos/chain-registry/master/shareledger/images/chain-logo.png'},keywords:['id']},{$schema:'../chain.schema.json',chain_name:'shentu',status:'live',network_type:'mainnet',website:'https://www.shentu.technology/',pretty_name:'Shentu',chain_id:'shentu-2.2',bech32_prefix:'certik',daemon_name:'certik',node_home:'$HOME/.certik',key_algos:['secp256k1'],slip44:118,codebase:{git_repo:'https://github.com/ShentuChain/shentu',recommended_version:'v2.4.0',compatible_versions:['v2.4.0'],binaries:{'linux/amd64':'https://github.com/ShentuChain/shentu/releases/download/v2.4.0/certik_2.4.0.linux_amd64','darwin/amd64':'https://github.com/ShentuChain/shentu/releases/download/v2.4.0/certik_2.4.0_arm64_macos','windows/amd64':'https://github.com/ShentuChain/shentu/releases/download/v2.4.0/certik_2.4.0_win_x86_64.exe'},genesis:{genesis_url:'https://raw.githubusercontent.com/ShentuChain/mainnet/main/shentu-2.2/genesis.json'}},peers:{seeds:[{id:'3fddc0e55801f89f27a1644116e9ddb16a951e80',address:'3.80.87.219:26656',provider:'Shentu'},{id:'4814cb067fe0aef705c4d304f0caa2362b7c4246',address:'54.167.122.47:26656',provider:'Shentu'},{id:'f42be55f76b7d3425f493e54d043e65bfc6f43cb',address:'54.227.66.150:26656',provider:'Shentu'},{id:'6efbe63017c90cb3e52ae78ba1014ec66516d08c',address:'seed-shentu.starsquid.io:15604',provider:'Starsquid'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:14056',provider:'Polkachu'},{id:'3edd4e16b791218b623f883d04f8aa5c3ff2cca6',address:'shentu-seed.panthea.eu:36656',provider:'Panthea EU'}],persistent_peers:[{id:'3fddc0e55801f89f27a1644116e9ddb16a951e80',address:'3.80.87.219:26656',provider:'Shentu'},{id:'4814cb067fe0aef705c4d304f0caa2362b7c4246',address:'54.167.122.47:26656',provider:'Shentu'},{id:'f42be55f76b7d3425f493e54d043e65bfc6f43cb',address:'54.227.66.150:26656',provider:'Shentu'},{id:'207c47bed435e4174844064ef3f51ca35b059de2',address:'shentu-peer.panthea.eu:26656',provider:'Panthea EU'}]},apis:{rpc:[{address:'https://shenturpc.noopsbycertik.com/',provider:'Shentu'},{address:'https://shentu-rpc.panthea.eu',provider:'Panthea EU'},{address:'https://certik-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc-shentu.starsquid.io',provider:'Starsquid'}],rest:[{address:'https://chainfull.noopsbycertik.com/',provider:'Shentu'},{address:'https://shentu-api.panthea.eu',provider:'Panthea EU'},{address:'https://certik-api.polkachu.com',provider:'Polkachu'},{address:'https://api-shentu.starsquid.io',provider:'Starsquid'}],grpc:[{address:'certik-grpc.polkachu.com:14090',provider:'Polkachu'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/shentu',tx_page:'https://ezstaking.tools/shentu/txs/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/shentu',tx_page:'https://www.mintscan.io/shentu/txs/${txHash}',account_page:'https://www.mintscan.io/shentu/account/${accountAddress}'},{kind:'Shentu Explorer',url:'https://explorer.shentu.technology/?net=shentu-2.2',tx_page:'https://explorer.shentu.technology/transactions/${txHash}?net=shentu-2.2'},{kind:'ping.pub',url:'https://ping.pub/shentu',tx_page:'https://ping.pub/shentu/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/certik',tx_page:'https://atomscan.com/certik/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'sifchain',status:'live',network_type:'mainnet',website:'https://sifchain.finance/',pretty_name:'Sifchain',chain_id:'sifchain-1',bech32_prefix:'sif',daemon_name:'sifnoded',node_home:'$HOME/.sifnoded',codebase:{git_repo:'https://github.com/Sifchain/sifnode.git',recommended_version:'v1.0.14-beta',compatible_versions:['v1.0.14-beta'],binaries:{'linux/amd64':'https://github.com/Sifchain/sifnode/releases/download/v1.0.14-beta/sifnoded-v1.0.14-beta-linux-amd64.zip'},genesis:{genesis_url:'https://github.com/Sifchain/networks/blob/master/betanet/sifchain-1/genesis.json.gz?raw=true'}},peers:{seeds:[{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'sifchain.mainnet.seed.autostake.net:26686',provider:'AutoStake 🛡️ Slash Protected'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:13256',provider:'Polkachu'}],persistent_peers:[{id:'0d4981bdaf4d5d73bad00af3b1fa9d699e4d3bc0',address:'44.235.108.41:26656'},{id:'bcc2d07a14a8a0b3aa202e9ac106dec0bef91fda',address:'13.55.247.60:26656'},{id:'663dec65b754aceef5fcccb864048305208e7eb2',address:'34.248.110.88:26656'},{id:'0120f0a48e7e81cc98829ef4f5b39480f11ecd5a',address:'52.76.185.17:26656'},{id:'6535497f0152293d773108774a705b86c2249a9c',address:'44.238.121.65:26656'},{id:'fdf5cffc2b20a20fab954d3b6785e9c382762d14',address:'34.255.133.248:26656'},{id:'8c240f71f9e060277ce18dc09d82d3bbb05d1972',address:'13.211.43.177:26656'},{id:'9fbcb6bd5a7f20a716564157c4f6296d2faf5f64',address:'18.138.208.95:26656'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'sifchain.mainnet.peer.autostake.net:26686',provider:'AutoStake 🛡️ Slash Protected'}]},apis:{rpc:[{address:'https://rpc.sifchain.finance:443'},{address:'https://rpc-archive.sifchain.finance:443'},{address:'https://sifchain.rpc.consensus.one:443',provider:'Consensus One'},{address:'https://sifchain-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc-sifchain-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://rpc.sifchain.chaintools.tech/',provider:'ChainTools'},{address:'https://sif-rpc.kleomedes.network',provider:'Kleomedes'},{address:'https://rpc.sifchain.posthuman.digital',provider:'POSTHUMAN ꝏ DVS'},{address:'https://sifchain.nodejumper.io',provider:'Nodejumper 🚀'}],grpc:[{address:'https://grpc.sifchain.finance:443'},{address:'grpc-sifchain-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'sifchain-grpc.polkachu.com:13290',provider:'Polkachu'},{address:'https://grpc.sifchain.posthuman.digital:443',provider:'POSTHUMAN ꝏ DVS'},{address:'https://sifchain.nodejumper.io:9090',provider:'Nodejumper 🚀'}],rest:[{address:'https://api.sifchain.finance:443'},{address:'https://sifchain.api.consensus.one:443',provider:'Consensus One'},{address:'https://api-sifchain-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://api.sifchain.chaintools.tech/',provider:'ChainTools'},{address:'https://sifchain-api.polkachu.com',provider:'Polkachu'},{address:'https://sif-api.kleomedes.network',provider:'Kleomedes'},{address:'https://lcd.sifchain.posthuman.digital',provider:'POSTHUMAN ꝏ DVS'},{address:'https://sifchain.nodejumper.io:1317',provider:'Nodejumper 🚀'},{address:'https://sifchain.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/sifchain',tx_page:'https://ezstaking.tools/sifchain/txs/${txHash}'},{kind:'ping.pub',url:'https://ping.pub/sifchain',tx_page:'https://ping.pub/sifchain/tx/${txHash}'},{kind:'explorers.guru',url:'https://sifchain.explorers.guru',tx_page:'https://sifchain.explorers.guru/transaction/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/sifchain',tx_page:'https://www.mintscan.io/sifchain/txs/${txHash}',account_page:'https://www.mintscan.io/sifchain/account/${accountAddress}'},{kind:'atomscan',url:'https://atomscan.com/sifchain',tx_page:'https://atomscan.com/sifchain/transactions/${txHash}'}],slip44:118},{$schema:'../chain.schema.json',chain_name:'sommelier',status:'live',network_type:'mainnet',website:'https://sommelier.finance/',pretty_name:'Sommelier',chain_id:'sommelier-3',bech32_prefix:'somm',daemon_name:'sommelier',node_home:'$HOME/.sommelier',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'usomm'}]},codebase:{git_repo:'https://github.com/PeggyJV/sommelier',recommended_version:'v4.0.2',compatible_versions:['v4.0.2'],binaries:{'linux/amd64':'https://github.com/PeggyJV/sommelier/releases/download/v4.0.2/sommelier_4.0.2_linux_amd64.tar.gz','linux/arm64':'https://github.com/PeggyJV/sommelier/releases/download/v4.0.2/sommelier_4.0.2_linux_arm64.tar.gz','darwin/amd64':'https://github.com/PeggyJV/sommelier/releases/download/v4.0.2/sommelier_4.0.2_darwin_amd64.tar.gz','darwin/arm64':'https://github.com/PeggyJV/sommelier/releases/download/v4.0.2/sommelier_4.0.2_darwin_arm64.tar.gz','windows/amd64':'https://github.com/PeggyJV/sommelier/releases/download/v4.0.2/sommelier_4.0.2_windows_amd64.tar.gz'},genesis:{genesis_url:'https://raw.githubusercontent.com/PeggyJV/sommelier/main/contrib/mainnet/sommelier-2/genesis.json'}},peers:{seeds:[{id:'a96d69179e4b72f728b9dd4dbe40400701515fee',address:'80.64.208.51:26656'},{id:'759a61eade50cb48e2a6f974fab679096d1de916',address:'34.127.107.137:26656'},{id:'14ac13745a563876740b72637ab9a3539542fe2b',address:'35.185.230.0:26656'},{id:'bebf759f5706137168e3a7158e4495865a04cca9',address:'34.83.151.60:26656'},{id:'c94fd60124e3656df54ff965d178e36c760c195d',address:'65.108.57.224:26656'},{id:'65cc609f9ae965323bd03d1b84f7fa340e6b6c7d',address:'51.38.52.210:36656'},{id:'4ed70d91bd645e78a78fe6cd4d1973937bb739e1',address:'51.91.67.48:36656'},{id:'404e6b2176bf74018cfdeb275c21ce264d43c673',address:'54.38.46.179:36656'},{id:'c7334f0462cad3272f7d504f7a293fd2585165ef',address:'35.215.30.79:26656'},{id:'194f89dd1d08a82e99bf76aee535e6d4b3c79354',address:'seeds.pupmos.network:2002',provider:'PUPMØS'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:14156',provider:'Polkachu'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:14156',provider:'Lavender.Five Nodes 🐝'}],persistent_peers:[{id:'e1d1dd22a63b1899ac51c8c96416f77c8ef98231',address:'sommelier.tendermint.cloud:26656',provider:'tendermint'},{id:'6533beebc826f84376e503bbc3265b07b26b9ad5',address:'sommelier.standardcryptovc.com:26656',provider:'standardcrypto'}]},apis:{rpc:[{address:'https://rpc-sommelier.keplr.app',provider:'chainapsis'},{address:'https://sommelier-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc-sommelier.pupmos.network',provider:'PUPMØS'},{address:'https://sommelier-rpc.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://rpc.somm.bh.rocks/',provider:'BlockHunters 🎯'}],rest:[{address:'https://lcd-sommelier.keplr.app',provider:'chainapsis'},{address:'https://api-sommelier.pupmos.network',provider:'PUPMØS'},{address:'https://sommelier-api.polkachu.com',provider:'Polkachu'},{address:'https://sommelier-api.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://api.somm.bh.rocks/',provider:'BlockHunters 🎯'}],grpc:[{address:'35.230.37.28:9090',provider:'strangelove'},{address:'sommelier-grpc.polkachu.com:14190',provider:'Polkachu'},{address:'https://sommelier-grpc.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://grpc.somm.bh.rocks:443/',provider:'BlockHunters 🎯'}]},explorers:[{kind:'sommscan',url:'https://sommscan.io',tx_page:'https://sommscan.io'},{kind:'mintscan',url:'https://www.mintscan.io/sommelier',tx_page:'https://www.mintscan.io/sommelier/txs/${txHash}',account_page:'https://www.mintscan.io/sommelier/account/${accountAddress}'}]},{$schema:'../chain.schema.json',chain_name:'stafihub',chain_id:'stafihub-1',website:'https://stafihub.io/',pretty_name:'StaFi Hub',status:'live',network_type:'mainnet',bech32_prefix:'stafi',daemon_name:'stafihubd',node_home:'$HOME/.stafihub',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'ufis',fixed_min_gas_price:0}]},staking:{staking_tokens:[{denom:'ufis'}]},codebase:{git_repo:'https://github.com/stafihub/stafihub',recommended_version:'v0.2.3',compatible_versions:['v0.2.3'],genesis:{genesis_url:'https://raw.githubusercontent.com/stafihub/network/main/mainnets/stafihub-1(dragonberry)/genesis.json'}},peers:{persistent_peers:[{id:'bed296dfadd972ed07cab82c87a0ee5c182dea43',address:'18.136.189.120:26656'},{id:'045fe6e054a5abe35f5433bd333f0a1b18aa28cf',address:'45.136.28.11:26656'},{id:'d35d55635093fddb6de22295c8fe31de98efe6ef',address:'5.161.120.176:26656'},{id:'20c0b45c47426c51b3187aa5dca82d9900c2fb36',address:'5.161.88.157:26656'},{id:'70230067eb1e668d2566329e727c72c930e54de3',address:'116.202.30.7:26656'},{id:'03f3cb61c7c472044c37aeededde2ffe8884fa02',address:'159.69.108.86:26656'}]},apis:{rpc:[{address:'https://public-rpc1.stafihub.io:443',provider:'StaFiHub'},{address:'https://public-rpc2.stafihub.io:443',provider:'StaFiHub'},{address:'https://rpc.stafihub.nodestake.top:443',provider:'NodeStake'},{address:'https://rpc.stafihub.mcbnode.online:443',provider:'MCBNode'},{address:'https://stafihub.nodejumper.io:443',provider:'Nodejumper 🚀'}],rest:[{address:'https://public-rest-rpc1.stafihub.io',provider:'StaFiHub'},{address:'https://public-rest-rpc2.stafihub.io',provider:'StaFiHub'},{address:'https://api.stafihub.nodestake.top',provider:'NodeStake'},{address:'https://api.stafihub.mcbnode.online',provider:'MCBNode'},{address:'https://stafihub.nodejumper.io:1317',provider:'Nodejumper 🚀'}],grpc:[{address:'https://public-grpc-rpc1.stafihub.io',provider:'StaFiHub'},{address:'https://public-grpc-rpc2.stafihub.io',provider:'StaFiHub'},{address:'https://grpc.stafihub.nodestake.top',provider:'NodeStake'},{address:'https://grpc.stafihub.mcbnode.online',provider:'MCBNode'},{address:'https://stafihub.nodejumper.io:9090',provider:'Nodejumper 🚀'}]},explorers:[{kind:'mintscan',url:'https://www.mintscan.io/stafi',tx_page:'https://www.mintscan.io/stafi/txs/${txHash}'},{kind:'ping-pub',url:'https://ping.pub/stafihub',tx_page:'https://ping.pub/stafihub/tx/${txHash}'}],logo_URIs:{png:'https://raw.githubusercontent.com/cosmos/chain-registry/master/stafihub/images/stafihub-chain-logo.png'},keywords:['liquid staking']},{$schema:'../chain.schema.json',chain_name:'stargaze',status:'live',network_type:'mainnet',website:'https://stargaze.zone/',pretty_name:'Stargaze',chain_id:'stargaze-1',bech32_prefix:'stars',daemon_name:'starsd',node_home:'$HOME/.starsd',slip44:118,codebase:{git_repo:'https://github.com/public-awesome/stargaze',recommended_version:'v8.0.0',compatible_versions:['v8.0.0'],genesis:{genesis_url:'https://raw.githubusercontent.com/public-awesome/mainnet/main/stargaze-1/genesis.tar.gz'}},peers:{seeds:[{id:'70ed826888f102c7c1ceb4d07287956628a53508',address:'174.138.124.7:36656'},{id:'722079345d941cd2da3daedea548c909d9b83ec5',address:'104.248.101.113:36656'},{id:'d5fc4f479c4e212c96dff5704bb2468ea03b8ae3',address:'sg-seed.blockpane.com:26656',provider:'[ block pane ]'},{id:'babc3f3f7804933265ec9c40ad94f4da8e9e0017',address:'seed.rhinostake.com:13756',provider:'RHINO'},{id:'2f7b2d38b1a4f76b20e917e01fb9f4a200bbf80c',address:'seeds.pupmos.network:2004',provider:'PUPMØS'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:13756',provider:'Polkachu'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'stargaze.mainnet.seed.autostake.net:26986',provider:'AutoStake 🛡️ Slash Protected'},{id:'604f4baaa30cd3f50d080bf45806d222c7fadc94',address:'seeds.whispernode.com:13756',provider:'WhisperNode🤐'}],persistent_peers:[{id:'1d73521c565b37a53038fc730bcd207a3db361b6',address:'144.91.91.30:26656',provider:'0xSR'},{id:'524dd60331c56d198deabbb70238c2cc69119cca',address:'161.97.122.216:36656',provider:'Army IDs'},{id:'0c9ebd7b36f96d0279dbf6dc38572f5797c096c1',address:'65.108.42.168:26656',provider:'ramuchi.tech'},{id:'320e4b81ab327dd2593a39de0d3ae718fdb9347c',address:'176.9.168.220:26656',provider:'Staketab'},{id:'b8eeb6d99594c218c0373d8ec4c1e81031b92198',address:'68.183.92.46:26656',provider:'KingSuper'},{id:'387c32677c54dd4627366ffdf8e2dda68e71af69',address:'54.193.168.147:26656',provider:'Cosmostation'},{id:'e28635dc537dce1d6f1cf44b7b335a530d923fa1',address:'15.165.94.246:26656',provider:'Cosmostation'},{id:'413562a502b4a47ec3375bfae6aa01bc47bc6979',address:'204.236.141.188:26656',provider:'Cosmostation'},{id:'ca93b9bed1a98184f36ca31a6cc6dad2e289a2d4',address:'94.130.165.103:26656',provider:'OranG3cluB'},{id:'0c7e82641f81754fc30158587c7e4a30ddb5c967',address:'54.216.187.98:26656',provider:'needlecast'},{id:'1de5e685e687d0df35e6f3734ee04aff956d5c0f',address:'75.119.154.98:26656',provider:'StakeLab'},{id:'6353ff1783e076a70ab444c4229c01ed6df6b477',address:'65.21.193.190:26656',provider:'sashamaxymchuk[MantiCore]'},{id:'5eb7bcdd83b47744b652f11ecd8495a670612643',address:'135.181.176.62:26656',provider:'StakeCraft'},{id:'75ea9c7b04be4a5779853b6e17c773ab092652c8',address:'91.230.111.50:26656',provider:'EmreNOP | BlockSeal'},{id:'9f860496d2a346cc7888d7b4a7887f6bfc0fc0e4',address:'162.55.39.33:26656',provider:'Blackhox'},{id:'f89e655de3e6804e6448de3de3428bea1fd0fa97',address:'135.181.21.55:36656',provider:'Alex (Bambarello) Validator'},{id:'1c8aabb166c7757c26cdbb1bfc380146ca59bc4e',address:'135.181.179.49:26356',provider:'Bloqhub'},{id:'2783a2b3bf3f84947c919588e8b0ca2c05e8053d',address:'167.99.238.45:26656'},{id:'64d19582ff31ac88245ac604dc18d48b41470f48',address:'167.99.238.45:26656'},{id:'c636bf9ad65959b738c15eb5458a89a88cba32a4',address:'135.181.102.205:26656',provider:'tsundokum'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'stargaze.mainnet.peer.autostake.net:26986',provider:'AutoStake 🛡️ Slash Protected'}]},apis:{rpc:[{address:'https://rpc.stargaze-apis.com/',provider:'Stargaze Foundation'},{address:'https://rpc-stargaze.pupmos.network',provider:'PUPMØS'},{address:'https://rpc-stargaze.ezstaking.dev',provider:'EZStaking.io'},{address:'https://rpc.stars.kingnodes.com/',provider:'kingnodes'},{address:'https://stargaze-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc-stargaze-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://stargaze.c29r3.xyz:443/rpc/',provider:'c29r3'},{address:'https://rpc.stargaze.nodestake.top',provider:'NodeStake'},{address:'https://stargaze-rpc.ibs.team',provider:'Inter Blockchain Services'},{address:'https://rpc-stargaze.d-stake.xyz',provider:'D-stake'},{address:'https://rpc.stargaze.silentvalidator.com/',provider:'silent'}],rest:[{address:'https://rest.stargaze-apis.com/',provider:'Stargaze Foundation'},{address:'https://api-stargaze.pupmos.network',provider:'PUPMØS'},{address:'https://api-stargaze.ezstaking.dev',provider:'EZStaking.io'},{address:'https://api.stars.kingnodes.com/',provider:'kingnodes'},{address:'https://api-stargaze-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://stargaze.c29r3.xyz:443/api/',provider:'c29r3'},{address:'https://stargaze-api.polkachu.com',provider:'Polkachu'},{address:'https://api.stargaze.nodestake.top',provider:'NodeStake'},{address:'https://stargaze-api.ibs.team',provider:'Inter Blockchain Services'},{address:'https://api-stargaze.d-stake.xyz',provider:'D-stake'},{address:'https://api.stargaze.silentvalidator.com/',provider:'silent'},{address:'https://stargaze.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'}],grpc:[{address:'grpc-stargaze-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'stargaze-grpc.polkachu.com:13790',provider:'Polkachu'},{address:'https://grpc.stargaze.nodestake.top',provider:'NodeStake'},{address:'https://grpc-stargaze.d-stake.xyz',provider:'D-stake'},{address:'https://grpc.stargaze.silentvalidator.com/',provider:'silent'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/stargaze',tx_page:'https://ezstaking.tools/stargaze/txs/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/stargaze/',tx_page:'https://www.mintscan.io/stargaze/txs/${txHash}',account_page:'https://www.mintscan.io/stargaze/account/${accountAddress}'},{kind:'ping.pub',url:'https://ping.pub/stargaze',tx_page:'https://ping.pub/stargaze/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/stargaze',tx_page:'https://atomscan.com/stargaze/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'starname',status:'live',network_type:'mainnet',website:'https://www.starname.me/',pretty_name:'Starname',chain_id:'iov-mainnet-ibc',bech32_prefix:'star',slip44:234,codebase:{git_repo:'https://github.com/iov-one/starnamed',recommended_version:'v0.10.18',compatible_versions:['v0.10.17','v0.10.18'],genesis:{genesis_url:'https://gist.githubusercontent.com/davepuchyr/6bea7bf369064d118195e9b15ea08a0f/raw/genesis.json'}},peers:{persistent_peers:[{id:'ca133187b37b59d2454812cfcf31b6211395adec',address:'167.99.194.126:16656'},{id:'1c7e014b65f7a3ea2cf48bffce78f5cbcad2a0b7',address:'13.37.85.253:26656'},{id:'8c64a2127cc07d4570756b61f83af60d34258398',address:'13.37.61.32:26656'},{id:'9aabe0ac122f3104d8fc098e19c66714c6f1ace9',address:'3.37.140.5:26656'},{id:'faedef1969911d24bf72c56fc01326eb891fa3b7',address:'63.250.53.45:16656'},{id:'94ac1c02b4e2ca3fb2706c91a68b8030ed3615a1',address:'35.247.175.128:16656'},{id:'be2235996b1c785a9f57eed25fd673ca111f0bae',address:'52.52.89.64:26656'},{id:'f63d15ab7ed55dc75f332d0b0d2b01d529d5cbcd',address:'212.71.247.11:26656'},{id:'f5597a7ed33bc99eb6ba7253eb8ac76af27b4c6d',address:'138.201.20.147:26656'}]},apis:{rpc:[{address:'https://rpc-iov.keplr.app',provider:'chainapsis'},{address:'https://rpc-starname-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://starname.nodejumper.io',provider:'Nodejumper 🚀'}],rest:[{address:'https://lcd-iov.keplr.app',provider:'chainapsis'},{address:'https://api-starname-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://starname.nodejumper.io:1317',provider:'Nodejumper 🚀'}],grpc:[{address:'grpc-starname-ia.cosmosia.notional.ventures:443',provider:'starname'},{address:'https://starname.nodejumper.io:9090',provider:'Nodejumper 🚀'}]},explorers:[{kind:'mintscan',url:'https://www.mintscan.io/starname',tx_page:'https://www.mintscan.io/starname/txs/${txHash}',account_page:'https://www.mintscan.io/starname/account/${accountAddress}'},{kind:'ping.pub',url:'https://ping.pub/starname',tx_page:'https://ping.pub/starname/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/starname',tx_page:'https://atomscan.com/starname/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'stride',status:'live',network_type:'mainnet',website:'https://stride.zone/',pretty_name:'Stride',chain_id:'stride-1',bech32_prefix:'stride',daemon_name:'strided',node_home:'$HOME/.stride',key_algos:['ed25519'],slip44:118,fees:{fee_tokens:[{denom:'ustrd',fixed_min_gas_price:0,low_gas_price:0,average_gas_price:0,high_gas_price:0.04}]},codebase:{git_repo:'https://github.com/Stride-Labs/stride',recommended_version:'v4.0.2',compatible_versions:['v4.0.0','v4.0.2','v4.0.3'],cosmos_sdk_version:'0.45',tendermint_version:'0.34',genesis:{genesis_url:'https://raw.githubusercontent.com/Stride-Labs/testnet/main/mainnet/genesis.json'}},peers:{seeds:[{id:'babc3f3f7804933265ec9c40ad94f4da8e9e0017',address:'seed.rhinostake.com:12256',provider:'RHINO'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:12256',provider:'Polkachu'},{id:'cb91a11588d66cfd9c01f99541df4978a08e0e39',address:'seedv1.main.stridenet.co:26656',provider:'Stride'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:12256',provider:'Lavender.Five Nodes 🐝'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'stride.mainnet.seed.autostake.net:26886',provider:'AutoStake 🛡️ Slash Protected'},{id:'400f3d9e30b69e78a7fb891f60d76fa3c73f0ecc',address:'stride.rpc.kjnodes.com:16659',provider:'kjnodes'},{id:'86bd5cb6e762f673f1706e5889e039d5406b4b90',address:'stride.seed.node75.org:10456',provider:'Pro-Nodes75'},{id:'95d0377592a657d4c0816d9845e11d659db75d5b',address:'seeds.whispernode.com:12256',provider:'WhisperNode🤐'}],persistent_peers:[{id:'1387946c04bceb472113f657f55f670f71709230',address:'65.108.4.188:12256',provider:'Polkachu-1'},{id:'df3f533e6b9776c11f08da804edcb810cbdd2080',address:'65.108.234.23:12256',provider:'Polkachu-2'},{id:'1387946c04bceb472113f657f55f670f71709230',address:'65.108.4.188:12256',provider:'Polkachu-3'},{id:'076e97f47762a477f2ae3dd3e798a7970b6bb20d',address:'52.52.110.228:26656',provider:'Cosmostation-1'},{id:'e821acdaf0c7a3c60ea3cd4eb4a98a62dad06f58',address:'43.201.12.41:26656',provider:'Cosmostation-2'},{id:'b5f9fa874781f975687018ae559f0d952d3a2e24',address:'52.52.208.179:26656',provider:'Cosmostation-3'},{id:'04ea9eceee16db90872fee3fbef9ac50a87702c5',address:'185.248.24.29:26656',provider:'Whi𝕊perNode'},{id:'9a65aeddaebe1d391058eae5b82e34907547ded1',address:'alice.peers.stride.bh.rocks:46656',provider:'BlockHunters'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'stride.mainnet.peer.autostake.net:26886',provider:'AutoStake 🛡️ Slash Protected'}]},apis:{rpc:[{address:'https://stride-rpc.polkachu.com/',provider:'Polkachu'},{address:'https://stride.rpc.chandrastation.com',provider:'Chandra Station'},{address:'https://rpc.stride.bh.rocks',provider:'BlockHunters'},{address:'http://rpc-stride.nodeist.net',provider:'Nodeist'},{address:'https://stride-rpc.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://stride.rpc.interchain.ivaldilabs.xyz',provider:'Ivaldi Labs'},{address:'https://rpc.stride.nodestake.top',provider:'NodeStake'},{address:'https://rpc-stride.d-stake.xyz',provider:'D-stake'},{address:'https://rpc.stride.silentvalidator.com/',provider:'silent'},{address:'https://stride.rpc.kjnodes.com',provider:'kjnodes'},{address:'https://rpc-stride.pupmos.network',provider:'PUPMØS'},{address:'https://rpc-stride.architectnodes.com',provider:'Architect Nodes'},{address:'https://stride.nodejumper.io:443',provider:'Nodejumper 🚀'}],rest:[{address:'https://stride-api.polkachu.com/',provider:'Polkachu'},{address:'https://stride.api.chandrastation.com',provider:'Chandra Station'},{address:'https://api.stride.bh.rocks',provider:'BlockHunters'},{address:'http://api-stride.nodeist.net',provider:'Nodeist'},{address:'https://stride-api.lavenderfive.com/',provider:'Lavender.Five Nodes 🐝'},{address:'https://stride.rest.interchain.ivaldilabs.xyz',provider:'Ivaldi Labs'},{address:'https://api.stride.nodestake.top',provider:'NodeStake'},{address:'https://api-stride.d-stake.xyz',provider:'D-stake'},{address:'https://api.stride.silentvalidator.com/',provider:'silent'},{address:'https://stride.api.kjnodes.com',provider:'kjnodes'},{address:'https://api-stride.pupmos.network',provider:'PUPMØS'},{address:'https://stride.nodejumper.io:1317',provider:'Nodejumper 🚀'},{address:'https://stride.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'},{address:'https://rest-stride.architectnodes.com',provider:'Architect Nodes'}],grpc:[{address:'stride-grpc.polkachu.com:12290',provider:'Polkachu'},{address:'https://grpc.stride.bh.rocks',provider:'BlockHunters'},{address:'https://stride-grpc.lavenderfive.com:443/',provider:'Lavender.Five Nodes 🐝'},{address:'stride.grpc.interchain.ivaldilabs.xyz:443',provider:'Ivaldi Labs'},{address:'https://grpc.stride.nodestake.top',provider:'NodeStake'},{address:'http://grpc-stride.nodeist.net',provider:'Nodeist'},{address:'https://grpc-stride.d-stake.xyz',provider:'D-stake'},{address:'https://grpc.stride.silentvalidator.com/',provider:'silent'},{address:'https://stride.nodejumper.io:9090',provider:'Nodejumper 🚀'}]},explorers:[{kind:'Apollo',url:'https://apollo.chandrastation.com/stride',tx_page:'https://apollo.chandrastation.com/stride/tx/${txHash}',account_page:'https://apollo.chandrastation.com/stride/account/${accountAddress}'},{kind:'Stride Ping Pub',url:'https://explorer.stride.zone/stride',tx_page:'https://explorer.stride.zone/stride/tx/${txHash}',account_page:'https://explorer.stride.zone/stride/account/${accountAddress}'},{kind:'Nodeist Explorer',url:'https://exp.nodeist.net/Stride',tx_page:'https://exp.nodeist.net/Stride/tx/${txHash}',account_page:'https://exp.nodeist.net/Stride/account/${accountAddress}'},{kind:'mintscan',url:'https://www.mintscan.io/stride',tx_page:'https://www.mintscan.io/stride/txs/${txHash}',account_page:'https://www.mintscan.io/stride/account/${accountAddress}'}],logo_URIs:{png:'https://raw.githubusercontent.com/cosmos/chain-registry/master/stride/images/stride-chain-logo.png'}},{$schema:'../chain.schema.json',chain_name:'teritori',status:'live',network_type:'mainnet',website:'https://teritori.com/',pretty_name:'Teritori',chain_id:'teritori-1',daemon_name:'teritorid',node_home:'$HOME/.teritorid',bech32_prefix:'tori',slip44:118,fees:{fee_tokens:[{denom:'utori',low_gas_price:0,average_gas_price:0.25,high_gas_price:0.5}]},staking:{staking_tokens:[{denom:'utori'}]},codebase:{git_repo:'https://github.com/TERITORI/teritori-chain',recommended_version:'v1.3.0',compatible_versions:['v1.3.0'],genesis:{genesis_url:'https://github.com/TERITORI/teritori-chain/raw/mainnet/mainnet/teritori-1/genesis.json'}},peers:{seeds:[{id:'babc3f3f7804933265ec9c40ad94f4da8e9e0017',address:'seed.rhinostake.com:15956',provider:'RHINO'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:15956',provider:'Lavender.Five Nodes 🐝'},{id:'f97a75fb69d3a5fe893dca7c8d238ccc0bd66a8f',address:'teritori-seed.p2p.brocha.in:30551',provider:'Brochain'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:15956',provider:'Polkachu'},{id:'400f3d9e30b69e78a7fb891f60d76fa3c73f0ecc',address:'teritori.rpc.kjnodes.com:19659',provider:'kjnodes'},{id:'8f75bd347c90fbaa2c96eb187a413bb3751b3a7e',address:'seeds.whispernode.com:15956',provider:'WhisperNode🤐'}],persistent_peers:[{id:'8f28518afd31a42ea81bb3232a50ab0cec4dcdf7',address:'10.201.190.1:26656',provider:'teritori-core-1 ⛩'},{id:'6046cec27c36f0a7596cb9fa9f2c5decbd4e87cb',address:'10.193.255.1:26656',provider:'teritori-core-2 ⛩⛩'}]},apis:{rpc:[{address:'https://teritori-rpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://teritori-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc-teritori.nodeist.net',provider:'Nodeist'},{address:'https://rpc.teritori.nodestake.top',provider:'NodeStake'},{address:'https://rpc.teritori.silentvalidator.com/',provider:'silent'},{address:'https://teritori-rpc.brocha.in',provider:'Brochain'},{address:'https://teritori.nodejumper.io',provider:'Nodejumper 🚀'},{address:'https://teritori-rpc.ibs.team',provider:'Inter Blockchain Services'},{address:'https://rpc-teritori.mms.team/',provider:'MMS'},{address:'https://rpc-teritori.ecostake.com',provider:'ecostake'},{address:'https://teritori.rpc.kjnodes.com',provider:'kjnodes'},{address:'https://rpc.tori.bh.rocks',provider:'BlockHunters 🎯'},{address:'https://teritori-rpc.kleomedes.network',provider:'Kleomedes'},{address:'https://m-teritori.rpc.utsa.tech',provider:'lesnik | UTSA'},{address:'https://rpc.teritori.silknodes.io',provider:'Silk Nodes'},{address:'https://rpc-teritori.pupmos.network',provider:'PUPMØS'}],rest:[{address:'https://teritori-api.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://teritori-api.polkachu.com',provider:'Polkachu'},{address:'https://api-teritori.nodeist.net',provider:'Nodeist'},{address:'https://api.teritori.nodestake.top',provider:'NodeStake'},{address:'https://api.teritori.silentvalidator.com/',provider:'silent'},{address:'https://teritori-rest.brocha.in',provider:'Brochain'},{address:'https://teritori.nodejumper.io:1317',provider:'Nodejumper 🚀'},{address:'https://teritori-api.ibs.team',provider:'Inter Blockchain Services'},{address:'https://api-teritori.mms.team/',provider:'MMS'},{address:'https://rest-teritori.ecostake.com',provider:'ecostake'},{address:'https://teritori.api.kjnodes.com',provider:'kjnodes'},{address:'https://api.tori.bh.rocks',provider:'BlockHunters 🎯'},{address:'https://teritori-api.kleomedes.network',provider:'Kleomedes'},{address:'https://m-teritori.api.utsa.tech',provider:'lesnik | UTSA'},{address:'https://api.teritori.silknodes.io',provider:'Silk Nodes'},{address:'https://api-teritori.pupmos.network',provider:'PUPMØS'}],grpc:[{address:'https://teritori-grpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://grpc-teritori.nodeist.net',provider:'Nodeist'},{address:'https://grpc.teritori.nodestake.top',provider:'NodeStake'},{address:'https://grpc.teritori.silentvalidator.com/',provider:'silent'},{address:'https://teritori.nodejumper.io:9090',provider:'Nodejumper 🚀'},{address:'https://teritori-grpc.brocha.in',provider:'Brochain'},{address:'https://grpc-teritori.mms.team/',provider:'MMS'},{address:'teritori-grpc.polkachu.com:15990',provider:'Polkachu'},{address:'grpc.tori.bh.rocks:443',provider:'BlockHunters 🎯'},{address:'https://grpc.teritori.silknodes.io/',provider:'Silk Nodes'}]},explorers:[{kind:'EZStaking Tools',url:'https://ezstaking.tools/teritori',tx_page:'https://ezstaking.tools/teritori/txs/${txHash}'},{kind:'ping.pub',url:'https://explorer.teritori.com/teritori',tx_page:'https://explorer.teritori.com/teritori/tx/${txHash}'},{kind:'guru',url:'https://teritori.explorers.guru/',tx_page:'https://teritori.explorers.guru/transaction/${txHash}'},{kind:'Nodeist',url:'https://exp.nodeist.net',tx_page:'https://exp.nodeist.net/M-Teritori/tx/${txHash}'},{kind:'Brochain',url:'https://explorer.brocha.in/teritori',tx_page:'https://explorer.brocha.in/teritori/tx/${txHash}'},{kind:'lesnik | UTSA',url:'https://exp.utsa.tech/teritori',tx_page:'https://exp.utsa.tech/teritori/tx/${txHash}'},{kind:'mintscan',url:'https://www.mintscan.io/teritori',tx_page:'https://www.mintscan.io/teritori/txs/${txHash}',account_page:'https://www.mintscan.io/teritori/account/${accountAddress}'}]},{$schema:'../chain.schema.json',chain_name:'terra',status:'live',network_type:'mainnet',pretty_name:'Terra Classic',chain_id:'columbus-5',daemon_name:'terrad',node_home:'$HOME/.terra',bech32_prefix:'terra',slip44:330,fees:{fee_tokens:[{denom:'uluna',low_gas_price:5.665,average_gas_price:5.665,high_gas_price:10}]},staking:{staking_tokens:[{denom:'uluna'}]},codebase:{git_repo:'https://github.com/terra-money/core/',recommended_version:'v0.5.17',compatible_versions:['v0.5.17','v0.5.16'],binaries:{'linux/amd64':'https://github.com/terra-money/core/releases/download/v0.5.17/terra_0.5.17_Linux_x86_64.tar.gz','darwin/amd64':'https://github.com/terra-money/core/releases/download/v0.5.17/terra_0.5.17_Darwin_x86_64.tar.gz'},genesis:{genesis_url:'https://columbus-genesis.s3.ap-northeast-1.amazonaws.com/columbus-5-genesis.json'}},peers:{seeds:[{id:'e999fc20aa5b87c1acef8677cf495ad85061cfb9',address:'seed.terra.delightlabs.io:26656'},{id:'6d8e943c049a80c161a889cb5fcf3d184215023e',address:'public-seed2.terra.dev:26656'},{id:'87048bf71526fb92d73733ba3ddb79b7a83ca11e',address:'public-seed.terra.dev:26656'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'terraclassic.mainnet.seed.autostake.net:26676',provider:'AutoStake 🛡️ Slash Protected'}],persistent_peers:[{id:'3ddf51347ba7c2bc4a8e1e26ee9d1cbf81034516',address:'162.55.244.250:27656'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'terraclassic.mainnet.peer.autostake.net:26676',provider:'AutoStake 🛡️ Slash Protected'}]},apis:{rpc:[{address:'https://terra-rpc.easy2stake.com:443',provider:'Easy2stake'},{address:'http://public-node.terra.dev:26657',provider:'Terra'},{address:'https://rpc-terra-ia.cosmosia.notional.ventures/',provider:'Notional'}],rest:[{address:'https://blockdaemon-terra-lcd.api.bdnodes.net:1317',provider:'Blockdaemon'},{address:'https://api-terra-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://terraclassic.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'}],grpc:[{address:'grpc-terra-ia.cosmosia.notional.ventures:443',provider:'Notional'}]},explorers:[{kind:'ping.pub',url:'https://ping.pub/terra-luna',tx_page:'https://ping.pub/terra-luna/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/terra',tx_page:'https://atomscan.com/terra/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'terra2',status:'live',network_type:'mainnet',website:'https://www.terra.money/',pretty_name:'Terra 2.0',chain_id:'phoenix-1',daemon_name:'terrad',node_home:'$HOME/.terra',bech32_prefix:'terra',slip44:330,fees:{fee_tokens:[{denom:'uluna',fixed_min_gas_price:0.0125,low_gas_price:0.0125,average_gas_price:0.015,high_gas_price:0.15}]},staking:{staking_tokens:[{denom:'uluna'}]},codebase:{git_repo:'https://github.com/terra-money/core/',recommended_version:'v2.2.0',compatible_versions:['v2.2.0'],binaries:{'linux/amd64':'https://github.com/terra-money/core/releases/download/v2.2.0/terra_2.2.0_Linux_x86_64.tar.gz','darwin/amd64':'https://github.com/terra-money/core/releases/download/v2.2.0/terra_2.2.0_Darwin_x86_64.tar.gz'},genesis:{genesis_url:'https://phoenix-genesis.s3.us-west-1.amazonaws.com/genesis.json'}},peers:{seeds:[{id:'406bcf90a7b29df6ae475a1f94abe04ebde805af',address:'phoenix.seed.stakebin.io:16656'},{id:'fc608a9a117d8d2302bcd181aec34eec6bb4fa96',address:'terra2-seed.blockpane.com:26656'},{id:'8efd8248e06aabd553b56766ec2a850999d0861f',address:'exitnode.cereslabs.io:36656'},{id:'b4d3b21747539060b270457437ef1bf99a51c694',address:'terra2.seed.synergynodes.com:26656'},{id:'810d1628db9f1db56fa87a93fb6ef809c32d6325',address:'phoenix.seed.terra.btcsecure.io:26656'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:11756',provider:'Polkachu'},{id:'20e1000e88125698264454a884812746c2eb4807',address:'seeds.lavenderfive.com:11756',provider:'Lavender.Five Nodes 🐝'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'terra.mainnet.seed.autostake.net:26676',provider:'AutoStake 🛡️ Slash Protected'},{id:'1e094db9c147a0fd5e9793365d66736c80bfef46',address:'seeds.whispernode.com:11756',provider:'WhisperNode🤐'}],persistent_peers:[{id:'dc865a0d882f30e41e99ef23d9e6164163607523',address:'54.147.79.192:26656'},{id:'bdce6030a2bdebe4c660a76599fe3dee4a42d50f',address:'35.154.54.64:26656'},{id:'0f1096278efafcf3f0d3bd5b6544e6b8dcc36a0e',address:'206.189.129.195:26656'},{id:'c8ab8910e5f7bfcc6e81351eb851eb8c0540a194',address:'exitnode.cereslabs.io:26656'},{id:'33afc1c21cb225bb2cfb9700442a576bbaeb7691',address:'163.172.100.203:26656'},{id:'9038d63588e0ab421fa71582720c1efb1ee867f6',address:'45.34.1.114:27656'},{id:'daa2fd0dc725d6673e7688c9c57fc3b6d99c83c4',address:'solarsys.noip.me:27656'},{id:'331c2bbcd1aab921563dce85dedae840e1369e39',address:'142.132.199.98:10656'},{id:'91b675be5f81931375358e02ab687c88fab02e41',address:'135.148.55.229:11656'},{id:'9dc9e9b50c4cae52cdbec2034d879427b2a429ae',address:'54.180.81.122:26656'},{id:'ad825ef6b29306d80b0eb8101133cedf7933eb5e',address:'116.203.36.94:26656'},{id:'f2069012aec5ced4e88e7e4311391eabe72bb5a3',address:'node-phoenix.terra.lunastations.online:26656'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'terra.mainnet.peer.autostake.net:26676',provider:'AutoStake 🛡️ Slash Protected'},{id:'86bd5cb6e762f673f1706e5889e039d5406b4b90',address:'terra.seed.node75.org:10856',provider:'Pro-Nodes75'}]},apis:{rpc:[{address:'https://rpc.terrav2.ccvalidators.com:443/',provider:'CryptoCrew'},{address:'https://terra-rpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://terra-rpc.polkachu.com',provider:'polkachu'},{address:'https://terra-rpc.stakely.io:443/',provider:'stakely'},{address:'https://rpc-terra.wildsage.io:443/',provider:'WildSage Labs'}],rest:[{address:'https://terra-api.polkachu.com',provider:'polkachu'},{address:'https://terra-api.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'https://fcd.terrav2.ccvalidators.com:443/',provider:'CryptoCrew'},{address:'https://lcd-terra.wildsage.io:443/',provider:'WildSage Labs'},{address:'https://terra.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'}],grpc:[{address:'https://terra-grpc.lavenderfive.com:443',provider:'Lavender.Five Nodes 🐝'},{address:'terra-grpc.polkachu.com:11790',provider:'Polkachu'}]},explorers:[{kind:'finder',url:'http://finder.terra.money/',tx_page:'https://finder.terra.money/mainnet/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'axelartestnet',chain_id:'axelar-testnet-lisbon-3',pretty_name:'Axelar Testnet',status:'live',network_type:'testnet',website:'https://axelar.network/',bech32_prefix:'axelar',daemon_name:'axelard',node_home:'$HOME/.axelard',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'uaxl'}]},staking:{staking_tokens:[{denom:'uaxl'}]},codebase:{git_repo:'https://github.com/axelarnetwork/axelar-core'},apis:{rpc:[{address:'https://axelartest-rpc.quickapi.com/',provider:'Quickapi'}],rest:[{address:'https://axelartest-lcd.quickapi.com/',provider:'Quickapi'}]},explorers:[{kind:'axelarscan',url:'https://testnet.axelarscan.io',tx_page:'https://testnet.axelarscan.io/tx/${txHash}'},{kind:'mintscan',url:'https://testnet.mintscan.io/axelar-testnet',tx_page:'https://testnet.mintscan.io/axelar-testnet/txs/${txHash}',account_page:'https://testnet.mintscan.io/axelar-testnet/account/${accountAddress}'}]},{$schema:'../../chain.schema.json',chain_name:'bitcannadevnet',status:'live',network_type:'testnet',pretty_name:'BitCanna Devnet-1',chain_id:'bitcanna-dev-1',bech32_prefix:'bcna',daemon_name:'bcnad',node_home:'$HOME/.bcna',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'ubcna',fixed_min_gas_price:0.001}]},codebase:{git_repo:'https://github.com/BitCannaGlobal/bcna',recommended_version:'v1.5.3',compatible_versions:['v1.5.3'],binaries:{'linux/amd64':'https://github.com/BitCannaGlobal/bcna/releases/download/v1.5.3/bcna_linux_amd64.tar.gz'},genesis:{genesis_url:'https://raw.githubusercontent.com/BitCannaGlobal/bcna/main/devnets/bitcanna-dev-1/genesis.json'}},peers:{seeds:[{id:'471341f9befeab582e845d5e9987b7a4889c202f',address:'144.91.89.66:26656'}],persistent_peers:[{id:'80ee9ed689bfb329cf21b94aa12978e073226db4',address:'212.227.151.143:26656'},{id:'20ca909b49106aacbf516ba28fa8a2409f825a82',address:'212.227.151.106:26656'}]},apis:{rpc:[{address:'https://rpc-testnet.bitcanna.io',provider:'bitcanna'}],rest:[{address:'https://lcd-testnet.bitcanna.io',provider:'bitcanna'}]},explorers:[{url:'https://testnet.explorer.erialos.me/bitcanna',tx_page:'https://testnet.explorer.erialos.me/bitcanna/tx/${txHash}'},{url:'https://testnets-cosmos.mintthemoon.xyz/bitcanna',tx_page:'https://testnets-cosmos.mintthemoon.xyz/bitcanna/tx/${txHash}'}]},{$schema:'../../chain.schema.json',chain_name:'bitcannadevnet2',status:'live',network_type:'devnet',pretty_name:'BitCanna Devnet-6 SDK v0.46.x',chain_id:'bitcanna-dev-6',bech32_prefix:'bcna',daemon_name:'bcnad',node_home:'$HOME/.bcna',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'ubcna',fixed_min_gas_price:0.001}]},codebase:{git_repo:'https://github.com/BitCannaGlobal/bcna',recommended_version:'v2.0.0-beta',compatible_versions:['v2.0.0-beta'],binaries:{'linux/amd64':'https://github.com/BitCannaGlobal/bcna/releases/download/v2.0.0-beta/bcna_linux_amd64.tar.gz'},genesis:{genesis_url:'https://raw.githubusercontent.com/BitCannaGlobal/testnet-bcna-cosmos/main/instructions/bitcanna-dev-6/genesis.json'}},peers:{persistent_peers:[{id:'85be53f499c803a10e73734018334049a7c4686d',address:'212.227.151.105:26656'},{id:'fb88f165477b7c7a4fbb47bb6b01448c732a0e88',address:'164.68.119.233:26656'}]},apis:{rpc:[{address:'https://rpc-devnet-6.bitcanna.io/',provider:'bitcanna'}],grpc:[{address:'http://devnet-6.bitcanna.io:9090',provider:'bitcanna'}],rest:[{address:'https://lcd-devnet-6.bitcanna.io/',provider:'bitcanna'}]},explorers:[{url:'https://explorer-devnet-6.bitcanna.io',tx_page:'https://explorer-devnet-6.bitcanna.io/tx/${txHash}'}]},{$schema:'../../chain.schema.json',chain_name:'cheqdtestnet',status:'live',network_type:'testnet',pretty_name:'cheqd',chain_id:'cheqd-testnet-4',bech32_prefix:'cheqd',daemon_name:'cheqd-noded',node_home:'$HOME/.cheqdnode',slip44:118,fees:{fee_tokens:[{denom:'ncheq',fixed_min_gas_price:25,low_gas_price:25,average_gas_price:50,high_gas_price:100}]},codebase:{git_repo:'https://github.com/cheqd/cheqd-node',recommended_version:'v0.6.9',compatible_versions:['v0.6.9','v0.6.8','v0.6.7','v0.6.1','v0.6.0'],binaries:{'linux/amd64':'https://github.com/cheqd/cheqd-node/releases/download/0.6.9/cheqd-noded-0.6.9-Linux-arm64.tar.gz','linux/arm64':'https://github.com/cheqd/cheqd-node/releases/download/0.6.9/cheqd-noded-0.6.9-Linux-x86_64.tar.gz'},cosmos_sdk_version:'0.45',tendermint_version:'0.34',genesis:{genesis_url:'https://raw.githubusercontent.com/cheqd/cheqd-node/main/networks/mainnet/genesis.json'}},peers:{seeds:[{id:'658453f9578d82f0897f13205ca2e7ad37279f95',address:'seed1-eu.cheqd.network:26656',provider:'cheqd'},{id:'32d626260f74f3c824dfa15a624c078f27fc31a2',address:'seed1-ap.cheqd.network:26656',provider:'cheqd'}],persistent_peers:[{id:'8c45237d435247270b95edae33fd1a69341eb1bb',address:'sentry1-eu.cheqd.network:26656',provider:'cheqd'},{id:'355d3e577b9b1eaadf438694e86364425cf4bb0e',address:'sentry1-ap.cheqd.network:26656',provider:'cheqd'}]},apis:{rpc:[{address:'https://rpc.cheqd.network',provider:'cheqd'}],rest:[{address:'https://api.cheqd.network',provider:'cheqd'}],grpc:[{address:'grpc.cheqd.network:443',provider:'cheqd'}]},explorers:[{kind:'bigdipper',url:'https://testnet-explorer.cheqd.io/',tx_page:'https://testnet-explorer.cheqd.io/transactions/${txHash}'}],logo_URIs:{png:'https://raw.githubusercontent.com/cosmos/chain-registry/master/cheqd/images/cheq.png',svg:'https://raw.githubusercontent.com/cosmos/chain-registry/master/cheqd/images/cheq.svg'}},{$schema:'../../chain.schema.json',chain_name:'coolcattestnet',status:'live',network_type:'testnet',website:'https://app.coolcat.space/',pretty_name:'CoolCat',chain_id:'kitten-04',bech32_prefix:'ccat',key_algos:['secp256k1'],fees:{fee_tokens:[{denom:'uccat',fixed_min_gas_price:0,low_gas_price:0,average_gas_price:1,high_gas_price:2}]},staking:{staking_tokens:[{denom:'uccat'}]},daemon_name:'coolcat',node_home:'$HOME/.coolcat',slip44:118,codebase:{git_repo:'https://github.com/DigitalKitchenLabs/coolcat',recommended_version:'v2.0.0',compatible_versions:['v2.0.0'],genesis:{genesis_url:'https://raw.githubusercontent.com/DigitalKitchenLabs/testnets/main/kitten-04/genesis.json'}},peers:{seeds:[],persistent_peers:[]},apis:{rpc:[{address:'https://rpc.coolcat.space',provider:'Digital Kitchen'}],rest:[{address:'https://lcd.coolcat.space',provider:'Digital Kitchen'}],grpc:[]},explorers:[]},{$schema:'../../chain.schema.json',chain_name:'cosmoshubtestnet',chain_id:'theta-testnet-001',pretty_name:'Theta Testnet',status:'live',network_type:'testnet',bech32_prefix:'cosmos',daemon_name:'gaiad',node_home:'$HOME/.gaia',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'uatom',fixed_min_gas_price:0}]},codebase:{git_repo:'https://github.com/cosmos/gaia',recommended_version:'v7.0.2',compatible_versions:['v7.0.0','v7.0.1','v7.0.2'],binaries:{'linux/amd64':'https://github.com/cosmos/gaia/releases/download/v7.0.2/gaiad-v7.0.2-linux-amd64','linux/arm64':'https://github.com/cosmos/gaia/releases/download/v7.0.2/gaiad-v7.0.2-linux-arm64','darwin/amd64':'https://github.com/cosmos/gaia/releases/download/v7.0.2/gaiad-v7.0.2-darwin-amd64','windows/amd64':'https://github.com/cosmos/gaia/releases/download/v7.0.2/gaiad-v7.0.2-windows-amd64.exe'},genesis:{genesis_url:'https://github.com/cosmos/testnets/raw/master/v7-theta/public-testnet/genesis.json.gz'}},peers:{seeds:[{id:'639d50339d7045436c756a042906b9a69970913f',address:'seed-01.theta-testnet.polypore.xyz:26656',provider:'Hypha'},{id:'3e506472683ceb7ed75c1578d092c79785c27857',address:'seed-02.theta-testnet.polypore.xyz:26656',provider:'Hypha'}],persistent_peers:[]},apis:{rpc:[{address:'https://rpc.sentry-01.theta-testnet.polypore.xyz',provider:'Hypha'},{address:'https://rpc.sentry-02.theta-testnet.polypore.xyz',provider:'Hypha'},{address:'https://rpc.state-sync-01.theta-testnet.polypore.xyz',provider:'Hypha'},{address:'https://rpc.state-sync-02.theta-testnet.polypore.xyz',provider:'Hypha'},{address:'https://public-cosmos-theta.w3node.com',provider:'Interchain.FM'}],rest:[{address:'https://rest.sentry-01.theta-testnet.polypore.xyz',provider:'Hypha'},{address:'https://rest.sentry-02.theta-testnet.polypore.xyz',provider:'Hypha'},{address:'https://rest.state-sync-01.theta-testnet.polypore.xyz',provider:'Hypha'},{address:'https://rest.state-sync-02.theta-testnet.polypore.xyz',provider:'Hypha'},{address:'https://public-cosmos-theta.w3node.com/rest/',provider:'Interchain.FM'}],grpc:[{address:'https://grpc.sentry-01.theta-testnet.polypore.xyz',provider:'Hypha'},{address:'https://grpc.sentry-02.theta-testnet.polypore.xyz',provider:'Hypha'},{address:'https://grpc.state-sync-01.theta-testnet.polypore.xyz',provider:'Hypha'},{address:'https://grpc.state-sync-02.theta-testnet.polypore.xyz',provider:'Hypha'}]},explorers:[{kind:'Big Dipper',url:'https://explorer.theta-testnet.polypore.xyz/',tx_page:'https://explorer.theta-testnet.polypore.xyz/transactions/${txHash}'}]},{$schema:'../../chain.schema.json',chain_name:'cosmwasmtestnet',status:'live',network_type:'testnet',pretty_name:'CosmWasm Testnet',chain_id:'malaga-420',bech32_prefix:'wasm',daemon_name:'wasmd',node_home:'$HOME/.wasmd',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'umlg',low_gas_price:0.03,average_gas_price:0.04,high_gas_price:0.05}]},staking:{staking_tokens:[{denom:'uand'}]},codebase:{git_repo:'https://github.com/CosmWasm/wasmd',recommended_version:'v0.27',compatible_versions:['v0.27'],cosmos_sdk_version:'0.45',tendermint_version:'0.34',cosmwasm_version:'0.27',cosmwasm_enabled:true,genesis:{genesis_url:'https://raw.githubusercontent.com/CosmosContracts/testnets/main/uni-5/genesis.json'}},peers:{seeds:[],persistent_peers:[{id:'3e3d0d09027dda13a1cd95b5146edc24da5ef872',address:'142.132.236.229:26656',provider:'Confio'}]},apis:{rpc:[{address:'https://rpc.malaga-420.cosmwasm.com:443',provider:'Confio'}],rest:[{address:'https://api.malaga-420.cosmwasm.com',provider:'Confio'}]},explorers:[{kind:'BIG DIPPER',url:'https://block-explorer.malaga-420.cosmwasm.com/',tx_page:'https://block-explorer.malaga-420.cosmwasm.com/transactions/${txHash}'}]},{$schema:'../../chain.schema.json',chain_name:'cudostestnet',status:'live',network_type:'testnet',pretty_name:'Cudos testnet',chain_id:'cudos-testnet-public-3',bech32_prefix:'cudos',key_algos:['secp256k1'],slip44:118,codebase:{git_repo:'https://github.com/CudoVentures/cudos-node',recommended_version:'v0.9.0',compatible_versions:['v0.9.0'],genesis:{genesis_url:'https://github.com/CudoVentures/cudos-builders/blob/v0.9.0/docker/config/genesis.testnet.public.json'}},peers:{seeds:[{id:'86a2f5d723718a030ee436dc792d14c42ba0bd3f',address:'34.67.137.129:26656',provider:'cudo'},{id:'a48e90ce5e7d01c40bc4352794f034880c2f2041',address:'34.102.114.30:26656',provider:'cudo'},{id:'f93e129f120fd1de3e9d60d2bd376ae96af325dd',address:'34.141.129.16:26656',provider:'cudo'}],persistent_peers:[{id:'b48994dd2f25de4c2355cbda1681c5e8bbc1e8f2',address:'34.91.31.157:26656',provider:'cudo'}]},apis:{rpc:[{address:'http://sentry1.gcp-uscentral1.cudos.org:26657',provider:'cudo'},{address:'https://sentry1.gcp-uscentral1.cudos.org:36657',provider:'cudo'},{address:'http://sentry2.gcp-uswest2.cudos.org:26657',provider:'cudo'},{address:'https://sentry2.gcp-uswest2.cudos.org:36657',provider:'cudo'},{address:'http://sentry3.gcp-euwest4.cudos.org:26657',provider:'cudo'},{address:'https://sentry3.gcp-euwest4.cudos.org:36657',provider:'cudo'}],rest:[{address:'http://sentry1.gcp-uscentral1.cudos.org:1317',provider:'cudo'},{address:'https://sentry1.gcp-uscentral1.cudos.org:31317',provider:'cudo'},{address:'http://sentry2.gcp-uswest2.cudos.org:1317',provider:'cudo'},{address:'https://sentry2.gcp-uswest2.cudos.org:31317',provider:'cudo'},{address:'http://sentry3.gcp-euwest4.cudos.org:1317',provider:'cudo'},{address:'https://sentry3.gcp-euwest4.cudos.org:31317',provider:'cudo'}],grpc:[{address:'http://sentry1.gcp-uscentral1.cudos.org:9090',provider:'cudo'},{address:'https://sentry1.gcp-uscentral1.cudos.org:39090',provider:'cudo'},{address:'http://sentry2.gcp-uswest2.cudos.org:9090',provider:'cudo'},{address:'https://sentry2.gcp-uswest2.cudos.org:39090',provider:'cudo'},{address:'http://sentry3.gcp-euwest4.cudos.org:9090',provider:'cudo'},{address:'https://sentry3.gcp-euwest4.cudos.org:39090',provider:'cudo'}]},explorers:[{kind:'bigdipper-testnet',url:'https://explorer.testnet.cudos.org/',tx_page:'https://explorer.testnet.cudos.org/transactions/${txHash}',account_page:'https://explorer.testnet.cudos.org/accounts/${accountAddress}'}]},{$schema:'../../chain.schema.json',chain_name:'empowertestnet',chain_id:'altruistic-1',pretty_name:'Empower Testnet',status:'live',network_type:'testnet',bech32_prefix:'empower',daemon_name:'empowerd',node_home:'$HOME/.empowerchain',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'umpwr',fixed_min_gas_price:0}]},codebase:{git_repo:'https://github.com/empowerchain/empowerchain',recommended_version:'v0.0.1',compatible_versions:['v0.0.1'],genesis:{genesis_url:'https://raw.githubusercontent.com/empowerchain/empowerchain/main/testnets/altruistic-1/genesis.json'}},peers:{seeds:[{id:'9de92b545638f6baaa7d6d5109a1f7148f093db3',address:'65.108.77.106:26656'},{id:'4fd5e497563b2e09cfe6f857fb35bdae76c12582',address:'65.108.206.56:26656'},{id:'fe32c17373fbaa36d9fd86bc1146bfa125bb4f58',address:'5.9.147.185:26656'},{id:'220fb60b083bc4d443ce2a7a5363f4813dd4aef4',address:'116.202.236.115:26656'},{id:'225ad85c594d03942a026b90f4dab43f90230ea0',address:'88.99.3.158:26656'},{id:'333de3fc2eba7eead24e0c5f53d665662b2ba001',address:'10.132.0.11:26656'},{id:'4a38efbae54fd1357329bd583186a68ccd6d85f9',address:'94.130.212.252:26656'},{id:'52450b21f346a4cf76334374c9d8012b2867b842',address:'167.172.246.201:26656'},{id:'6a675d4f66bfe049321c3861bcfd19bd09fefbde',address:'195.3.223.204:26656'},{id:'1069820cdd9f5332503166b60dc686703b2dccc5',address:'138.201.141.76:26656'},{id:'277ff448eec6ec7fa665f68bdb1c9cb1a52ff597',address:'159.69.110.238:26656'},{id:'3335c9458105cf65546db0fb51b66f751eeb4906',address:'5.189.129.30:26656'},{id:'edc9aa0bbf1fcd7433fcc3650e3f50ab0becc0b5',address:'65.21.170.3:26656'},{id:'d582bcd8a8f0a20c551098571727726bc75bae74',address:'213.239.217.52:26656'},{id:'eb182533a12d75fbae1ec32ef1f8fc6b6dd06601',address:'65.109.28.219:26656'},{id:'b22f0708c6f393bf79acc0a6ca23643fe7d58391',address:'65.21.91.50:26656'},{id:'e8f6d75ab37bf4f08c018f306416df1e138fd21c',address:'95.217.135.41:26656'}]},apis:{rpc:[{address:'https://rpc-testnet-empower.zenchainlabs.io/',provider:'zenchainlabs'},{address:'https://empower-t.rpc.manticore.team:443/',provider:'manticore'},{address:'https://empower-testnet-rpc.polkachu.com/',provider:'polkachu'}],rest:[{address:'https://api-testnet-empower.zenchainlabs.io/',provider:'zenchainlabs'},{address:'https://empower-t.api.manticore.team:443/',provider:'manticore'},{address:'https://empower-testnet-api.polkachu.com/',provider:'polkachu'}]},explorers:[{kind:'ping.pub',url:'https://testnet.ping.pub/empower',tx_page:'https://testnet.ping.pub/empower/tx/${txHash}'}]},{$schema:'../../chain.schema.json',chain_name:'evmostestnet',status:'live',network_type:'testnet',pretty_name:'Evmos Testnet',chain_id:'evmos_9000-4',bech32_prefix:'evmos',daemon_name:'evmosd',node_home:'$HOME/.evmosd',key_algos:['ethsecp256k1'],extra_codecs:['ethermint'],slip44:60,fees:{fee_tokens:[{denom:'atevmos',low_gas_price:20000000000,average_gas_price:25000000000,high_gas_price:40000000000}]},staking:{staking_tokens:[{denom:'atevmos'}]},codebase:{git_repo:'https://github.com/evmos/evmos',recommended_version:'v10.0.0-rc4',compatible_versions:['v10.0.0-rc4'],cosmos_sdk_version:'0.46',tendermint_version:'0.34',genesis:{genesis_url:'https://github.com/evmos/testnets/raw/main/evmos_9000-4/genesis.zip'}},peers:{seeds:[],persistent_peers:[{id:'b7635a113a52d0d25c82267de0648e71e46dc584',address:'167.99.182.201:46656',provider:'coldy'},{id:'005efaae1ae29f95edea5f3729ce7e75511e5d3d',address:'65.108.225.158:13456',provider:'Polkachu'}]},apis:{rpc:[{address:'https://evmos.test.rpc.coldyvalidator.net',provider:'coldy'},{address:'https://evmos-testnet-rpc.polkachu.com',provider:'Polkachu'}],rest:[{address:'https://evmos.test.api.coldyvalidator.net',provider:'coldy'},{address:'https://evmos-testnet-api.polkachu.com',provider:'Polkachu'}],grpc:[{address:'https://evmos.test.grpc.coldyvalidator.net',provider:'coldy'}]},explorers:[{kind:'Mintscan',url:'https://testnet.mintscan.io/evmos-testnet',tx_page:'https://testnet.mintscan.io/evmos-testnet/txs/${txHash}'},{kind:'NodesGuru',url:'https://testnet.evmos.explorers.guru/',tx_page:'https://testnet.evmos.explorers.guru/transaction/${txHash}'}]},{$schema:'../../chain.schema.json',chain_name:'gitopiatestnet',chain_id:'gitopia-janus-testnet-2',pretty_name:'Gitopia Testnet',status:'live',network_type:'testnet',bech32_prefix:'gitopia',daemon_name:'gitopiad',node_home:'$HOME/.gitopia',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'utlore',fixed_min_gas_price:0}]},codebase:{git_repo:'https://gitopia.com/gitopia',recommended_version:'v1.2.0',compatible_versions:['v1.2.0'],genesis:{genesis_url:'https://server.gitopia.com/raw/gitopia/testnets/master/gitopia-janus-testnet-2/genesis.json.gz'}},peers:{seeds:[{id:'399d4e19186577b04c23296c4f7ecc53e61080cb',address:'seed.gitopia.com:26656'}],persistent_peers:[{id:'6146658ffe2d148524a9fdcc3d701440053442bf',address:'gitopia-testnet.nodejumper.io:30656',provider:'Nodejumper 🚀'}]},apis:{rpc:[{address:'https://gitopia-testnet.nodejumper.io',provider:'Nodejumper 🚀'}],rest:[{address:'https://gitopia-testnet.nodejumper.io:1317',provider:'Nodejumper 🚀'}],grpc:[{address:'https://gitopia-testnet.nodejumper.io:9090',provider:'Nodejumper 🚀'}]},explorers:[{kind:'explorer.humans.zone',url:'https://gitopia.explorers.guru/',tx_page:'https://gitopia.explorers.guru/transaction/${txHash}'}]},{$schema:'../../chain.schema.json',chain_name:'humanstestnet',chain_id:'testnet-1',pretty_name:'Humans AI Testnet',status:'live',network_type:'testnet',bech32_prefix:'humans',daemon_name:'humansd',node_home:'$HOME/.humans',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'uheart',fixed_min_gas_price:0}]},codebase:{git_repo:'https://github.com/humansdotai/humans',recommended_version:'v1.0.0',compatible_versions:['v1.0.0'],genesis:{genesis_url:'https://rpc-testnet.humans.zone/genesis'}},apis:{rpc:[{address:'https://humans-testnet.nodejumper.io',provider:'Nodejumper 🚀'}],rest:[{address:'https://humans-testnet.nodejumper.io:1317',provider:'Nodejumper 🚀'}],grpc:[{address:'https://humans-testnet.nodejumper.io:9090',provider:'Nodejumper 🚀'}]},explorers:[{kind:'explorer.humans.zone',url:'https://explorer.humans.zone/',tx_page:'https://explorer.humans.zone/humans-testnet/tx/${txHash}'}]},{$schema:'../../chain.schema.json',chain_name:'hypersigntestnet',status:'live',network_type:'testnet',pretty_name:'hypersign',chain_id:'jagrat',bech32_prefix:'hid',daemon_name:'hid-noded',node_home:'$HOME/.hid-node',slip44:118,fees:{fee_tokens:[{denom:'uhid',fixed_min_gas_price:0,low_gas_price:0,average_gas_price:0.02,high_gas_price:0.05}]},codebase:{git_repo:'https://github.com/hypersign-protocol/hid-node',recommended_version:'v0.1.5',compatible_versions:['v0.1.5'],binaries:{'linux/amd64':'https://github.com/hypersign-protocol/hid-node/releases/download/v0.1.5/hid-noded-0.1.5-linux-amd64.tar.gz','linux/arm64':'https://github.com/hypersign-protocol/hid-node/releases/download/v0.1.5/hid-noded-0.1.5-linux-arm64.tar.gz','darwin/arm64':'https://github.com/hypersign-protocol/hid-node/releases/download/v0.1.5/hid-noded-0.1.5-darwin-arm64.tar.gz'},genesis:{genesis_url:'https://raw.githubusercontent.com/hypersign-protocol/networks/master/testnet/jagrat/final_genesis.json'}},peers:{seeds:[],persistent_peers:[{id:'d7c9b9a3c3a6c5f4ccdfb37a8358755b277271c1',address:'3.110.226.164:26656',provider:'hypersign'}]},apis:{rpc:[{address:'https://rpc.jagrat.hypersign.id',provider:'hypersign'}],rest:[{address:'https://api.jagrat.hypersign.id',provider:'hypersign'}],grpc:[{address:'grpc.jagrat.hypersign.id:5099',provider:'hypersign'}]},explorers:[{kind:'Ping Pub',url:'https://explorer.hypersign.id/hypersign-testnet',tx_page:'https://explorer.hypersign.id/hypersign-testnet/tx/${txHash}'}]},{$schema:'../../chain.schema.json',chain_name:'imversedtestnet',status:'live',network_type:'testnet',pretty_name:'Imversed Testnet',chain_id:'imversed-test-1',bech32_prefix:'imv',daemon_name:'imversed',node_home:'$HOME/.imversed',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'nimv',fixed_min_gas_price:0.001}]},codebase:{git_repo:'https://github.com/imversed/imversed',recommended_version:'v2.4.0',compatible_versions:['v2.4.0'],binaries:{'linux/amd64':'https://s.imversed.com/imversed_linux_amd64.tar.gz','darwin/arm64':'https://s.imversed.com/imversed_darwin_arm64.tar.gz','darwin/amd64':'https://s.imversed.com/imversed_darwin_amd64.tar.gz','windows/amd64':'https://s.imversed.com/imversed_windows_amd64.tar.gz'},genesis:{genesis_url:'https://s.imversed.com/test-net/genesis.json'}},peers:{persistent_peers:[{id:'9b1ea21b9a1d098169c19e5d6bfa1397bba5c655',address:'34.133.39.91:26656',provider:'imversed'}]},apis:{rpc:[{address:'https://tx-endpoint-test.imversed.com/',provider:'imversed'}],rest:[{address:'https://query-endpoint-test.imversed.com/',provider:'imversed'}],grpc:[{address:'http://qs.imversed.com:9090',provider:'imversed'}]},explorers:[{kind:'Big Dipper',url:'https://tex-s.imversed.com',tx_page:'https://tex-s.imversed.com/transactions/${txHash}'}]},{$schema:'../../chain.schema.json',chain_name:'jackaltestnet',chain_id:'canine-1',website:'https://jackalprotocol.com',pretty_name:'Jackal',status:'live',network_type:'testnet',bech32_prefix:'jkl',daemon_name:'canined',node_home:'$HOME/.canine',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'ujkl',fixed_min_gas_price:0}]},codebase:{git_repo:'https://github.com/JackalLabs/canine-chain',recommended_version:'v0.0.0-alpha.2',compatible_versions:['v0.0.0-alpha.2'],genesis:{genesis_url:'https://raw.githubusercontent.com/JackalLabs/woof/master/genesis/woof-final.json'},binaries:{'linux/amd64':'https://github.com/JackalLabs/canine-chain/releases/download/v0.0.0-alpha.2/canined-Linux','darwin/amd64':'https://github.com/JackalLabs/canine-chain/releases/download/v0.0.0-alpha.2/canined-macOS'}},peers:{seeds:[{id:'052c498dd1cc603b4d32f772035b6a8ca902def3',address:'23.88.73.211:26656'},{id:'0bdeaaa237b41e3b964a027a110c6ab5bf561177',address:'209.34.206.38:26656'},{id:'bf7ee27a24e7d5f45653206fbbda8c4b716b74b1',address:'89.58.38.59:26656'},{id:'9eecc498dd2542c862f5bfb84ed7d2e1e3d922ab',address:'34.201.48.14:26656'},{id:'bf62b185eef3c185f8ebf81d5cf54bdc064b21d8',address:'85.10.216.157:26656'},{id:'43e800018a5b52ba119a5410ff45cbeb63182cc8',address:'207.244.127.5:26656'},{id:'942087a9665e8235f8037d0b9d2a3f8a8c3d562b',address:'104.207.138.181:26656'},{id:'9d0094606fe8748f1c06b494f7c0cbbd44808ec6',address:'131.153.59.6:26656'},{id:'6071fe2fc7e4f49caa4b1fd1cfe19007152312e0',address:'34.76.87.33:26656'},{id:'3f58d7c35ad55ef6cea94f7aa2ffe79df1c01768',address:'78.107.253.133:26656'},{id:'46cb18ca32ad7329cb82a10316087794ef12150f',address:'185.107.57.74:26656'}],persistent_peers:[{id:'052c498dd1cc603b4d32f772035b6a8ca902def3',address:'23.88.73.211:26656'},{id:'0bdeaaa237b41e3b964a027a110c6ab5bf561177',address:'209.34.206.38:26656'},{id:'bf7ee27a24e7d5f45653206fbbda8c4b716b74b1',address:'89.58.38.59:26656'},{id:'9eecc498dd2542c862f5bfb84ed7d2e1e3d922ab',address:'34.201.48.14:26656'},{id:'bf62b185eef3c185f8ebf81d5cf54bdc064b21d8',address:'85.10.216.157:26656'},{id:'43e800018a5b52ba119a5410ff45cbeb63182cc8',address:'207.244.127.5:26656'},{id:'942087a9665e8235f8037d0b9d2a3f8a8c3d562b',address:'104.207.138.181:26656'},{id:'9d0094606fe8748f1c06b494f7c0cbbd44808ec6',address:'131.153.59.6:26656'},{id:'6071fe2fc7e4f49caa4b1fd1cfe19007152312e0',address:'34.76.87.33:26656'},{id:'3f58d7c35ad55ef6cea94f7aa2ffe79df1c01768',address:'78.107.253.133:26656'},{id:'46cb18ca32ad7329cb82a10316087794ef12150f',address:'185.107.57.74:26656'}]},apis:{rpc:[{address:'https://testnet-rpc.jackalprotocol.com',provider:'Jackal Labs'}],rest:[{address:'https://testnet-api.jackalprotocol.com',provider:'Jackal Labs'}],grpc:[{address:'https://testnet-grpc.jackalprotocol.com',provider:'Jackal Labs'}]},explorers:[{kind:'ping.pub',url:'https://ping.pub/jackal',tx_page:'https://ping.pub/jackal/tx/${txHash}'}]},{$schema:'../../chain.schema.json',chain_name:'junotestnet',status:'live',network_type:'testnet',pretty_name:'Juno Testnet',chain_id:'uni-5',bech32_prefix:'juno',daemon_name:'junod',node_home:'$HOME/.juno',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'ujunox',low_gas_price:0.03,average_gas_price:0.04,high_gas_price:0.05}]},staking:{staking_tokens:[{denom:'ujunox'}]},codebase:{git_repo:'https://github.com/CosmosContracts/juno',recommended_version:'v11.0.0-alpha',compatible_versions:['v11.0.0-alpha'],cosmos_sdk_version:'0.45',tendermint_version:'0.34',cosmwasm_version:'0.29',cosmwasm_enabled:true,genesis:{genesis_url:'https://raw.githubusercontent.com/CosmosContracts/testnets/main/uni-5/genesis.json'}},peers:{seeds:[{id:'08bde9dda7cc7898b7426387281cdd492f4488af',address:'tenderseed.ccvalidators.com:29003',provider:'CryptoCrew'}],persistent_peers:[{id:'ed90921d43ede634043d152d7a87e8881fb85e90',address:'65.108.77.106:26709',provider:'EZStaking.io'}]},apis:{rpc:[{address:'https://rpc.uni.junonetwork.io',provider:'Juno'},{address:'https://juno-testnet-rpc.polkachu.com',provider:'Polkachu'}],rest:[{address:'https://api.uni.junonetwork.io',provider:'Juno'},{address:'https://juno-testnet-api.polkachu.com',provider:'Polkachu'}],grpc:[{address:'juno-testnet-grpc.polkachu.com:12690',provider:'Polkachu'}]},explorers:[{kind:'EZStaking Tools',url:'https://testnet.ezstaking.tools/juno-testnet',tx_page:'https://testnet.ezstaking.tools/juno-testnet/txs/${txHash}'},{kind:'Mintscan',url:'https://testnet.mintscan.io/juno-testnet',tx_page:'https://testnet.mintscan.io/juno-testnet/txs/${txHash}'},{kind:'NodesGuru',url:'https://testnet.juno.explorers.guru/',tx_page:'https://testnet.juno.explorers.guru/transaction/${txHash}'}]},{$schema:'../../chain.schema.json',chain_name:'kichaintestnet',status:'live',network_type:'testnet',pretty_name:'Ki',chain_id:'kichain-t-4',bech32_prefix:'tki',daemon_name:'kid',node_home:'$HOME/.kid',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'utki',fixed_min_gas_price:0.025}]},codebase:{git_repo:'https://github.com/KiFoundation/ki-tools',recommended_version:'Testnet-3.0.0-beta',compatible_versions:['Testnet-3.0.0-beta'],genesis:{genesis_url:'https://raw.githubusercontent.com/KiFoundation/ki-networks/v0.1/Testnet/kichain-t-4/genesis.json'}},peers:{seeds:[{id:'381dff5439ed042353c5333e61bab1510711f2f5',address:'seed-testnet.blockchain.ki:6969',provider:'kifoundation'}],persistent_peers:[{id:'46b25d81510f8dcc535ca0924961b266e4f59244',address:'135.125.183.94:26656',provider:'Community'},{id:'ada3bbf64f963e764bfe003276354bd121e80ae0',address:'95.111.248.200:26656',provider:'Community'},{id:'276f6fb420b3595b63c2a13d35868cb530a31578',address:'65.21.159.19:26656',provider:'Community'},{id:'7e5710ee0b1576a78a21a89e1588b6c95ee69873',address:'194.163.137.193:26656',provider:'Community'},{id:'323a5c9ccfb73573cbcd634c497b2a7405b198fa',address:'142.132.137.114:26656',provider:'Community'}]},apis:{rpc:[{address:'https://rpc-challenge.blockchain.ki/',provider:'kifoundation'}],rest:[{address:'https://api-challenge.blockchain.ki/',provider:'kifoundation'}]},explorers:[{kind:'kifoundation',url:'https://kichain-t-4.blockchain.ki/',tx_page:'https://kichain-t-4.blockchain.ki/transactions/${txHash}'}]},{$schema:'../../chain.schema.json',chain_name:'kujiratestnet',chain_id:'harpoon-4',pretty_name:'Kujira Harpoon',status:'live',network_type:'testnet',bech32_prefix:'kujira',daemon_name:'kujirad',node_home:'$HOME/.kujira',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'ukuji',fixed_min_gas_price:0}]},codebase:{git_repo:'https://github.com/Team-Kujira/core',recommended_version:'v0.4.0',compatible_versions:['v0.4.0'],genesis:{genesis_url:'https://github.com/Team-Kujira/networks/raw/master/testnet/harpoon-4.json'}},apis:{rpc:[{address:'https://kujira-testnet-rpc.polkachu.com',provider:'polkachu'}],rest:[{address:'https://kujira-testnet-api.polkachu.com/',provider:'polkachu'}]},explorers:[{kind:'explorers.guru',url:'https://kujira.explorers.guru',tx_page:'https://kujira.explorers.guru/transaction/${txHash}'}]},{$schema:'../../chain.schema.json',chain_name:'kyvetestnet',chain_id:'korellia',pretty_name:'KYVE Korellia',status:'live',network_type:'testnet',bech32_prefix:'kyve',daemon_name:'chaind',node_home:'$HOME/.kyve',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'tkyve',fixed_min_gas_price:0}]},codebase:{git_repo:'https://github.com/KYVENetwork/chain',recommended_version:'v0.6.3',compatible_versions:['v0.6.3'],binaries:{'linux/amd64':'https://github.com/KYVENetwork/chain/releases/download/v0.6.3/chain_linux_amd64.tar.gz'},genesis:{genesis_url:'https://github.com/KYVENetwork/chain/releases/download/v0.0.1/genesis.json'}},peers:{seeds:[{id:'02dd2c26948ea758a25d3dbc91744f8897681652',address:'3.73.27.185:26656'}],persistent_peers:[{id:'70556c82352b9919fb6f339b9da0ebc587e9148c',address:'3.68.232.117:26656'}]},apis:{rpc:[{address:'https://rpc.korellia.kyve.network',provider:'kyve'}],rest:[{address:'https://api.korellia.kyve.network',provider:'kyve'}]},explorers:[{kind:'explorers.guru',url:'https://kyve.explorers.guru/',tx_page:'https://kyve.explorers.guru/transaction/${txHash}'}]},{$schema:'../../chain.schema.json',chain_name:'osmosistestnet',status:'live',network_type:'testnet',pretty_name:'Osmosis Testnet',chain_id:'osmo-test-4',bech32_prefix:'osmo',daemon_name:'osmosisd',node_home:'$HOME/.osmosisd',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'uosmo',fixed_min_gas_price:0,low_gas_price:0,average_gas_price:0.025,high_gas_price:0.04}]},staking:{staking_tokens:[{denom:'uosmo'}]},codebase:{git_repo:'https://github.com/osmosis-labs/osmosis',recommended_version:'v14.0.0-rc1',compatible_versions:['v14.0.0-rc1'],cosmos_sdk_version:'0.45',tendermint_version:'0.34',cosmwasm_version:'0.29',cosmwasm_enabled:true,genesis:{genesis_url:'https://github.com/osmosis-labs/networks/raw/main/osmo-test-4/genesis.tar.bz2'}},peers:{seeds:[{id:'0f9a9c694c46bd28ad9ad6126e923993fc6c56b1',address:'137.184.181.105:26656',provider:''}],persistent_peers:[{id:'4ab030b7fd75ed895c48bcc899b99c17a396736b',address:'137.184.190.127:26656',provider:''},{id:'3dbffa30baab16cc8597df02945dcee0aa0a4581',address:'143.198.139.33:26656',provider:''}]},apis:{rpc:[{address:'https://rpc.osmo-test.ccvalidators.com/',provider:'CryptoCrew'},{address:'https://osmosistest-rpc.quickapi.com/',provider:'ChainLayer'},{address:'https://testnet-rpc.osmosis.zone/',provider:''}],rest:[{address:'https://osmosistest-lcd.quickapi.com/',provider:'CryptoCrew'},{address:'https://lcd.osmo-test.ccvalidators.com/',provider:'ChainLayer'},{address:'https://testnet-rest.osmosis.zone/',provider:''}],grpc:[{address:'https://grpc-test.osmosis.zone:443',provider:'Osmosis'}]},logo_URIs:{png:'https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmosis-chain-logo.png'},keywords:['dex','testnet']},{$schema:'../../chain.schema.json',chain_name:'quasartestnet',status:'live',network_type:'testnet',pretty_name:'Quasar Testnet',chain_id:'qsr-questnet-03',bech32_prefix:'quasar',daemon_name:'quasarnoded',node_home:'$HOME/.quasarnoded',key_algos:['secp256k1'],slip44:118,staking:{staking_tokens:[{denom:'uqsr'}]},codebase:{recommended_version:'v0.0.1-alpha-6',compatible_versions:['v0.0.1-alpha-6'],cosmos_sdk_version:'0.45',tendermint_version:'0.34',cosmwasm_version:'0.27',cosmwasm_enabled:true,genesis:{genesis_url:'https://raw.githubusercontent.com/quasar-finance/questnet/main/v03/definitive-genesis.json'}},peers:{seeds:[{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'testnet-seeds.polkachu.com:18256',provider:'Polkachu'},{id:'babc3f3f7804933265ec9c40ad94f4da8e9e0017',address:'testnet-seed.rhinostake.com:18256',provider:'Rhino Stake'}],persistent_peers:[{id:'b62efa878cc765b90b69f854ddccceae14e6cb50',address:'65.109.31.114:2490',provider:''},{id:'ade3f1571422dd5f0cef7907ada5794bfa8bc248',address:'141.94.138.48:26661',provider:''},{id:'69614a94a585b798221b58b50a589e072222fa1d',address:'68.183.75.239:26656',provider:''},{id:'86ae83ea917e3c6a6ccdc63801aba6223ff2cb51',address:'78.47.110.180:26656',provider:''},{id:'7ed8e233e5fdb21bf70ac7f635130c7a8b0a4967',address:'185.209.228.188:26656',provider:''},{id:'7ef67269c8ec37ff8a538a5ae83ca670fd2da686',address:'137.184.192.123:26656',provider:''},{id:'8372d8ecb00d9c630407c3879c48718c3ec20114',address:'95.216.167.246:26656',provider:''},{id:'68978b7482fc525ce40b4e7db1a9404e1909446f',address:'65.109.85.221:8090',provider:''},{id:'bba6e85e3d1f1d9c127324e71a982ddd86af9a99',address:'88.99.3.158:11256',provider:''},{id:'8030efbc1270d4a85f58aa29ed8881ea8fc9de15',address:'49.12.213.67:26647',provider:''},{id:'2fd143577ed10c696b2cea079e3c3c96c6e3c0c2',address:'18.169.67.74:26656',provider:''},{id:'aeac7879e1b44bee75a465fa9ca4538633259ddd',address:'34.175.250.71:26656',provider:''},{id:'fc027e3bd4f9852f2dd28b9211a4745a57ccbc78',address:'34.175.72.151:26656',provider:''},{id:'20b4f9207cdc9d0310399f848f057621f7251846',address:'222.106.187.13:40606',provider:''},{id:'e8f8eed840b75db6c7924ce47250ea22b7d84d9a',address:'38.146.3.196:26656',provider:''},{id:'20bdc06141e4afefc65af41e8c08ee0ae39a7b68',address:'65.108.105.48:18256',provider:''},{id:'dcf78ede935a42361895928d35119ed4789abb9c',address:'65.109.85.225:8090',provider:''},{id:'598b2231accca2517c0dff839467846b48bbd53e',address:'65.109.90.178:18256',provider:''},{id:'24ee42238d0d73fab10531cab025a8631ecef1aa',address:'83.33.82.186:26656',provider:''}]},apis:{rpc:[{address:'https://quasar-testnet-rpc.polkachu.com/',provider:'Polkachu'},{address:'https://rpc-office.cosmostation.io/quasar-testnet/',provider:'Cosmostation'},{address:'https://questnet.quasar-finance.rhinostake.com/',provider:'Rhino Stake'}],rest:[{address:'https://quasar-testnet-api.polkachu.com/',provider:'Polkachu'},{address:'https://lcd-office.cosmostation.io/quasar-testnet/',provider:'Cosmostation'}],grpc:[{address:'quasar-testnet-grpc.polkachu.com:18290',provider:'Polkachu'}]},keywords:['testnet']},{$schema:'../../chain.schema.json',chain_name:'saagetestnet',status:'live',network_type:'testnet',pretty_name:'Saage-Testnet',chain_id:'saage-internal-testnet-1.3',bech32_prefix:'saage',daemon_name:'saaged',node_home:'$HOME/.saage',key_algos:['secp256k1'],slip44:909,fees:{fee_tokens:[{denom:'usaage',fixed_min_gas_price:0}]},codebase:{git_repo:'https://github.com/saage-tech/saage-testnet-1',recommended_version:'v0.4.1',compatible_versions:['v0.4.1'],genesis:{genesis_url:'https://github.com/saage-tech/network-testnet-1/blob/master/networks/saage-testnet-3/genesis.json'}},peers:{persistent_peers:[{id:'e1fc6bc72db2c38e55751d350a72eba699a58f2d',address:'44.203.79.229:26656',provider:'saage'},{id:'7ab5678c46266bdb294426de40e2b984e0af2917',address:'3.235.167.226:26656',provider:'saage'},{id:'ff661f7eacf9962bcd8a8aeb63bd8b9a3eee40bd',address:'52.202.79.213:26656',provider:'saage'},{id:'e0e5c42ce3d3c10359c566ffa217e2743048e8df',address:'54.226.144.104:26656',provider:'saage'}]},apis:{rpc:[{address:'https://sentry.testnet.saage.io:26657/',provider:'saage'}],grpc:[{address:'sentry.testnet.saage.io:9090',provider:'saage'}],rest:[{address:'https://sentry.testnet.saage.io:1317/',provider:'saage'}]},explorers:[{kind:'bigdipper',url:'http://blockexplorer-1.testnet.saage.io/',tx_page:'http://blockexplorer-1.testnet.saage.io/transactions/${txHash}'}]},{$schema:'../../chain.schema.json',chain_name:'secretnetworktestnet',status:'live',network_type:'testnet',pretty_name:'Secret Network',chain_id:'pulsar-2',bech32_prefix:'secret',daemon_name:'secretd',node_home:'$HOME/.secretd',key_algos:['secp256k1'],slip44:529,fees:{fee_tokens:[{denom:'uscrt',fixed_min_gas_price:0.1}]},codebase:{git_repo:'https://github.com/scrtlabs/SecretNetwork',recommended_version:'v1.3.1',binaries:{'linux/amd64':'https://github.com/scrtlabs/SecretNetwork/releases/download/v1.3.1/secretnetwork_1.3.1_testnet_goleveldb_amd64.deb'},compatible_versions:['v1.3.0','v1.3.1'],genesis:{genesis_url:'https://storage.googleapis.com/stakeordie-pulsar-2/genesis.json'}},peers:{seeds:[{id:'7a421a6f5f1618f7b6fdfbe4854985746f85d263',address:'108.62.104.102:26656',provider:'Community'},{id:'a72e376dca664bac55e8ce55a2e972a8ae2c995e',address:'144.202.126.98:26656',provider:'Community'},{id:'f95ba3da4a9eec559397f4b47b1539e24af6904c',address:'52.190.249.47:26656',provider:'Community'}]},apis:{rpc:[{address:'https://rpc.testnet.secretsaturn.net',provider:'𝕊ecret 𝕊aturn'},{address:'https://rpc.pulsar.scrttestnet.com',provider:'SCRT Testnet Committee'}],rest:[{address:'http://testnet.securesecrets.org:1317',provider:'Trivium | Trivium.Network'},{address:'https://lcd.testnet.secretsaturn.net',provider:'𝕊ecret 𝕊aturn'},{address:'https://api.pulsar.scrttestnet.com',provider:'SCRT Testnet Committee'}],'grpc-web':[{address:'https://grpc.testnet.secretsaturn.net',provider:'𝕊ecret 𝕊aturn'},{address:'https://grpc.pulsar.scrttestnet.com',provider:'SCRT Testnet Committee'}]},explorers:[{kind:'secret nodes',url:'https://secretnodes.com/secret/chains/pulsar-2',tx_page:'https://secretnodes.com/secret/chains/pulsar-2/transactions/${txHash}'},{kind:'ping.pub',url:'https://testnet.ping.pub/secret',tx_page:'https://testnet.ping.pub/secret/tx/${txHash}'}]},{$schema:'../../chain.schema.json',chain_name:'seitestnet',chain_id:'atlantic-1',pretty_name:'Sei Atlantic',status:'live',network_type:'testnet',bech32_prefix:'sei',daemon_name:'seid',node_home:'$HOME/.sei',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'usei',fixed_min_gas_price:0}]},codebase:{git_repo:'https://github.com/sei-protocol/sei-chain',recommended_version:'1.0.6beta',compatible_versions:['1.0.6beta'],genesis:{genesis_url:'https://raw.githubusercontent.com/sei-protocol/testnet/main/sei-incentivized-testnet/genesis.json'}},peers:{seeds:[{id:'f97a75fb69d3a5fe893dca7c8d238ccc0bd66a8f',address:'sei-testnet-seed.p2p.brocha.in:30514',provider:'Brochain'}]},apis:{rpc:[{address:'https://rpc-sei-test.ecostake.com',provider:'ecostake'},{address:'https://sei-testnet-rpc.brocha.in',provider:'Brochain'}],rest:[{address:'https://rest-sei-test.ecostake.com',provider:'ecostake'},{address:'https://sei-testnet-rest.brocha.in',provider:'Brochain'}]},explorers:[{kind:'explorers.guru',url:'https://sei.explorers.guru',tx_page:'https://sei.explorers.guru/transaction/${txHash}'},{kind:'Brochain',url:'https://testnet-explorer.brocha.in/sei',tx_page:'https://testnet-explorer.brocha.in/sei/tx/${txHash}'}]},{$schema:'../../chain.schema.json',chain_name:'stargazetestnet',status:'live',network_type:'testnet',website:'https://stargaze.zone/',pretty_name:'Stargaze',chain_id:'elgafar-1',bech32_prefix:'stars',daemon_name:'starsd',node_home:'$HOME/.starsd',slip44:118,fees:{fee_tokens:[{denom:'ustars',low_gas_price:0.03,average_gas_price:0.04,high_gas_price:0.05}]},codebase:{git_repo:'https://github.com/public-awesome/stargaze',recommended_version:'v7.0.0',compatible_versions:['v7.0.0'],cosmos_sdk_version:'0.45',tendermint_version:'0.34',cosmwasm_version:'0.28',cosmwasm_enabled:true,genesis:{genesis_url:'https://github.com/public-awesome/testnets/blob/main/elgafar-1/genesis/genesis.tar.gz'}},peers:{seeds:[],persistent_peers:[{id:'e31886cba90a06e165b0df18cc5c8ae015ecd23e',address:'209.159.152.82:26656',provider:'stargaze'},{id:'de00d2d65594b672469ecd65826a94ec1be80b9f',address:'208.73.205.226:26656',provider:'stargaze'}]},apis:{rpc:[{address:'https://rpc.elgafar-1.stargaze-apis.com',provider:'Stargaze Foundation'}],rest:[{address:'https://rest.elgafar-1.stargaze-apis.com',provider:'Stargaze Foundation'}],grpc:[{address:'http://grpc-1.elgafar-1.stargaze-apis.com:26660',provider:'Stargaze Foundation'},{address:'http://grpc-2.elgafar-1.stargaze-apis.com:26660',provider:'Stargaze Foundation'}]},explorers:[{kind:'ping.pub',url:'https://testnet-explorer.publicawesome.dev/stargaze',tx_page:'https://testnet-explorer.publicawesome.dev/stargaze/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'statesettestnet',status:'live',network_type:'testnet',pretty_name:'Stateset Testnet',chain_id:'stateset-1-testnet',bech32_prefix:'stateset',daemon_name:'statesetd',node_home:'$HOME/.statesetd',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'ustate',fixed_min_gas_price:0}]},codebase:{git_repo:'https://github.com/stateset/core',recommended_version:'v1.0.0',compatible_versions:['v1.0.0'],binaries:{'linux/amd64':'https://github.com/stateset/core/releases/download/v1.0.0/statesetd-1.0.0-linux-amd64','linux/arm64':'https://github.com/stateset/core/releases/download/v1.0.0/statesetd-1.0.0-linux-arm64','darwin/amd64':'https://github.com/stateset/core/releases/download/v1.0.0/statesetd-1.0.0-darwin-amd64','windows/amd64':'https://github.com/stateset/core/releases/download/v1.0.0/statesetd-1.0.0-windows-amd64.exe'},genesis:{genesis_url:'https://rpc.stateset.zone/genesis'}},peers:{seeds:[{id:'DBC49AA829D16329C1772F7EF76730939E606A41',address:'rpc.stateset.zone:26656',provider:'stateset'}],persistent_peers:[]},apis:{rpc:[{address:'https://rpc.stateset.zone/',provider:'stateset'}],rest:[{address:'https://rest-api.stateset.zone',provider:'stateset'}]},explorers:[{kind:'bigdipper',url:'https://explore.stateset.zone',tx_page:'https://explore.stateset.zone/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'terpnettestnet',status:'live',network_type:'testnet',pretty_name:'Terp-Network',chain_id:'athena-3',bech32_prefix:'terp',daemon_name:'terp',node_home:'$HOME/.terp',codebase:{git_repo:'github.com/terpnetwork/terp-core.git',recommended_version:'v0.2.0-3-g2b8926a',tendermint_version:'0.34.23',compatible_versions:['v0.2.0','v0.2.0-3-g2b8926a'],genesis:{genesis_url:'https://raw.githubusercontent.com/terpnetwork/test-net/master/athena-3/genesis.json'},binaries:{'linux/amd64':'https://github.com/terpnetwork/terp-core/archive/refs/tags/v0.2.0.tar.gz'}},peers:{seeds:[],persistent_peers:[{id:'15f5bc75be9746fd1f712ca046502cae8a0f6ce7',address:'terp-testnet.nodejumper.io:30656'},{id:'53053de2ae170c1dadf655a4a37a566f82823784',address:'154.12.228.149:26656'},{id:'012dbc19c31c99c8a6a074868d5b6e9f57f8e100',address:'67.205.150.113:26656'},{id:'13bdd13e5bac6feb41d6c1b14f64f87b79504f0c',address:'192.145.37.8:33656'},{id:'9448fd1948d37a7ab22da486f18ed34c942fbb5c',address:'209.126.81.240:11656'},{id:'61a00940fde08cc55824e48bdfb92ba938ba9c25',address:'198.244.228.17:11656'},{id:'f9d7b883594e651a45e91c49712151bf93322c08',address:'141.95.65.26:29456'},{id:'5d5bdd20b2bb2e4fc844b15ff8f5d640583b8ec8',address:'78.46.23.227:11656'},{id:'360c7c554ba16333b5901a2a341e466ad2c1db37',address:'146.19.24.52:33656'}]},apis:{rpc:[{address:'https://terp-testnet.nodejumper.io:443/'},{address:'https://terp-testnet.rpc.kjnodes.com:443/'},{address:'https://terp-testnet.rpc.kjnodes.com:443/'},{address:'https://terp-test-rpc.theamsolutions.info:443/'}],rest:[{address:'https://terp-testnet.nodejumper.io:1317/',provider:'NodeJumper.io'},{address:'https://api-t.terp.nodestake.top/',provider:'NodeJumper.io'}],grpc:[{address:'grpc-t.terp.nodestake.top/',provider:'nodestake'}]},explorers:[{kind:'Ping Pub',url:'https://explorer.kjnodes.com/terp-test',tx_page:'https://explorer.kjnodes.com/terp-test/tx/${txHash}'},{kind:'Ping Pub',url:'https://explorer.nodestake.top/terp-testnet',tx_page:'https://explorer.nodestake.top/terp-testnet/tx/${txHash}'}],slip44:118},{$schema:'../../chain.schema.json',chain_name:'ulastestnet',status:'live',network_type:'testnet',pretty_name:'ULAS',chain_id:'ulas',bech32_prefix:'ulas',daemon_name:'ulasd',node_home:'$HOME/.ulas',codebase:{git_repo:'https://github.com/ulasnetwork/ulas',recommended_version:'v0.0.1',compatible_versions:['v0.0.1'],genesis:{genesis_url:'https://raw.githubusercontent.com/ulasnetwork/chain-config/main/ulas/genesis.json'}},apis:{rpc:[{address:'http://65.49.204.199:26657',provider:'UlasNetwork'}],rest:[{address:'http://65.49.204.199:1317',provider:'UlasNetwork'}],grpc:[{address:'http://65.49.204.199:9090',provider:'UlasNetwork'}]},explorers:[{kind:'ulas-scan',url:'https://testnet-explorer.ulas.network',tx_page:'https://testnet-explorer.ulas.network/ulas/tx/${txHash}'}],slip44:118},{$schema:'../chain.schema.json',chain_name:'tgrade',status:'live',network_type:'mainnet',website:'https://tgrade.finance/',pretty_name:'Tgrade',chain_id:'tgrade-mainnet-1',bech32_prefix:'tgrade',daemon_name:'tgrade',node_home:'$HOME/.tgrade',key_algos:['secp256k1'],slip44:118,fees:{fee_tokens:[{denom:'utgd',fixed_min_gas_price:0.05,low_gas_price:0.05,average_gas_price:0.075,high_gas_price:0.1}]},codebase:{git_repo:'https://github.com/confio/tgrade',recommended_version:'v2.0.0',compatible_versions:['v2.0.0'],genesis:{genesis_url:'https://raw.githubusercontent.com/confio/tgrade-networks/main/mainnet-1/config/genesis.json'}},peers:{seeds:[{id:'0c3b7d5a4253216de01b8642261d4e1e76aee9d8',address:'45.76.202.195:26656',provider:'DSRV'}],persistent_peers:[{id:'0a63421f67d02e7fb823ea6d6ceb8acf758df24d',address:'142.132.226.137:26656',provider:'Confio'},{id:'4a319eead699418e974e8eed47c2de6332c3f825',address:'167.235.255.9:26656',provider:'Confio'},{id:'6918efd409684d64694cac485dbcc27dfeea4f38',address:'49.12.240.203:26656',provider:'Confio'}]},apis:{rpc:[{address:'https://rpc.mainnet-1.tgrade.confio.run',provider:'Confio'},{address:'https://rpc.tgrade.posthuman.digital',provider:'POSTHUMAN ꝏ DVS'}],rest:[{address:'https://api.mainnet-1.tgrade.confio.run',provider:'Confio'},{address:'https://lcd.tgrade.posthuman.digital',provider:'POSTHUMAN ꝏ DVS'}],grpc:[{address:'grpc.tgrade.posthuman.digital',provider:'POSTHUMAN ꝏ DVS'}]},explorers:[{kind:'aneka',url:'https://tgrade.aneka.io',tx_page:'https://tgrade.aneka.io/txs/${txHash}',account_page:'https://tgrade.aneka.io/accounts/${accountAddress}'},{kind:'mintscan',url:'https://www.mintscan.io/tgrade',tx_page:'https://www.mintscan.io/tgrade/txs/${txHash}',account_page:'https://www.mintscan.io/tgrade/account/${accountAddress}'}],logo_URIs:{png:'https://raw.githubusercontent.com/cosmos/chain-registry/master/tgrade/images/tgrade-logo-gradient_h.png'}},{$schema:'../chain.schema.json',chain_name:'thorchain',status:'live',network_type:'mainnet',website:'https://thorchain.org/',pretty_name:'THORChain',chain_id:'thorchain-mainnet-v1',bech32_prefix:'thor',daemon_name:'thord',node_home:'$HOME/.thornode',slip44:931,codebase:{git_repo:'https://gitlab.com/thorchain/thornode',recommended_version:'chaosnet-multichain',compatible_versions:['chaosnet-multichain'],genesis:{genesis_url:'https://rpc.thorchain.info/genesis'}},peers:{seeds:[{id:'eef0b258a711fc2be06da8eb25a53ebd8e16da62',address:'13.36.197.238:27146'},{id:'02041c659d8588f225b3352df8636e05dcd239f7',address:'18.169.114.61:27146'},{id:'88783fa86645c41aaaf031f31df2ee1d74413880',address:'18.202.205.93:27146'},{id:'00783ce232787999a7b3ccdfdbd493f371203e60',address:'51.136.76.139:27146'},{id:'c3f3f920a7003585ea6489344b41dd248ffa1e8f',address:'188.166.204.206:27146'},{id:'46040fd7b9450772c43fa406ef821d5eb3f79114',address:'134.209.136.64:27146'},{id:'7581fbca995486787ac3619cddf4137e110aff11',address:'143.198.247.31:27146'},{id:'dcd52d42ee465dd23b5806b30eca8df8e9e76c5d',address:'138.197.48.191:27146'},{id:'3a520c0e7c2af48d33cfb425af9ea9caa5917b1e',address:'18.214.28.114:27146'},{id:'48b675fbb3bf968ebee7e366d72bb5580aa8162e',address:'139.59.217.54:27146'},{id:'f1513684dd9d574715304bf3dd3b53fbcce65909',address:'34.145.173.217:27146'},{id:'2dde4b30bf913c9b9adecb6b835b2654b50c5698',address:'3.124.212.184:27146'},{id:'97ab3ae9df723ef763d90128663e7de0f0568dbe',address:'54.217.4.198:27146'},{id:'7c3b0a1fd70c5c0154e40f6e1276f8dd171117e5',address:'136.244.65.26:27146'},{id:'79b84e53bd5e4c1a3ef309346136cc7528ba0bdf',address:'64.225.81.243:27146'},{id:'d8628418e84acf19a330dddbed3173cfb4a020a9',address:'138.197.48.59:27146'},{id:'7c884bbc48abbadbb0fb85bfaa1dff9e94eac401',address:'143.244.211.46:27146'},{id:'8757a66381b4182f74809461fd8a3fcaf203a820',address:'34.212.187.195:27146'},{id:'6a35ed1a50ee76f72d1cd5c688f2e5f7fbc5da25',address:'52.228.231.228:27146'},{id:'5842bbfc26cf87c2ae3db418a835511ef2a39277',address:'3.96.249.116:27146'},{id:'83d3c662b1287bc9292d75b4909cff63b119cc78',address:'18.206.141.33:27146'},{id:'14d576eb4a1a5a2e319511abd5ce2c6e20f51c31',address:'13.36.138.187:27146'},{id:'107d49ada5acf1dbfcc27b3f5f387d035421ccca',address:'52.214.221.72:27146'},{id:'ca15ae8f0e17112b63786482cca300ff473f41fd',address:'3.140.128.35:27146'},{id:'5e89caf0ca79e0fb3371d5892efd96d66042d0d6',address:'157.90.34.75:27146'},{id:'1c88aa9509832a592453bd7d30736db055a279d1',address:'34.83.232.180:27146'},{id:'de7c36a34d8e9a48106488de1bac21b172c2dd49',address:'157.245.16.34:27146'},{id:'3de5f5bff746dc9349b044d83ccb906924b8cf03',address:'188.166.138.88:27146'},{id:'3ede6d36ede3b7e1dec522c827ab6db94bfae749',address:'34.145.160.5:27146'},{id:'58a28719fdd46ea629859d85a1d5bc6a6363c185',address:'159.65.212.234:27146'},{id:'70dd6252ff95d8af7f3f488fdb98dde5d467213b',address:'18.117.49.201:27146'},{id:'6c7d780bb7384142f6943543ed4c3ba537f4a411',address:'138.197.59.244:27146'},{id:'523a3df9384190d1b30ff55d1783b4baed32165c',address:'18.208.113.188:27146'},{id:'c64b58f2498a29330e4927ba90dd6fb2955a7a56',address:'159.89.210.106:27146'},{id:'e592368bf73a32dbcc28def417f2fdb151f26da6',address:'3.139.117.117:27146'},{id:'19ab508b32a6518a450058c2c7a99b7a5cc4299f',address:'13.237.27.250:27146'},{id:'4e41bd4f8d1ec95ff4a305f0739c82e818664c12',address:'135.181.58.7:27146'},{id:'2d25606076036716a31611185d39880fe8237e97',address:'3.230.67.253:27146'},{id:'5a6e66f9f6c84d55de8f1170086f28d69d242ad4',address:'78.141.210.66:27146'},{id:'f296c1e1b03ab875925208aabb5b9c5b1626427e',address:'52.32.91.52:27146'}]},apis:{rpc:[{address:'https://rpc.thorchain.info',provider:'thorchain'}],rest:[{address:'https://thornode.thorchain.info',provider:'thorchain'}],sidechains_rpc:[{address:'https://btc.thorchain.info',provider:'btc'},{address:'https://bch.thorchain.info',provider:'bch'},{address:'https://ltc.thorchain.info',provider:'ltc'},{address:'https://bnb.thorchain.info',provider:'bnb'},{address:'https://eth.thorchain.info',provider:'eth'}]},explorers:[{kind:'THORChain explorer',url:'https://thorchain.net',tx_page:'https://thorchain.net/#/txs/${txHash}'},{kind:'viewblock',url:'https://viewblock.io/thorchain',tx_page:'https://viewblock.io/thorchain/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'umee',status:'live',network_type:'mainnet',website:'https://www.umee.cc/',pretty_name:'Umee',chain_id:'umee-1',bech32_prefix:'umee',daemon_name:'umeed',node_home:'$HOME/.umee',slip44:118,fees:{fee_tokens:[{denom:'uumee',fixed_min_gas_price:0.001}]},codebase:{git_repo:'https://github.com/umee-network/umee',recommended_version:'v3.3.0',compatible_versions:['v3.3.0'],binaries:{'linux/amd64':'https://github.com/umee-network/umee/releases/download/v3.3.0/umeed-v3.3.0-linux-amd64'},genesis:{genesis_url:'https://raw.githubusercontent.com/umee-network/mainnet/main/genesis.json'}},peers:{seeds:[{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'umee.mainnet.seed.autostake.net:26756',provider:'AutoStake 🛡️ Slash Protected'},{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:13656',provider:'Polkachu'},{id:'86bd5cb6e762f673f1706e5889e039d5406b4b90',address:'umee.seed.node75.org:10656',provider:'Pro-Nodes75'}],persistent_peers:[{id:'ade4d8bc8cbe014af6ebdf3cb7b1e9ad36f412c0',address:'seeds.polkachu.com:13656',provider:'Polkachu'},{id:'ebc272824924ea1a27ea3183dd0b9ba713494f83',address:'umee.mainnet.peer.autostake.net:26756',provider:'AutoStake 🛡️ Slash Protected'}]},apis:{rpc:[{address:'https://rpc.barnacle.mainnet.network.umee.cc',provider:'umee Foundation'},{address:'https://umee-rpc.polkachu.com',provider:'Polkachu'},{address:'https://rpc-umee-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'http://rpc-umee-0.node75.org:26657',provider:'Pro-Nodes75'}],rest:[{address:'https://api.barnacle.mainnet.network.umee.cc',provider:'umee Foundation'},{address:'https://api-umee-ia.cosmosia.notional.ventures/',provider:'Notional'},{address:'https://umee-api.polkachu.com',provider:'Polkachu'},{address:'https://umee.mainnet.lcd.autostake.net:443',provider:'AutoStake 🛡️ Slash Protected'}],grpc:[{address:'grpc-umee-ia.cosmosia.notional.ventures:443',provider:'Notional'},{address:'umee-grpc.polkachu.com:13690',provider:'Polkachu'}]},explorers:[{kind:'mintscan',url:'https://www.mintscan.io/umee/',tx_page:'https://www.mintscan.io/umee/txs/${txHash}',account_page:'https://www.mintscan.io/umee/account/${accountAddress}'},{kind:'ping.pub',url:'https://ping.pub/umee',tx_page:'https://ping.pub/umee/tx/${txHash}'},{kind:'explorers.guru',url:'https://umee.explorers.guru',tx_page:'https://umee.explorers.guru/transaction/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/umee',tx_page:'https://atomscan.com/umee/transactions/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'unification',status:'live',network_type:'mainnet',website:'https://unification.com/',pretty_name:'Unification',chain_id:'FUND-MainNet-2',bech32_prefix:'und',daemon_name:'und',node_home:'$HOME/.und_mainchain',slip44:5555,codebase:{git_repo:'https://github.com/unification-com/mainchain',recommended_version:'v1.6.3',compatible_versions:['v1.6.3'],binaries:{'linux/amd64':'https://github.com/unification-com/mainchain/releases/download/v1.6.3/und_v1.6.3_linux_x86_64.tar.gz'},genesis:{genesis_url:'https://raw.githubusercontent.com/unification-com/mainnet/master/latest/genesis.json > $HOME/.und_mainchain/config/genesis.json'}},peers:{seeds:[{id:'0c2b65bc604a18a490f5f55bb7b4140cfb512ced',address:'seed1.unification.io:26656'},{id:'e66e0f89af19da09f676c85b262d591b8c2bb9d8',address:'seed2.unification.io:26656'}],persistent_peers:[]},apis:{rpc:[{address:'https://rpc1.unification.io:443',provider:'Unification'},{address:'https://rpc.unification.chainmasters.ninja/',provider:'Chainmasters'}],rest:[{address:'https://rest.unification.io',provider:'Unification'},{address:'https://rest.unification.chainmasters.ninja/',provider:'Chainmasters'}],grpc:[{address:'https://grpc.unification.io',provider:'Unification'}]},explorers:[{kind:'bigdipper',url:'https://explorer.unification.io/',tx_page:'https://explorer.unification.io/transactions/${txHash}'},{kind:'ping.pub',url:'https://explorer.unification.chainmasters.ninja/unification',tx_page:'https://explorer.unification.chainmasters.ninja/unification/tx/${txHash}'}]},{$schema:'../chain.schema.json',chain_name:'vidulum',status:'live',network_type:'mainnet',website:'https://vidulum.app/',pretty_name:'Vidulum',chain_id:'vidulum-1',bech32_prefix:'vdl',daemon_name:'vidulumd',node_home:'$HOME/.vidulum',key_algos:['secp256k1'],slip44:370,fees:{fee_tokens:[{denom:'uvdl',fixed_min_gas_price:0}]},codebase:{git_repo:'https://github.com/vidulum/mainnet',recommended_version:'v1.2.0',compatible_versions:['v1.2.0'],binaries:{'linux/amd64':'https://github.com/vidulum/mainnet/releases/download/v1.2.0/vidulum_linux_amd64.tar.gz','linux/arm64':'https://github.com/vidulum/mainnet/releases/download/v1.2.0/vidulum_linux_arm64.tar.gz','darwin/amd64':'https://github.com/vidulum/mainnet/releases/download/v1.2.0/vidulum_darwin_amd64.tar.gz','windows/amd64':'https://github.com/vidulum/mainnet/releases/download/v1.2.0/vidulum_windows_amd64.zip'},genesis:{genesis_url:'https://raw.githubusercontent.com/vidulum/mainnet/main/genesis.json'}},peers:{seeds:[{id:'883ec7d5af7222c206674c20c997ccc5c242b38b',address:'ec2-3-82-120-39.compute-1.amazonaws.com:26656',provider:'notional'}],persistent_peers:[{id:'3bf3d98dfd4000dd5ff8189882a9f96848b99b87',address:'137.220.60.196:26656',provider:'vidulum'},{id:'7a44ea6ecb59b0e4bd01b58a75163ec64b164bb4',address:'63.210.148.24:26656',provider:'vidulum'},{id:'52051fef449e76eb399966312f523e8e5e27490b',address:'95.217.118.211:26656',provider:'minerpool'},{id:'cae7d9d21c1752300277eab72d861b0c6638b2e3',address:'164.68.119.151:26656',provider:'bluebird'},{id:'209688f5bccb88f6397a97cc11ab545a014aa559',address:'137.184.92.115:26656',provider:'1square'}]},apis:{rpc:[{address:'https://mainnet-rpc.vidulum.app/',provider:'vidulum'},{address:'https://rpc-vidulum-ia.cosmosia.notional.ventures/',provider:'Notional'}],rest:[{address:'https://mainnet-lcd.vidulum.app',provider:'vidulum'},{address:'https://api-vidulum-ia.cosmosia.notional.ventures/',provider:'Notional'}],grpc:[{address:'grpc-vidulum-ia.cosmosia.notional.ventures:443',provider:'Notional'}]},explorers:[{kind:'ping.pub',url:'https://explorers.vidulum.app/vidulum',tx_page:'https://explorers.vidulum.app/vidulum/tx/${txHash}'},{kind:'ping.pub',url:'https://ping.pub/vidulum',tx_page:'https://ping.pub/vidulum/tx/${txHash}'},{kind:'atomscan',url:'https://atomscan.com/vidulum',tx_page:'https://atomscan.com/vidulum/transactions/${txHash}'}]}];var _default=chains;exports["default"]=_default;

/***/ }),

/***/ 6026:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var ibc = [{
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'acrechain',
    client_id: '07-tendermint-0',
    connection_id: 'connection-0'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-2316',
    connection_id: 'connection-1814'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-490',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'agoric',
    client_id: '07-tendermint-11',
    connection_id: 'connection-14'
  },
  chain_2: {
    chain_name: 'axelar',
    client_id: '07-tendermint-69',
    connection_id: 'connection-51'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-9',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-41',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'agoric',
    client_id: '07-tendermint-6',
    connection_id: 'connection-8'
  },
  chain_2: {
    chain_name: 'cosmoshub',
    client_id: '07-tendermint-927',
    connection_id: 'connection-649'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-5',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-405',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'agoric',
    client_id: '07-tendermint-2',
    connection_id: 'connection-2'
  },
  chain_2: {
    chain_name: 'crescent',
    client_id: '07-tendermint-19',
    connection_id: 'connection-14'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-2',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-11',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'agoric',
    client_id: '07-tendermint-4',
    connection_id: 'connection-7'
  },
  chain_2: {
    chain_name: 'gravitybridge',
    client_id: '07-tendermint-173',
    connection_id: 'connection-154'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-4',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-91',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'agoric',
    client_id: '07-tendermint-1',
    connection_id: 'connection-1'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-2109',
    connection_id: 'connection-1649'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-320',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'akash',
    client_id: '07-tendermint-53',
    connection_id: 'connection-29'
  },
  chain_2: {
    chain_name: 'cosmoshub',
    client_id: '07-tendermint-385',
    connection_id: 'connection-339'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-17',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-184',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'akash',
    client_id: '07-tendermint-48',
    connection_id: 'connection-23'
  },
  chain_2: {
    chain_name: 'cryptoorgchain',
    client_id: '07-tendermint-65',
    connection_id: 'connection-38'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-14',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-21',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1'
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'akash',
    client_id: '07-tendermint-44',
    connection_id: 'connection-19'
  },
  chain_2: {
    chain_name: 'irisnet',
    client_id: '07-tendermint-23',
    connection_id: 'connection-16'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-11',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-9',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'akash',
    client_id: '07-tendermint-84',
    connection_id: 'connection-58'
  },
  chain_2: {
    chain_name: 'juno',
    client_id: '07-tendermint-80',
    connection_id: 'connection-47'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-35',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-29',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'akash',
    client_id: '07-tendermint-18',
    connection_id: 'connection-11'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-0',
    connection_id: 'connection-2'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-9',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'akash',
    client_id: '07-tendermint-15',
    connection_id: 'connection-8'
  },
  chain_2: {
    chain_name: 'persistence',
    client_id: '07-tendermint-5',
    connection_id: 'connection-4'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-6',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-5',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'akash',
    client_id: '07-tendermint-47',
    connection_id: 'connection-22'
  },
  chain_2: {
    chain_name: 'regen',
    client_id: '07-tendermint-20',
    connection_id: 'connection-9'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-13',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-7',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'akash',
    client_id: '07-tendermint-102',
    connection_id: 'connection-69'
  },
  chain_2: {
    chain_name: 'secretnetwork',
    client_id: '07-tendermint-47',
    connection_id: 'connection-28'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-43',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-21',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      properties: 'privacy'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'akash',
    client_id: '07-tendermint-45',
    connection_id: 'connection-21'
  },
  chain_2: {
    chain_name: 'sentinel',
    client_id: '07-tendermint-42',
    connection_id: 'connection-27'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-12',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-6',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'akash',
    client_id: '07-tendermint-61',
    connection_id: 'connection-36'
  },
  chain_2: {
    chain_name: 'sifchain',
    client_id: '07-tendermint-11',
    connection_id: 'connection-2'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-24',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-2',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'akash',
    client_id: '07-tendermint-59',
    connection_id: 'connection-35'
  },
  chain_2: {
    chain_name: 'starname',
    client_id: '07-tendermint-29',
    connection_id: 'connection-18'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-23',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-6',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'assetmantle',
    client_id: '07-tendermint-22',
    connection_id: 'connection-4'
  },
  chain_2: {
    chain_name: 'juno',
    client_id: '07-tendermint-167',
    connection_id: 'connection-113'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-2',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-83',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'assetmantle',
    client_id: '07-tendermint-42',
    connection_id: 'connection-22'
  },
  chain_2: {
    chain_name: 'okexchain',
    client_id: '07-tendermint-92',
    connection_id: 'connection-35'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-14',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-30',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'assetmantle',
    client_id: '07-tendermint-0',
    connection_id: 'connection-0'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1923',
    connection_id: 'connection-1498'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-232',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'axelar',
    client_id: '07-tendermint-31',
    connection_id: 'connection-17'
  },
  chain_2: {
    chain_name: 'crescent',
    client_id: '07-tendermint-6',
    connection_id: 'connection-4'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-7',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-4',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'crescent'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'axelar',
    client_id: '07-tendermint-25',
    connection_id: 'connection-14'
  },
  chain_2: {
    chain_name: 'juno',
    client_id: '07-tendermint-150',
    connection_id: 'connection-97'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-4',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-71',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'axelar',
    client_id: '07-tendermint-23',
    connection_id: 'connection-13'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1862',
    connection_id: 'connection-1453'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-3',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-208',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'axelar',
    client_id: '07-tendermint-40',
    connection_id: 'connection-22'
  },
  chain_2: {
    chain_name: 'secretnetwork',
    client_id: '07-tendermint-44',
    connection_id: 'connection-26'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-12',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-20',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      properties: 'privacy'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'bandchain',
    client_id: '07-tendermint-124',
    connection_id: 'connection-107'
  },
  chain_2: {
    chain_name: 'comdex',
    client_id: '07-tendermint-81',
    connection_id: 'connection-48'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-96',
      port_id: 'oracle'
    },
    chain_2: {
      channel_id: 'channel-43',
      port_id: 'bandoracleV1'
    },
    ordering: 'unordered',
    version: 'bandchain-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'bandchain',
    client_id: '07-tendermint-94',
    connection_id: 'connection-91'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1743',
    connection_id: 'connection-1345'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-83',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-148',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'beezee',
    client_id: '07-tendermint-2',
    connection_id: 'connection-0'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-2154',
    connection_id: 'connection-1672'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-340',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'bitcanna',
    client_id: '07-tendermint-0',
    connection_id: 'connection-19'
  },
  chain_2: {
    chain_name: 'bitsong',
    client_id: '07-tendermint-1237',
    connection_id: 'connection-1132'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-42',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'bitcanna',
    client_id: '07-tendermint-12',
    connection_id: 'connection-11'
  },
  chain_2: {
    chain_name: 'juno',
    client_id: '07-tendermint-110',
    connection_id: 'connection-70'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-10',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-50',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'bitcanna',
    client_id: '07-tendermint-1',
    connection_id: 'connection-1'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1499',
    connection_id: 'connection-1167'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-51',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'bitsong',
    client_id: '07-tendermint-9',
    connection_id: 'connection-9'
  },
  chain_2: {
    chain_name: 'juno',
    client_id: '07-tendermint-33',
    connection_id: 'connection-26'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-5',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-17',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'bitsong',
    client_id: '07-tendermint-0',
    connection_id: 'connection-0'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1551',
    connection_id: 'connection-1216'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-73',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'bostrom',
    client_id: '07-tendermint-5',
    connection_id: 'connection-2'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1597',
    connection_id: 'connection-1255'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-2',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-95',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'carbon',
    client_id: '07-tendermint-3',
    connection_id: 'connection-1'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1808',
    connection_id: 'connection-1412'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-188',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cerberus',
    client_id: '07-tendermint-1',
    connection_id: 'connection-1'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1875',
    connection_id: 'connection-1460'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-212',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cheqd',
    client_id: '07-tendermint-0',
    connection_id: 'connection-0'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1615',
    connection_id: 'connection-1268'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-108',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'chihuahua',
    client_id: '07-tendermint-54',
    connection_id: 'connection-30'
  },
  chain_2: {
    chain_name: 'juno',
    client_id: '07-tendermint-79',
    connection_id: 'connection-46'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-11',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-28',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'chihuahua',
    client_id: '07-tendermint-85',
    connection_id: 'connection-54'
  },
  chain_2: {
    chain_name: 'okexchain',
    client_id: '07-tendermint-5',
    connection_id: 'connection-6'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-24',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-5',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'chihuahua',
    client_id: '07-tendermint-45',
    connection_id: 'connection-25'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1666',
    connection_id: 'connection-1278'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-7',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-113',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'chihuahua',
    client_id: '07-tendermint-70',
    connection_id: 'connection-38'
  },
  chain_2: {
    chain_name: 'secretnetwork',
    client_id: '07-tendermint-27',
    connection_id: 'connection-13'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-16',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-11',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      properties: 'privacy'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'comdex',
    client_id: '07-tendermint-30',
    connection_id: 'connection-19'
  },
  chain_2: {
    chain_name: 'juno',
    client_id: '07-tendermint-92',
    connection_id: 'connection-55'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-18',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-36',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'comdex',
    client_id: '07-tendermint-1',
    connection_id: 'connection-1'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1587',
    connection_id: 'connection-1243'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-87',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cosmoshub',
    client_id: '07-tendermint-724',
    connection_id: 'connection-538'
  },
  chain_2: {
    chain_name: 'crescent',
    client_id: '07-tendermint-3',
    connection_id: 'connection-1'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-326',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'crescent'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cosmoshub',
    client_id: '07-tendermint-389',
    connection_id: 'connection-342'
  },
  chain_2: {
    chain_name: 'cryptoorgchain',
    client_id: '07-tendermint-735',
    connection_id: 'connection-220'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-187',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-27',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cosmoshub',
    client_id: '07-tendermint-432',
    connection_id: 'connection-365'
  },
  chain_2: {
    chain_name: 'emoney',
    client_id: '07-tendermint-8',
    connection_id: 'connection-3'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-202',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cosmoshub',
    client_id: '07-tendermint-434',
    connection_id: 'connection-368'
  },
  chain_2: {
    chain_name: 'impacthub',
    client_id: '07-tendermint-9',
    connection_id: 'connection-9'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-204',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cosmoshub',
    client_id: '07-tendermint-384',
    connection_id: 'connection-338'
  },
  chain_2: {
    chain_name: 'irisnet',
    client_id: '07-tendermint-31',
    connection_id: 'connection-22'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-182',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-12',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cosmoshub',
    client_id: '07-tendermint-439',
    connection_id: 'connection-372'
  },
  chain_2: {
    chain_name: 'juno',
    client_id: '07-tendermint-3',
    connection_id: 'connection-2'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-207',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cosmoshub',
    client_id: '07-tendermint-468',
    connection_id: 'connection-386'
  },
  chain_2: {
    chain_name: 'likecoin',
    client_id: '07-tendermint-24',
    connection_id: 'connection-13'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-217',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-5',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cosmoshub',
    client_id: '07-tendermint-259',
    connection_id: 'connection-257'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1',
    connection_id: 'connection-1'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-141',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cosmoshub',
    client_id: '07-tendermint-391',
    connection_id: 'connection-344'
  },
  chain_2: {
    chain_name: 'persistence',
    client_id: '07-tendermint-36',
    connection_id: 'connection-30'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-190',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-24',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cosmoshub',
    client_id: '07-tendermint-994',
    connection_id: 'connection-693'
  },
  chain_2: {
    chain_name: 'planq',
    client_id: '07-tendermint-5',
    connection_id: 'connection-3'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-446',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-2',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cosmoshub',
    client_id: '07-tendermint-926',
    connection_id: 'connection-648'
  },
  chain_2: {
    chain_name: 'point',
    client_id: '07-tendermint-1',
    connection_id: 'connection-0'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-404',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cosmoshub',
    client_id: '07-tendermint-386',
    connection_id: 'connection-340'
  },
  chain_2: {
    chain_name: 'regen',
    client_id: '07-tendermint-27',
    connection_id: 'connection-24'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-185',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-11',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cosmoshub',
    client_id: '07-tendermint-492',
    connection_id: 'connection-401'
  },
  chain_2: {
    chain_name: 'secretnetwork',
    client_id: '07-tendermint-1',
    connection_id: 'connection-0'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-235',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      properties: 'privacy'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cosmoshub',
    client_id: '07-tendermint-388',
    connection_id: 'connection-341'
  },
  chain_2: {
    chain_name: 'sentinel',
    client_id: '07-tendermint-58',
    connection_id: 'connection-33'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-186',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-12',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cosmoshub',
    client_id: '07-tendermint-395',
    connection_id: 'connection-347'
  },
  chain_2: {
    chain_name: 'sifchain',
    client_id: '07-tendermint-0',
    connection_id: 'connection-0'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-192',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cosmoshub',
    client_id: '07-tendermint-326',
    connection_id: 'connection-300'
  },
  chain_2: {
    chain_name: 'starname',
    client_id: '07-tendermint-6',
    connection_id: 'connection-6'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-158',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cosmoshub',
    client_id: '07-tendermint-913',
    connection_id: 'connection-635'
  },
  chain_2: {
    chain_name: 'stride',
    client_id: '07-tendermint-0',
    connection_id: 'connection-0'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-391',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cosmoshub',
    client_id: '07-tendermint-611',
    connection_id: 'connection-473'
  },
  chain_2: {
    chain_name: 'umee',
    client_id: '07-tendermint-9',
    connection_id: 'connection-1'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-288',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'crescent',
    client_id: '07-tendermint-4',
    connection_id: 'connection-2'
  },
  chain_2: {
    chain_name: 'gravitybridge',
    client_id: '07-tendermint-100',
    connection_id: 'connection-102'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-2',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-62',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'crescent'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'crescent',
    client_id: '07-tendermint-26',
    connection_id: 'connection-29'
  },
  chain_2: {
    chain_name: 'injective',
    client_id: '07-tendermint-132',
    connection_id: 'connection-105'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-23',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-90',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'crescent'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'crescent',
    client_id: '07-tendermint-17',
    connection_id: 'connection-12'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-2083',
    connection_id: 'connection-1624'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-9',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-297',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'crescent',
    client_id: '07-tendermint-18',
    connection_id: 'connection-13'
  },
  chain_2: {
    chain_name: 'secretnetwork',
    client_id: '07-tendermint-53',
    connection_id: 'connection-31'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-10',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-24',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'crescent',
      properties: 'privacy'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'crescent',
    client_id: '07-tendermint-24',
    connection_id: 'connection-27'
  },
  chain_2: {
    chain_name: 'stargaze',
    client_id: '07-tendermint-180',
    connection_id: 'connection-114'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-21',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-51',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'crescent'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'crescent',
    client_id: '07-tendermint-38',
    connection_id: 'connection-39'
  },
  chain_2: {
    chain_name: 'stride',
    client_id: '07-tendermint-44',
    connection_id: 'connection-30'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-29',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-51',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'crescent'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'crescent',
    client_id: '07-tendermint-36',
    connection_id: 'connection-37'
  },
  chain_2: {
    chain_name: 'terra2',
    client_id: '07-tendermint-68',
    connection_id: 'connection-57'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-27',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-37',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'crescent'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cryptoorgchain',
    client_id: '07-tendermint-1136',
    connection_id: 'connection-260'
  },
  chain_2: {
    chain_name: 'evmos',
    client_id: '07-tendermint-85',
    connection_id: 'connection-43'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-57',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-31',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cryptoorgchain',
    client_id: '07-tendermint-650',
    connection_id: 'connection-197'
  },
  chain_2: {
    chain_name: 'irisnet',
    client_id: '07-tendermint-32',
    connection_id: 'connection-23'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-23',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-13',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cryptoorgchain',
    client_id: '07-tendermint-33',
    connection_id: 'connection-12'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-4',
    connection_id: 'connection-5'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-10',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-5',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cryptoorgchain',
    client_id: '07-tendermint-61',
    connection_id: 'connection-34'
  },
  chain_2: {
    chain_name: 'persistence',
    client_id: '07-tendermint-24',
    connection_id: 'connection-17'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-17',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-11',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cryptoorgchain',
    client_id: '07-tendermint-732',
    connection_id: 'connection-218'
  },
  chain_2: {
    chain_name: 'regen',
    client_id: '07-tendermint-28',
    connection_id: 'connection-26'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-25',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-12',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cryptoorgchain',
    client_id: '07-tendermint-63',
    connection_id: 'connection-36'
  },
  chain_2: {
    chain_name: 'sentinel',
    client_id: '07-tendermint-43',
    connection_id: 'connection-28'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-19',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-7',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cryptoorgchain',
    client_id: '07-tendermint-1103',
    connection_id: 'connection-239'
  },
  chain_2: {
    chain_name: 'sifchain',
    client_id: '07-tendermint-20',
    connection_id: 'connection-10'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-33',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-9',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cryptoorgchain',
    client_id: '07-tendermint-66',
    connection_id: 'connection-39'
  },
  chain_2: {
    chain_name: 'starname',
    client_id: '07-tendermint-16',
    connection_id: 'connection-11'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-22',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-3',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'cudos',
    client_id: '07-tendermint-2084',
    connection_id: 'connection-1626'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1',
    connection_id: 'connection-1'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-298',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'decentr',
    client_id: '07-tendermint-6',
    connection_id: 'connection-1'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1798',
    connection_id: 'connection-1403'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-181',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'desmos',
    client_id: '07-tendermint-6',
    connection_id: 'connection-4'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1726',
    connection_id: 'connection-1315'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-2',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-135',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'dig',
    client_id: '07-tendermint-17',
    connection_id: 'connection-10'
  },
  chain_2: {
    chain_name: 'juno',
    client_id: '07-tendermint-100',
    connection_id: 'connection-62'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-2',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-37',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'dig',
    client_id: '07-tendermint-13',
    connection_id: 'connection-8'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1714',
    connection_id: 'connection-1304'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-128',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'dyson',
    client_id: '07-tendermint-2',
    connection_id: 'connection-5'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-2407',
    connection_id: 'connection-1895'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-2',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-526',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'echelon',
    client_id: '07-tendermint-107',
    connection_id: 'connection-29'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-2268',
    connection_id: 'connection-1760'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-11',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-403',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'emoney',
    client_id: '07-tendermint-10',
    connection_id: 'connection-4'
  },
  chain_2: {
    chain_name: 'irisnet',
    client_id: '07-tendermint-46',
    connection_id: 'connection-34'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-2',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-23',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'emoney',
    client_id: '07-tendermint-51',
    connection_id: 'connection-20'
  },
  chain_2: {
    chain_name: 'juno',
    client_id: '07-tendermint-24',
    connection_id: 'connection-16'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-15',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-9',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'emoney',
    client_id: '07-tendermint-7',
    connection_id: 'connection-2'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1447',
    connection_id: 'connection-1132'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-37',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'evmos',
    client_id: '07-tendermint-0',
    connection_id: 'connection-0'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1840',
    connection_id: 'connection-1440'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-204',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'evmos',
    client_id: '07-tendermint-50',
    connection_id: 'connection-19'
  },
  chain_2: {
    chain_name: 'secretnetwork',
    client_id: '07-tendermint-42',
    connection_id: 'connection-24'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-15',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-18',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      properties: 'privacy'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'evmos',
    client_id: '07-tendermint-77',
    connection_id: 'connection-33'
  },
  chain_2: {
    chain_name: 'stride',
    client_id: '07-tendermint-8',
    connection_id: 'connection-7'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-25',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-9',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'evmos',
    client_id: '07-tendermint-88',
    connection_id: 'connection-46'
  },
  chain_2: {
    chain_name: 'tgrade',
    client_id: '07-tendermint-8',
    connection_id: 'connection-11'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-34',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-9',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'fetchhub',
    client_id: '07-tendermint-10',
    connection_id: 'connection-10'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1913',
    connection_id: 'connection-1490'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-10',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-229',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'galaxy',
    client_id: '07-tendermint-0',
    connection_id: 'connection-0'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1928',
    connection_id: 'connection-1500'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-236',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'genesisl1',
    client_id: '07-tendermint-1',
    connection_id: 'connection-1'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1983',
    connection_id: 'connection-1539'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-253',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'gravitybridge',
    client_id: '07-tendermint-13',
    connection_id: 'connection-13'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1737',
    connection_id: 'connection-1340'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-10',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-144',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'gravitybridge',
    client_id: '07-tendermint-39',
    connection_id: 'connection-50'
  },
  chain_2: {
    chain_name: 'persistence',
    client_id: '07-tendermint-51',
    connection_id: 'connection-49'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-24',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-38',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'gravitybridge',
    client_id: '07-tendermint-195',
    connection_id: 'connection-165'
  },
  chain_2: {
    chain_name: 'planq',
    client_id: '07-tendermint-1',
    connection_id: 'connection-0'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-102',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'gravitybridge',
    client_id: '07-tendermint-140',
    connection_id: 'connection-139'
  },
  chain_2: {
    chain_name: 'secretnetwork',
    client_id: '07-tendermint-40',
    connection_id: 'connection-23'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-79',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-17',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      properties: 'privacy'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'gravitybridge',
    client_id: '07-tendermint-190',
    connection_id: 'connection-161'
  },
  chain_2: {
    chain_name: 'unification',
    client_id: '07-tendermint-4',
    connection_id: 'connection-4'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-98',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-2',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'impacthub',
    client_id: '07-tendermint-12',
    connection_id: 'connection-12'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1451',
    connection_id: 'connection-1137'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-4',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-38',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'impacthub',
    client_id: '07-tendermint-25',
    connection_id: 'connection-25'
  },
  chain_2: {
    chain_name: 'sifchain',
    client_id: '07-tendermint-39',
    connection_id: 'connection-18'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-11',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-15',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'imversed',
    client_id: '07-tendermint-1',
    connection_id: 'connection-1'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-2366',
    connection_id: 'connection-1866'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-517',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'injective',
    client_id: '07-tendermint-19',
    connection_id: 'connection-14'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1703',
    connection_id: 'connection-1298'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-8',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-122',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'injective',
    client_id: '07-tendermint-97',
    connection_id: 'connection-83'
  },
  chain_2: {
    chain_name: 'secretnetwork',
    client_id: '07-tendermint-22',
    connection_id: 'connection-8'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-88',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-23',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      properties: 'privacy'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'injective',
    client_id: '07-tendermint-135',
    connection_id: 'connection-108'
  },
  chain_2: {
    chain_name: 'sommelier',
    client_id: '07-tendermint-4',
    connection_id: 'connection-1'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-93',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'irisnet',
    client_id: '07-tendermint-5',
    connection_id: 'connection-4'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-5',
    connection_id: 'connection-6'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-3',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-6',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'irisnet',
    client_id: '07-tendermint-34',
    connection_id: 'connection-25'
  },
  chain_2: {
    chain_name: 'persistence',
    client_id: '07-tendermint-31',
    connection_id: 'connection-25'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-15',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-19',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'irisnet',
    client_id: '07-tendermint-35',
    connection_id: 'connection-26'
  },
  chain_2: {
    chain_name: 'regen',
    client_id: '07-tendermint-25',
    connection_id: 'connection-22'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-16',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-9',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'irisnet',
    client_id: '07-tendermint-36',
    connection_id: 'connection-28'
  },
  chain_2: {
    chain_name: 'sentinel',
    client_id: '07-tendermint-54',
    connection_id: 'connection-30'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-17',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-9',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'irisnet',
    client_id: '07-tendermint-42',
    connection_id: 'connection-30'
  },
  chain_2: {
    chain_name: 'sifchain',
    client_id: '07-tendermint-19',
    connection_id: 'connection-9'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-19',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-8',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'irisnet',
    client_id: '07-tendermint-44',
    connection_id: 'connection-32'
  },
  chain_2: {
    chain_name: 'starname',
    client_id: '07-tendermint-41',
    connection_id: 'connection-27'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-21',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-11',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'jackal',
    client_id: '07-tendermint-2',
    connection_id: 'connection-0'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-2273',
    connection_id: 'connection-1762'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-412',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'juno',
    client_id: '07-tendermint-0',
    connection_id: 'connection-0'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1457',
    connection_id: 'connection-1142'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-42',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }, {
    chain_1: {
      channel_id: 'channel-47',
      port_id: 'wasm.juno1v4887y83d6g28puzvt8cl0f3cdhd3y6y9mpysnsp3k8krdm7l6jqgm0rkn'
    },
    chain_2: {
      channel_id: 'channel-169',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'juno',
    client_id: '07-tendermint-89',
    connection_id: 'connection-51'
  },
  chain_2: {
    chain_name: 'persistence',
    client_id: '07-tendermint-49',
    connection_id: 'connection-48'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-33',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-37',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'juno',
    client_id: '07-tendermint-108',
    connection_id: 'connection-68'
  },
  chain_2: {
    chain_name: 'secretnetwork',
    client_id: '07-tendermint-23',
    connection_id: 'connection-9'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-48',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-8',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      properties: 'privacy'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'juno',
    client_id: '07-tendermint-9',
    connection_id: 'connection-8'
  },
  chain_2: {
    chain_name: 'sifchain',
    client_id: '07-tendermint-37',
    connection_id: 'connection-17'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-5',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-14',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'juno',
    client_id: '07-tendermint-44',
    connection_id: 'connection-30'
  },
  chain_2: {
    chain_name: 'stargaze',
    client_id: '07-tendermint-13',
    connection_id: 'connection-11'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-20',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-5',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'juno',
    client_id: '07-tendermint-263',
    connection_id: 'connection-205'
  },
  chain_2: {
    chain_name: 'stride',
    client_id: '07-tendermint-31',
    connection_id: 'connection-19'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-139',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-24',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }, {
    chain_1: {
      channel_id: 'channel-202',
      port_id: 'icahost'
    },
    chain_2: {
      channel_id: 'channel-48',
      port_id: 'icacontroller-juno-1.DELEGATION'
    },
    ordering: 'ordered',
    version: 'ics27-1',
    tags: {
      status: 'live',
      preferred: true,
      properties: 'liquid staking'
    }
  }, {
    chain_1: {
      channel_id: 'channel-143',
      port_id: 'icahost'
    },
    chain_2: {
      channel_id: 'channel-26',
      port_id: 'icacontroller-juno-1.FEE'
    },
    ordering: 'ordered',
    version: 'ics27-1',
    tags: {
      status: 'live',
      preferred: true,
      properties: 'liquid staking'
    }
  }, {
    chain_1: {
      channel_id: 'channel-142',
      port_id: 'icahost'
    },
    chain_2: {
      channel_id: 'channel-27',
      port_id: 'icacontroller-juno-1.WITHDRAWAL'
    },
    ordering: 'ordered',
    version: 'ics27-1',
    tags: {
      status: 'live',
      preferred: true,
      properties: 'liquid staking'
    }
  }, {
    chain_1: {
      channel_id: 'channel-140',
      port_id: 'icahost'
    },
    chain_2: {
      channel_id: 'channel-28',
      port_id: 'icacontroller-juno-1.REDEMPTION'
    },
    ordering: 'ordered',
    version: 'ics27-1',
    tags: {
      status: 'live',
      preferred: true,
      properties: 'liquid staking'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'juno',
    client_id: '07-tendermint-63',
    connection_id: 'connection-43'
  },
  chain_2: {
    chain_name: 'terra',
    client_id: '07-tendermint-32',
    connection_id: 'connection-34'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-27',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-20',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'kava',
    client_id: '07-tendermint-2',
    connection_id: 'connection-1'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1735',
    connection_id: 'connection-1328'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-143',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'kichain',
    client_id: '07-tendermint-4',
    connection_id: 'connection-0'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1564',
    connection_id: 'connection-1225'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-77',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }, {
    chain_1: {
      channel_id: 'channel-18',
      port_id: 'wasm.ki1hzz0s0ucrhdp6tue2lxk3c03nj6f60qy463we7lgx0wudd72ctmsd9kgha'
    },
    chain_2: {
      channel_id: 'channel-261',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'konstellation',
    client_id: '07-tendermint-1',
    connection_id: 'connection-0'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1778',
    connection_id: 'connection-1384'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-171',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'kujira',
    client_id: '07-tendermint-3',
    connection_id: 'connection-2'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-2017',
    connection_id: 'connection-1559'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-3',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-259',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'kujira',
    client_id: '07-tendermint-12',
    connection_id: 'connection-7'
  },
  chain_2: {
    chain_name: 'secretnetwork',
    client_id: '07-tendermint-48',
    connection_id: 'connection-29'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-10',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-22',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'lambda',
    client_id: '07-tendermint-6',
    connection_id: 'connection-5'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-2217',
    connection_id: 'connection-1733'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-2',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-378',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'likecoin',
    client_id: '07-tendermint-16',
    connection_id: 'connection-9'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1507',
    connection_id: 'connection-1173'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-3',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-53',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'lumenx',
    client_id: '07-tendermint-0',
    connection_id: 'connection-6'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-2079',
    connection_id: 'connection-1620'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-3',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-286',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'lumnetwork',
    client_id: '07-tendermint-7',
    connection_id: 'connection-5'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1668',
    connection_id: 'connection-1280'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-3',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-115',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'medasdigital',
    client_id: '07-tendermint-0',
    connection_id: 'connection-0'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-2372',
    connection_id: 'connection-1869'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-519',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'meme',
    client_id: '07-tendermint-0',
    connection_id: 'connection-1'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1931',
    connection_id: 'connection-1502'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-238',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'microtick',
    client_id: '07-tendermint-99',
    connection_id: 'connection-92'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1453',
    connection_id: 'connection-1139'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-16',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-39',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'odin',
    client_id: '07-tendermint-10',
    connection_id: 'connection-9'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-2007',
    connection_id: 'connection-1551'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-3',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-258',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'okexchain',
    client_id: '07-tendermint-100',
    connection_id: 'connection-44'
  },
  chain_2: {
    chain_name: 'vidulum',
    client_id: '07-tendermint-5',
    connection_id: 'connection-13'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-37',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-11',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'onomy',
    client_id: '07-tendermint-0',
    connection_id: 'connection-1'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-2405',
    connection_id: 'connection-1892'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-525',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'oraichain',
    client_id: '07-tendermint-49',
    connection_id: 'connection-21'
  },
  chain_2: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1882',
    connection_id: 'connection-1464'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-13',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-216',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1576',
    connection_id: 'connection-1231'
  },
  chain_2: {
    chain_name: 'panacea',
    client_id: '07-tendermint-6',
    connection_id: 'connection-1'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-82',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-3',
    connection_id: 'connection-4'
  },
  chain_2: {
    chain_name: 'persistence',
    client_id: '07-tendermint-6',
    connection_id: 'connection-5'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-4',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-6',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-2318',
    connection_id: 'connection-1815'
  },
  chain_2: {
    chain_name: 'planq',
    client_id: '07-tendermint-3',
    connection_id: 'connection-2'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-492',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1899',
    connection_id: 'connection-1472'
  },
  chain_2: {
    chain_name: 'provenance',
    client_id: '07-tendermint-31',
    connection_id: 'connection-9'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-222',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-7',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-2173',
    connection_id: 'connection-1692'
  },
  chain_2: {
    chain_name: 'rebus',
    client_id: '07-tendermint-0',
    connection_id: 'connection-0'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-355',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-6',
    connection_id: 'connection-7'
  },
  chain_2: {
    chain_name: 'regen',
    client_id: '07-tendermint-1',
    connection_id: 'connection-1'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-8',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1898',
    connection_id: 'connection-1471'
  },
  chain_2: {
    chain_name: 'rizon',
    client_id: '07-tendermint-3',
    connection_id: 'connection-1'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-221',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1588',
    connection_id: 'connection-1244'
  },
  chain_2: {
    chain_name: 'secretnetwork',
    client_id: '07-tendermint-2',
    connection_id: 'connection-1'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-88',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis',
      properties: 'privacy'
    }
  }, {
    chain_1: {
      channel_id: 'channel-476',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-44',
      port_id: 'wasm.secret1tqmms5awftpuhalcv5h5mg76fa0tkdz4jv9ex4'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis',
      properties: 'privacy'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-2',
    connection_id: 'connection-3'
  },
  chain_2: {
    chain_name: 'sentinel',
    client_id: '07-tendermint-0',
    connection_id: 'connection-0'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-2',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1741',
    connection_id: 'connection-1342'
  },
  chain_2: {
    chain_name: 'shentu',
    client_id: '07-tendermint-9',
    connection_id: 'connection-8'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-146',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-8',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1484',
    connection_id: 'connection-1159'
  },
  chain_2: {
    chain_name: 'sifchain',
    client_id: '07-tendermint-41',
    connection_id: 'connection-20'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-47',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-17',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1745',
    connection_id: 'connection-1348'
  },
  chain_2: {
    chain_name: 'sommelier',
    client_id: '07-tendermint-0',
    connection_id: 'connection-0'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-165',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1562',
    connection_id: 'connection-1223'
  },
  chain_2: {
    chain_name: 'stargaze',
    client_id: '07-tendermint-0',
    connection_id: 'connection-0'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-75',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-71',
    connection_id: 'connection-42'
  },
  chain_2: {
    chain_name: 'starname',
    client_id: '07-tendermint-9',
    connection_id: 'connection-9'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-15',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-2',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-2119',
    connection_id: 'connection-1657'
  },
  chain_2: {
    chain_name: 'stride',
    client_id: '07-tendermint-1',
    connection_id: 'connection-2'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-326',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-5',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-2192',
    connection_id: 'connection-1710'
  },
  chain_2: {
    chain_name: 'teritori',
    client_id: '07-tendermint-0',
    connection_id: 'connection-0'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-362',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1215',
    connection_id: 'connection-1549'
  },
  chain_2: {
    chain_name: 'terra',
    client_id: '07-tendermint-12',
    connection_id: 'connection-11'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-72',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1979',
    connection_id: 'connection-1536'
  },
  chain_2: {
    chain_name: 'terra2',
    client_id: '07-tendermint-2',
    connection_id: 'connection-3'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-251',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-2025',
    connection_id: 'connection-1565'
  },
  chain_2: {
    chain_name: 'tgrade',
    client_id: '07-tendermint-0',
    connection_id: 'connection-0'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-263',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1805',
    connection_id: 'connection-1410'
  },
  chain_2: {
    chain_name: 'umee',
    client_id: '07-tendermint-6',
    connection_id: 'connection-0'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-184',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-2229',
    connection_id: 'connection-1746'
  },
  chain_2: {
    chain_name: 'unification',
    client_id: '07-tendermint-1',
    connection_id: 'connection-1'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-382',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'osmosis',
    client_id: '07-tendermint-1705',
    connection_id: 'connection-1300'
  },
  chain_2: {
    chain_name: 'vidulum',
    client_id: '07-tendermint-0',
    connection_id: 'connection-0'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-124',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-0',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'persistence',
    client_id: '07-tendermint-33',
    connection_id: 'connection-27'
  },
  chain_2: {
    chain_name: 'regen',
    client_id: '07-tendermint-30',
    connection_id: 'connection-28'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-21',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-14',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'persistence',
    client_id: '07-tendermint-34',
    connection_id: 'connection-28'
  },
  chain_2: {
    chain_name: 'sentinel',
    client_id: '07-tendermint-61',
    connection_id: 'connection-36'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-22',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-15',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'persistence',
    client_id: '07-tendermint-38',
    connection_id: 'connection-32'
  },
  chain_2: {
    chain_name: 'sifchain',
    client_id: '07-tendermint-18',
    connection_id: 'connection-8'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-26',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-7',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'persistence',
    client_id: '07-tendermint-39',
    connection_id: 'connection-39'
  },
  chain_2: {
    chain_name: 'starname',
    client_id: '07-tendermint-44',
    connection_id: 'connection-30'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-27',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-13',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'regen',
    client_id: '07-tendermint-31',
    connection_id: 'connection-29'
  },
  chain_2: {
    chain_name: 'sentinel',
    client_id: '07-tendermint-56',
    connection_id: 'connection-32'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-15',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-11',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'regen',
    client_id: '07-tendermint-73',
    connection_id: 'connection-60'
  },
  chain_2: {
    chain_name: 'sifchain',
    client_id: '07-tendermint-31',
    connection_id: 'connection-13'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-28',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-10',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'regen',
    client_id: '07-tendermint-74',
    connection_id: 'connection-61'
  },
  chain_2: {
    chain_name: 'starname',
    client_id: '07-tendermint-45',
    connection_id: 'connection-31'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-29',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-14',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'secretnetwork',
    client_id: '07-tendermint-14',
    connection_id: 'connection-3'
  },
  chain_2: {
    chain_name: 'sentinel',
    client_id: '07-tendermint-96',
    connection_id: 'connection-75'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-3',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-50',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      properties: 'privacy'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'secretnetwork',
    client_id: '07-tendermint-37',
    connection_id: 'connection-19'
  },
  chain_2: {
    chain_name: 'sifchain',
    client_id: '07-tendermint-171',
    connection_id: 'connection-98'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-15',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-65',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      properties: 'privacy'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'secretnetwork',
    client_id: '07-tendermint-43',
    connection_id: 'connection-25'
  },
  chain_2: {
    chain_name: 'stargaze',
    client_id: '07-tendermint-177',
    connection_id: 'connection-110'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-19',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-48',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      properties: 'privacy'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'secretnetwork',
    client_id: '07-tendermint-75',
    connection_id: 'connection-40'
  },
  chain_2: {
    chain_name: 'stride',
    client_id: '07-tendermint-37',
    connection_id: 'connection-25'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-37',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-40',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      properties: 'privacy'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'secretnetwork',
    client_id: '07-tendermint-3',
    connection_id: 'connection-2'
  },
  chain_2: {
    chain_name: 'terra',
    client_id: '07-tendermint-28',
    connection_id: 'connection-29'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-2',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-16',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      properties: 'privacy'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'secretnetwork',
    client_id: '07-tendermint-38',
    connection_id: 'connection-20'
  },
  chain_2: {
    chain_name: 'terra2',
    client_id: '07-tendermint-4',
    connection_id: 'connection-7'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-16',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-3',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      properties: 'privacy'
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'sentinel',
    client_id: '07-tendermint-84',
    connection_id: 'connection-58'
  },
  chain_2: {
    chain_name: 'sifchain',
    client_id: '07-tendermint-9',
    connection_id: 'connection-1'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-36',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-1',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'sentinel',
    client_id: '07-tendermint-88',
    connection_id: 'connection-70'
  },
  chain_2: {
    chain_name: 'starname',
    client_id: '07-tendermint-46',
    connection_id: 'connection-32'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-40',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-15',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {}
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'stargaze',
    client_id: '07-tendermint-195',
    connection_id: 'connection-128'
  },
  chain_2: {
    chain_name: 'stride',
    client_id: '07-tendermint-30',
    connection_id: 'connection-18'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-106',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-19',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true
    }
  }]
}, {
  $schema: '../ibc_data.schema.json',
  chain_1: {
    chain_name: 'axelartestnet',
    client_id: '07-tendermint-213',
    connection_id: 'connection-151'
  },
  chain_2: {
    chain_name: 'osmosistestnet',
    client_id: '07-tendermint-3319',
    connection_id: 'connection-2807'
  },
  channels: [{
    chain_1: {
      channel_id: 'channel-135',
      port_id: 'transfer'
    },
    chain_2: {
      channel_id: 'channel-1946',
      port_id: 'transfer'
    },
    ordering: 'unordered',
    version: 'ics20-1',
    tags: {
      status: 'live',
      preferred: true,
      dex: 'osmosis'
    }
  }]
}];
var _default = ibc;
exports["default"] = _default;

/***/ }),

/***/ 8106:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var __webpack_unused_export__;


var _interopRequireDefault = __webpack_require__(229);
__webpack_unused_export__ = ({
  value: true
});
Object.defineProperty(exports, "Ll", ({
  enumerable: true,
  get: function get() {
    return _assets["default"];
  }
}));
Object.defineProperty(exports, "p5", ({
  enumerable: true,
  get: function get() {
    return _chains["default"];
  }
}));
__webpack_unused_export__ = void 0;
__webpack_unused_export__ = ({
  enumerable: true,
  get: function get() {
    return _ibc["default"];
  }
});
var _assets = _interopRequireDefault(__webpack_require__(9354));
var _chains = _interopRequireDefault(__webpack_require__(7685));
var _ibc = _interopRequireDefault(__webpack_require__(6026));
var _default = {
  assets: _assets["default"],
  chains: _chains["default"],
  ibc: _ibc["default"]
};
__webpack_unused_export__ = _default;

/***/ }),

/***/ 3254:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var reactIs = __webpack_require__(7954);

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
var REACT_STATICS = {
  childContextTypes: true,
  contextType: true,
  contextTypes: true,
  defaultProps: true,
  displayName: true,
  getDefaultProps: true,
  getDerivedStateFromError: true,
  getDerivedStateFromProps: true,
  mixins: true,
  propTypes: true,
  type: true
};
var KNOWN_STATICS = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};
var FORWARD_REF_STATICS = {
  '$$typeof': true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  '$$typeof': true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

function getStatics(component) {
  // React v16.11 and below
  if (reactIs.isMemo(component)) {
    return MEMO_STATICS;
  } // React v16.12 and above


  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}

var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
  if (typeof sourceComponent !== 'string') {
    // don't hoist over string (html) components
    if (objectPrototype) {
      var inheritedComponent = getPrototypeOf(sourceComponent);

      if (inheritedComponent && inheritedComponent !== objectPrototype) {
        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
      }
    }

    var keys = getOwnPropertyNames(sourceComponent);

    if (getOwnPropertySymbols) {
      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
    }

    var targetStatics = getStatics(targetComponent);
    var sourceStatics = getStatics(sourceComponent);

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

        try {
          // Avoid failures from read-only properties
          defineProperty(targetComponent, key, descriptor);
        } catch (e) {}
      }
    }
  }

  return targetComponent;
}

module.exports = hoistNonReactStatics;


/***/ }),

/***/ 1263:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;
exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return"object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};
exports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};
exports.isValidElementType=function(a){return"string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;


/***/ }),

/***/ 7954:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (true) {
  module.exports = __webpack_require__(1263);
} else {}


/***/ }),

/***/ 2061:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.createProxy = createProxy;
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ // Modified from https://github.com/facebook/react/blob/main/packages/react-server-dom-webpack/src/ReactFlightWebpackNodeRegister.js
const MODULE_REFERENCE = Symbol.for("react.module.reference");
const PROMISE_PROTOTYPE = Promise.prototype;
const proxyHandlers = {
    get: function(target, name, _receiver) {
        switch(name){
            // These names are read by the Flight runtime if you end up using the exports object.
            case "$$typeof":
                // These names are a little too common. We should probably have a way to
                // have the Flight runtime extract the inner target instead.
                return target.$$typeof;
            case "filepath":
                return target.filepath;
            case "name":
                return target.name;
            case "async":
                return target.async;
            // We need to special case this because createElement reads it if we pass this
            // reference.
            case "defaultProps":
                return undefined;
            case "__esModule":
                // Something is conditionally checking which export to use. We'll pretend to be
                // an ESM compat module but then we'll check again on the client.
                target.default = {
                    $$typeof: MODULE_REFERENCE,
                    filepath: target.filepath,
                    // This a placeholder value that tells the client to conditionally use the
                    // whole object or just the default export.
                    name: "",
                    async: target.async
                };
                return true;
            case "then":
                if (!target.async) {
                    // If this module is expected to return a Promise (such as an AsyncModule) then
                    // we should resolve that with a client reference that unwraps the Promise on
                    // the client.
                    const then = function then(resolve, _reject) {
                        const moduleReference = {
                            $$typeof: MODULE_REFERENCE,
                            filepath: target.filepath,
                            name: "*",
                            async: true
                        };
                        return Promise.resolve(resolve(new Proxy(moduleReference, proxyHandlers)));
                    };
                    // If this is not used as a Promise but is treated as a reference to a `.then`
                    // export then we should treat it as a reference to that name.
                    then.$$typeof = MODULE_REFERENCE;
                    then.filepath = target.filepath;
                    // then.name is conveniently already "then" which is the export name we need.
                    // This will break if it's minified though.
                    return then;
                }
                break;
            default:
                break;
        }
        let cachedReference = target[name];
        if (!cachedReference) {
            cachedReference = target[name] = {
                $$typeof: MODULE_REFERENCE,
                filepath: target.filepath,
                name: name,
                async: target.async
            };
        }
        return cachedReference;
    },
    getPrototypeOf (_target) {
        // Pretend to be a Promise in case anyone asks.
        return PROMISE_PROTOTYPE;
    },
    set: function() {
        throw new Error("Cannot assign to a client module from a server module.");
    }
};
function createProxy(moduleId) {
    const moduleReference = {
        $$typeof: MODULE_REFERENCE,
        filepath: moduleId,
        name: "*",
        async: false
    };
    return new Proxy(moduleReference, proxyHandlers);
} //# sourceMappingURL=module-proxy.js.map


/***/ }),

/***/ 4557:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* __next_internal_client_entry_do_not_use__ */ 
const { createProxy  } = __webpack_require__(2061);
module.exports = createProxy("/Users/alpha/Documents/GitHub/cosmos-tx-playground/.yarn/unplugged/next-virtual-a6605998f9/node_modules/next/dist/client/components/app-router.js");
 //# sourceMappingURL=app-router.js.map


/***/ }),

/***/ 9787:
/***/ ((module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.createAsyncLocalStorage = createAsyncLocalStorage;
class FakeAsyncLocalStorage {
    disable() {
        throw new Error("Invariant: AsyncLocalStorage accessed in runtime where it is not available");
    }
    getStore() {
        // This fake implementation of AsyncLocalStorage always returns `undefined`.
        return undefined;
    }
    run() {
        throw new Error("Invariant: AsyncLocalStorage accessed in runtime where it is not available");
    }
    exit() {
        throw new Error("Invariant: AsyncLocalStorage accessed in runtime where it is not available");
    }
    enterWith() {
        throw new Error("Invariant: AsyncLocalStorage accessed in runtime where it is not available");
    }
}
function createAsyncLocalStorage() {
    if (globalThis.AsyncLocalStorage) {
        return new globalThis.AsyncLocalStorage();
    }
    return new FakeAsyncLocalStorage();
}
if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
    Object.defineProperty(exports.default, "__esModule", {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=async-local-storage.js.map


/***/ }),

/***/ 7119:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* __next_internal_client_entry_do_not_use__ */ 
const { createProxy  } = __webpack_require__(2061);
module.exports = createProxy("/Users/alpha/Documents/GitHub/cosmos-tx-playground/.yarn/unplugged/next-virtual-a6605998f9/node_modules/next/dist/client/components/error-boundary.js");
 //# sourceMappingURL=error-boundary.js.map


/***/ }),

/***/ 2291:
/***/ ((module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DYNAMIC_ERROR_CODE = void 0;
const DYNAMIC_ERROR_CODE = "DYNAMIC_SERVER_USAGE";
exports.DYNAMIC_ERROR_CODE = DYNAMIC_ERROR_CODE;
class DynamicServerError extends Error {
    constructor(type){
        super(`Dynamic server usage: ${type}`);
        this.digest = DYNAMIC_ERROR_CODE;
    }
}
exports.DynamicServerError = DynamicServerError;
if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
    Object.defineProperty(exports.default, "__esModule", {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=hooks-server-context.js.map


/***/ }),

/***/ 4661:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* __next_internal_client_entry_do_not_use__ */ 
const { createProxy  } = __webpack_require__(2061);
module.exports = createProxy("/Users/alpha/Documents/GitHub/cosmos-tx-playground/.yarn/unplugged/next-virtual-a6605998f9/node_modules/next/dist/client/components/layout-router.js");
 //# sourceMappingURL=layout-router.js.map


/***/ }),

/***/ 5226:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* __next_internal_client_entry_do_not_use__ */ 
const { createProxy  } = __webpack_require__(2061);
module.exports = createProxy("/Users/alpha/Documents/GitHub/cosmos-tx-playground/.yarn/unplugged/next-virtual-a6605998f9/node_modules/next/dist/client/components/render-from-template-context.js");
 //# sourceMappingURL=render-from-template-context.js.map


/***/ }),

/***/ 2176:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.requestAsyncStorage = void 0;
var _asyncLocalStorage = __webpack_require__(9787);
const requestAsyncStorage = (0, _asyncLocalStorage).createAsyncLocalStorage();
exports.requestAsyncStorage = requestAsyncStorage;
if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
    Object.defineProperty(exports.default, "__esModule", {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=request-async-storage.js.map


/***/ }),

/***/ 3959:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/**
 * @license React
 * react-dom-server-rendering-stub.production.min.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
var b = {
    usingClientEntryPoint: !1,
    Events: null,
    Dispatcher: {
        current: null
    }
};
function d(a) {
    for(var e = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)e += "&args[]=" + encodeURIComponent(arguments[c]);
    return "Minified React error #" + a + "; visit " + e + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = b;
exports.createPortal = function() {
    throw Error(d(448));
};
exports.flushSync = function() {
    throw Error(d(449));
};
exports.preinit = function() {
    var a = b.Dispatcher.current;
    a && a.preinit.apply(this, arguments);
};
exports.preload = function() {
    var a = b.Dispatcher.current;
    a && a.preload.apply(this, arguments);
};
exports.version = "18.3.0-next-3ba7add60-20221201";


/***/ }),

/***/ 4912:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

if (true) {
    module.exports = __webpack_require__(3959);
} else {}


/***/ }),

/***/ 6691:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/******/ (()=>{
    /******/ "use strict";
    /******/ var __webpack_modules__ = {
        /***/ 531: /***/ (__unused_webpack_module, exports, __nccwpck_require__)=>{
            /**
 * @license React
 * react-server-dom-webpack-server.browser.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ if (false) {}
        /***/ },
        /***/ 421: /***/ (__unused_webpack_module, exports, __nccwpck_require__)=>{
            /**
 * @license React
 * react-server-dom-webpack-server.browser.production.min.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var ea = __nccwpck_require__(522);
            var e = "function" === typeof AsyncLocalStorage, fa = e ? new AsyncLocalStorage : null, m = null, n = 0;
            function p(a, b) {
                if (0 !== b.length) if (512 < b.length) 0 < n && (a.enqueue(new Uint8Array(m.buffer, 0, n)), m = new Uint8Array(512), n = 0), a.enqueue(b);
                else {
                    var d = m.length - n;
                    d < b.length && (0 === d ? a.enqueue(m) : (m.set(b.subarray(0, d), n), a.enqueue(m), b = b.subarray(d)), m = new Uint8Array(512), n = 0);
                    m.set(b, n);
                    n += b.length;
                }
                return !0;
            }
            var q = new TextEncoder;
            function r(a) {
                return q.encode(a);
            }
            function ha(a, b) {
                "function" === typeof a.error ? a.error(b) : a.close();
            }
            var t = JSON.stringify, u = Symbol.for("react.module.reference"), v = Symbol.for("react.element"), ia = Symbol.for("react.fragment"), ja = Symbol.for("react.provider"), ka = Symbol.for("react.server_context"), la = Symbol.for("react.forward_ref"), ma = Symbol.for("react.suspense"), na = Symbol.for("react.suspense_list"), oa = Symbol.for("react.memo"), w = Symbol.for("react.lazy"), pa = Symbol.for("react.default_value"), qa = Symbol.for("react.memo_cache_sentinel");
            function x(a, b, d, c, f, g, h) {
                this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
                this.attributeName = c;
                this.attributeNamespace = f;
                this.mustUseProperty = d;
                this.propertyName = a;
                this.type = b;
                this.sanitizeURL = g;
                this.removeEmptyString = h;
            }
            "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
                new x(a, 0, !1, a, null, !1, !1);
            });
            [
                [
                    "acceptCharset",
                    "accept-charset"
                ],
                [
                    "className",
                    "class"
                ],
                [
                    "htmlFor",
                    "for"
                ],
                [
                    "httpEquiv",
                    "http-equiv"
                ]
            ].forEach(function(a) {
                new x(a[0], 1, !1, a[1], null, !1, !1);
            });
            [
                "contentEditable",
                "draggable",
                "spellCheck",
                "value"
            ].forEach(function(a) {
                new x(a, 2, !1, a.toLowerCase(), null, !1, !1);
            });
            [
                "autoReverse",
                "externalResourcesRequired",
                "focusable",
                "preserveAlpha"
            ].forEach(function(a) {
                new x(a, 2, !1, a, null, !1, !1);
            });
            "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
                new x(a, 3, !1, a.toLowerCase(), null, !1, !1);
            });
            [
                "checked",
                "multiple",
                "muted",
                "selected"
            ].forEach(function(a) {
                new x(a, 3, !0, a, null, !1, !1);
            });
            [
                "capture",
                "download"
            ].forEach(function(a) {
                new x(a, 4, !1, a, null, !1, !1);
            });
            [
                "cols",
                "rows",
                "size",
                "span"
            ].forEach(function(a) {
                new x(a, 6, !1, a, null, !1, !1);
            });
            [
                "rowSpan",
                "start"
            ].forEach(function(a) {
                new x(a, 5, !1, a.toLowerCase(), null, !1, !1);
            });
            var z = /[\-:]([a-z])/g;
            function A(a) {
                return a[1].toUpperCase();
            }
            "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
                var b = a.replace(z, A);
                new x(b, 1, !1, a, null, !1, !1);
            });
            "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
                var b = a.replace(z, A);
                new x(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1, !1);
            });
            [
                "xml:base",
                "xml:lang",
                "xml:space"
            ].forEach(function(a) {
                var b = a.replace(z, A);
                new x(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1, !1);
            });
            [
                "tabIndex",
                "crossOrigin"
            ].forEach(function(a) {
                new x(a, 1, !1, a.toLowerCase(), null, !1, !1);
            });
            new x("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);
            [
                "src",
                "href",
                "action",
                "formAction"
            ].forEach(function(a) {
                new x(a, 1, !1, a.toLowerCase(), null, !0, !0);
            });
            var B = {
                animationIterationCount: !0,
                aspectRatio: !0,
                borderImageOutset: !0,
                borderImageSlice: !0,
                borderImageWidth: !0,
                boxFlex: !0,
                boxFlexGroup: !0,
                boxOrdinalGroup: !0,
                columnCount: !0,
                columns: !0,
                flex: !0,
                flexGrow: !0,
                flexPositive: !0,
                flexShrink: !0,
                flexNegative: !0,
                flexOrder: !0,
                gridArea: !0,
                gridRow: !0,
                gridRowEnd: !0,
                gridRowSpan: !0,
                gridRowStart: !0,
                gridColumn: !0,
                gridColumnEnd: !0,
                gridColumnSpan: !0,
                gridColumnStart: !0,
                fontWeight: !0,
                lineClamp: !0,
                lineHeight: !0,
                opacity: !0,
                order: !0,
                orphans: !0,
                tabSize: !0,
                widows: !0,
                zIndex: !0,
                zoom: !0,
                fillOpacity: !0,
                floodOpacity: !0,
                stopOpacity: !0,
                strokeDasharray: !0,
                strokeDashoffset: !0,
                strokeMiterlimit: !0,
                strokeOpacity: !0,
                strokeWidth: !0
            }, ra = [
                "Webkit",
                "ms",
                "Moz",
                "O"
            ];
            Object.keys(B).forEach(function(a) {
                ra.forEach(function(b) {
                    b = b + a.charAt(0).toUpperCase() + a.substring(1);
                    B[b] = B[a];
                });
            });
            var sa = Array.isArray;
            r('"></template>');
            r("<script>");
            r("</script>");
            r('<script src="');
            r('<script type="module" src="');
            r('" integrity="');
            r('" async=""></script>');
            r("<!-- -->");
            r(' style="');
            r(":");
            r(";");
            r(" ");
            r('="');
            r('"');
            r('=""');
            r(">");
            r("/>");
            r(' selected=""');
            r("\n");
            r("<!DOCTYPE html>");
            r("</");
            r(">");
            r('<template id="');
            r('"></template>');
            r("<!--$-->");
            r('<!--$?--><template id="');
            r('"></template>');
            r("<!--$!-->");
            r("<!--/$-->");
            r("<template");
            r('"');
            r(' data-dgst="');
            r(' data-msg="');
            r(' data-stck="');
            r("></template>");
            r('<div hidden id="');
            r('">');
            r("</div>");
            r('<svg aria-hidden="true" style="display:none" id="');
            r('">');
            r("</svg>");
            r('<math aria-hidden="true" style="display:none" id="');
            r('">');
            r("</math>");
            r('<table hidden id="');
            r('">');
            r("</table>");
            r('<table hidden><tbody id="');
            r('">');
            r("</tbody></table>");
            r('<table hidden><tr id="');
            r('">');
            r("</tr></table>");
            r('<table hidden><colgroup id="');
            r('">');
            r("</colgroup></table>");
            r('$RS=function(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};;$RS("');
            r('$RS("');
            r('","');
            r('")</script>');
            r('<template data-rsi="" data-sid="');
            r('" data-pid="');
            r('$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data="$!",a.setAttribute("data-dgst",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if("/$"===d)if(0===f)break;else f--;else"$"!==d&&"$?"!==d&&"$!"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data="$"}b._reactRetry&&b._reactRetry()}};;$RC("');
            r('$RC("');
            r('$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data="$!",a.setAttribute("data-dgst",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if("/$"===d)if(0===f)break;else f--;else"$"!==d&&"$?"!==d&&"$!"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data="$"}b._reactRetry&&b._reactRetry()}};;$RM=new Map;\n$RR=function(p,q,v){function r(l){this.s=l}for(var t=$RC,u=$RM,m=new Map,n=document,g,e,f=n.querySelectorAll("link[data-precedence],style[data-precedence]"),d=0;e=f[d++];)m.set(e.dataset.precedence,g=e);e=0;f=[];for(var c,h,b,a;c=v[e++];){var k=0;h=c[k++];if(b=u.get(h))"l"!==b.s&&f.push(b);else{a=n.createElement("link");a.href=h;a.rel="stylesheet";for(a.dataset.precedence=d=c[k++];b=c[k++];)a.setAttribute(b,c[k++]);b=a._p=new Promise(function(l,w){a.onload=l;a.onerror=w});b.then(r.bind(b,\n"l"),r.bind(b,"e"));u.set(h,b);f.push(b);c=m.get(d)||g;c===g&&(g=a);m.set(d,a);c?c.parentNode.insertBefore(a,c.nextSibling):(d=n.head,d.insertBefore(a,d.firstChild))}}Promise.all(f).then(t.bind(null,p,q,""),t.bind(null,p,q,"Resource failed to load"))};;$RR("');
            r('$RM=new Map;\n$RR=function(p,q,v){function r(l){this.s=l}for(var t=$RC,u=$RM,m=new Map,n=document,g,e,f=n.querySelectorAll("link[data-precedence],style[data-precedence]"),d=0;e=f[d++];)m.set(e.dataset.precedence,g=e);e=0;f=[];for(var c,h,b,a;c=v[e++];){var k=0;h=c[k++];if(b=u.get(h))"l"!==b.s&&f.push(b);else{a=n.createElement("link");a.href=h;a.rel="stylesheet";for(a.dataset.precedence=d=c[k++];b=c[k++];)a.setAttribute(b,c[k++]);b=a._p=new Promise(function(l,w){a.onload=l;a.onerror=w});b.then(r.bind(b,\n"l"),r.bind(b,"e"));u.set(h,b);f.push(b);c=m.get(d)||g;c===g&&(g=a);m.set(d,a);c?c.parentNode.insertBefore(a,c.nextSibling):(d=n.head,d.insertBefore(a,d.firstChild))}}Promise.all(f).then(t.bind(null,p,q,""),t.bind(null,p,q,"Resource failed to load"))};;$RR("');
            r('$RR("');
            r('","');
            r('",');
            r('"');
            r(")</script>");
            r('<template data-rci="" data-bid="');
            r('<template data-rri="" data-bid="');
            r('" data-sid="');
            r('" data-sty="');
            r('$RX=function(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};;$RX("');
            r('$RX("');
            r('"');
            r(",");
            r(")</script>");
            r('<template data-rxi="" data-bid="');
            r('" data-dgst="');
            r('" data-msg="');
            r('" data-stck="');
            r('<style data-precedence="');
            r('"></style>');
            r("[");
            r(",[");
            r(",");
            r("]");
            var C = null;
            function D(a, b) {
                if (a !== b) {
                    a.context._currentValue = a.parentValue;
                    a = a.parent;
                    var d = b.parent;
                    if (null === a) {
                        if (null !== d) throw Error("The stacks must reach the root at the same time. This is a bug in React.");
                    } else {
                        if (null === d) throw Error("The stacks must reach the root at the same time. This is a bug in React.");
                        D(a, d);
                        b.context._currentValue = b.value;
                    }
                }
            }
            function ta(a) {
                a.context._currentValue = a.parentValue;
                a = a.parent;
                null !== a && ta(a);
            }
            function ua(a) {
                var b = a.parent;
                null !== b && ua(b);
                a.context._currentValue = a.value;
            }
            function va(a, b) {
                a.context._currentValue = a.parentValue;
                a = a.parent;
                if (null === a) throw Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
                a.depth === b.depth ? D(a, b) : va(a, b);
            }
            function wa(a, b) {
                var d = b.parent;
                if (null === d) throw Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
                a.depth === d.depth ? D(a, d) : wa(a, d);
                b.context._currentValue = b.value;
            }
            function G(a) {
                var b = C;
                b !== a && (null === b ? ua(a) : null === a ? ta(b) : b.depth === a.depth ? D(b, a) : b.depth > a.depth ? va(b, a) : wa(b, a), C = a);
            }
            function xa(a, b) {
                var d = a._currentValue;
                a._currentValue = b;
                var c = C;
                return C = a = {
                    parent: c,
                    depth: null === c ? 0 : c.depth + 1,
                    context: a,
                    parentValue: d,
                    value: b
                };
            }
            var H = Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`");
            function ya() {}
            function za(a, b, d) {
                d = a[d];
                void 0 === d ? a.push(b) : d !== b && (b.then(ya, ya), b = d);
                switch(b.status){
                    case "fulfilled":
                        return b.value;
                    case "rejected":
                        throw b.reason;
                    default:
                        if ("string" !== typeof b.status) switch(a = b, a.status = "pending", a.then(function(a) {
                            if ("pending" === b.status) {
                                var c = b;
                                c.status = "fulfilled";
                                c.value = a;
                            }
                        }, function(a) {
                            if ("pending" === b.status) {
                                var c = b;
                                c.status = "rejected";
                                c.reason = a;
                            }
                        }), b.status){
                            case "fulfilled":
                                return b.value;
                            case "rejected":
                                throw b.reason;
                        }
                        I = b;
                        throw H;
                }
            }
            var I = null;
            function Aa() {
                if (null === I) throw Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");
                var a = I;
                I = null;
                return a;
            }
            var J = null, K = 0, L = null;
            function Ba() {
                var a = L;
                L = null;
                return a;
            }
            function Ca(a) {
                return a._currentValue;
            }
            var Ha = {
                useMemo: function(a) {
                    return a();
                },
                useCallback: function(a) {
                    return a;
                },
                useDebugValue: function() {},
                useDeferredValue: M,
                useTransition: M,
                readContext: Ca,
                useContext: Ca,
                useReducer: M,
                useRef: M,
                useState: M,
                useInsertionEffect: M,
                useLayoutEffect: M,
                useImperativeHandle: M,
                useEffect: M,
                useId: Da,
                useMutableSource: M,
                useSyncExternalStore: M,
                useCacheRefresh: function() {
                    return Fa;
                },
                useMemoCache: function(a) {
                    for(var b = Array(a), d = 0; d < a; d++)b[d] = qa;
                    return b;
                },
                use: Ga
            };
            function M() {
                throw Error("This Hook is not supported in Server Components.");
            }
            function Fa() {
                throw Error("Refreshing the cache is not supported in Server Components.");
            }
            function Da() {
                if (null === J) throw Error("useId can only be used while React is rendering");
                var a = J.identifierCount++;
                return ":" + J.identifierPrefix + "S" + a.toString(32) + ":";
            }
            function Ga(a) {
                if (null !== a && "object" === typeof a) {
                    if ("function" === typeof a.then) {
                        var b = K;
                        K += 1;
                        null === L && (L = []);
                        return za(L, a, b);
                    }
                    if (a.$$typeof === ka) return a._currentValue;
                }
                throw Error("An unsupported type was passed to use(): " + String(a));
            }
            function N() {
                return (new AbortController).signal;
            }
            function Ia() {
                if (O) return O;
                if (e) {
                    var a = fa.getStore();
                    if (a) return a;
                }
                return new Map;
            }
            var Ja = {
                getCacheSignal: function() {
                    var a = Ia(), b = a.get(N);
                    void 0 === b && (b = N(), a.set(N, b));
                    return b;
                },
                getCacheForType: function(a) {
                    var b = Ia(), d = b.get(a);
                    void 0 === d && (d = a(), b.set(a, d));
                    return d;
                }
            }, O = null, P = ea.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, Q = P.ContextRegistry, R = P.ReactCurrentDispatcher, S = P.ReactCurrentCache;
            function Ka(a) {
                ;
            }
            function La(a, b, d, c, f) {
                if (null !== S.current && S.current !== Ja) throw Error("Currently React only supports one RSC renderer at a time.");
                S.current = Ja;
                var g = new Set, h = [], k = {
                    status: 0,
                    fatalError: null,
                    destination: null,
                    bundlerConfig: b,
                    cache: new Map,
                    nextChunkId: 0,
                    pendingChunks: 0,
                    abortableTasks: g,
                    pingedTasks: h,
                    completedModuleChunks: [],
                    completedJSONChunks: [],
                    completedErrorChunks: [],
                    writtenSymbols: new Map,
                    writtenModules: new Map,
                    writtenProviders: new Map,
                    identifierPrefix: f || "",
                    identifierCount: 1,
                    onError: void 0 === d ? Ka : d,
                    toJSON: function(a, b) {
                        return Ma(k, this, a, b);
                    }
                };
                k.pendingChunks++;
                b = Na(c);
                a = Oa(k, a, b, g);
                h.push(a);
                return k;
            }
            var Pa = {};
            function Qa(a) {
                if ("fulfilled" === a.status) return a.value;
                if ("rejected" === a.status) throw a.reason;
                throw a;
            }
            function Ra(a) {
                switch(a.status){
                    case "fulfilled":
                    case "rejected":
                        break;
                    default:
                        "string" !== typeof a.status && (a.status = "pending", a.then(function(b) {
                            "pending" === a.status && (a.status = "fulfilled", a.value = b);
                        }, function(b) {
                            "pending" === a.status && (a.status = "rejected", a.reason = b);
                        }));
                }
                return {
                    $$typeof: w,
                    _payload: a,
                    _init: Qa
                };
            }
            function T(a, b, d, c, f) {
                if (null !== d && void 0 !== d) throw Error("Refs cannot be used in Server Components, nor passed to Client Components.");
                if ("function" === typeof a) {
                    if (a.$$typeof === u) return [
                        v,
                        a,
                        b,
                        c
                    ];
                    K = 0;
                    L = f;
                    c = a(c);
                    return "object" === typeof c && null !== c && "function" === typeof c.then ? Ra(c) : c;
                }
                if ("string" === typeof a) return [
                    v,
                    a,
                    b,
                    c
                ];
                if ("symbol" === typeof a) return a === ia ? c.children : [
                    v,
                    a,
                    b,
                    c
                ];
                if (null != a && "object" === typeof a) {
                    if (a.$$typeof === u) return [
                        v,
                        a,
                        b,
                        c
                    ];
                    switch(a.$$typeof){
                        case w:
                            var g = a._init;
                            a = g(a._payload);
                            return T(a, b, d, c, f);
                        case la:
                            return b = a.render, K = 0, L = f, b(c, void 0);
                        case oa:
                            return T(a.type, b, d, c, f);
                        case ja:
                            return xa(a._context, c.value), [
                                v,
                                a,
                                b,
                                {
                                    value: c.value,
                                    children: c.children,
                                    __pop: Pa
                                }
                            ];
                    }
                }
                throw Error("Unsupported Server Component type: " + U(a));
            }
            function Oa(a, b, d, c) {
                var f = {
                    id: a.nextChunkId++,
                    status: 0,
                    model: b,
                    context: d,
                    ping: function() {
                        var b = a.pingedTasks;
                        b.push(f);
                        1 === b.length && V(a);
                    },
                    thenableState: null
                };
                c.add(f);
                return f;
            }
            function Sa(a, b, d, c) {
                var f = c.filepath + "#" + c.name + (c.async ? "#async" : ""), g = a.writtenModules, h = g.get(f);
                if (void 0 !== h) return b[0] === v && "1" === d ? "@" + h.toString(16) : "$" + h.toString(16);
                try {
                    var k = a.bundlerConfig[c.filepath][c.name];
                    var l = c.async ? {
                        id: k.id,
                        chunks: k.chunks,
                        name: k.name,
                        async: !0
                    } : k;
                    a.pendingChunks++;
                    var y = a.nextChunkId++, aa = t(l), ba = "M" + y.toString(16) + ":" + aa + "\n";
                    var ca = q.encode(ba);
                    a.completedModuleChunks.push(ca);
                    g.set(f, y);
                    return b[0] === v && "1" === d ? "@" + y.toString(16) : "$" + y.toString(16);
                } catch (da) {
                    return a.pendingChunks++, b = a.nextChunkId++, d = W(a, da), X(a, b, d), "$" + b.toString(16);
                }
            }
            function Ta(a) {
                return Object.prototype.toString.call(a).replace(/^\[object (.*)\]$/, function(a, d) {
                    return d;
                });
            }
            function U(a) {
                switch(typeof a){
                    case "string":
                        return JSON.stringify(10 >= a.length ? a : a.substr(0, 10) + "...");
                    case "object":
                        if (sa(a)) return "[...]";
                        a = Ta(a);
                        return "Object" === a ? "{...}" : a;
                    case "function":
                        return "function";
                    default:
                        return String(a);
                }
            }
            function Y(a) {
                if ("string" === typeof a) return a;
                switch(a){
                    case ma:
                        return "Suspense";
                    case na:
                        return "SuspenseList";
                }
                if ("object" === typeof a) switch(a.$$typeof){
                    case la:
                        return Y(a.render);
                    case oa:
                        return Y(a.type);
                    case w:
                        var b = a._payload;
                        a = a._init;
                        try {
                            return Y(a(b));
                        } catch (d) {}
                }
                return "";
            }
            function Z(a, b) {
                var d = Ta(a);
                if ("Object" !== d && "Array" !== d) return d;
                d = -1;
                var c = 0;
                if (sa(a)) {
                    var f = "[";
                    for(var g = 0; g < a.length; g++){
                        0 < g && (f += ", ");
                        var h = a[g];
                        h = "object" === typeof h && null !== h ? Z(h) : U(h);
                        "" + g === b ? (d = f.length, c = h.length, f += h) : f = 10 > h.length && 40 > f.length + h.length ? f + h : f + "...";
                    }
                    f += "]";
                } else if (a.$$typeof === v) f = "<" + Y(a.type) + "/>";
                else {
                    f = "{";
                    g = Object.keys(a);
                    for(h = 0; h < g.length; h++){
                        0 < h && (f += ", ");
                        var k = g[h], l = JSON.stringify(k);
                        f += ('"' + k + '"' === l ? k : l) + ": ";
                        l = a[k];
                        l = "object" === typeof l && null !== l ? Z(l) : U(l);
                        k === b ? (d = f.length, c = l.length, f += l) : f = 10 > l.length && 40 > f.length + l.length ? f + l : f + "...";
                    }
                    f += "}";
                }
                return void 0 === b ? f : -1 < d && 0 < c ? (a = " ".repeat(d) + "^".repeat(c), "\n  " + f + "\n  " + a) : "\n  " + f;
            }
            function Ma(a, b, d, c) {
                switch(c){
                    case v:
                        return "$";
                }
                for(; "object" === typeof c && null !== c && (c.$$typeof === v || c.$$typeof === w);)try {
                    switch(c.$$typeof){
                        case v:
                            var f = c;
                            c = T(f.type, f.key, f.ref, f.props, null);
                            break;
                        case w:
                            var g = c._init;
                            c = g(c._payload);
                    }
                } catch (h) {
                    d = h === H ? Aa() : h;
                    if ("object" === typeof d && null !== d && "function" === typeof d.then) return a.pendingChunks++, a = Oa(a, c, C, a.abortableTasks), c = a.ping, d.then(c, c), a.thenableState = Ba(), "@" + a.id.toString(16);
                    a.pendingChunks++;
                    c = a.nextChunkId++;
                    d = W(a, d);
                    X(a, c, d);
                    return "@" + c.toString(16);
                }
                if (null === c) return null;
                if ("object" === typeof c) {
                    if (c.$$typeof === u) return Sa(a, b, d, c);
                    if (c.$$typeof === ja) return f = c._context._globalName, b = a.writtenProviders, c = b.get(d), void 0 === c && (a.pendingChunks++, c = a.nextChunkId++, b.set(f, c), d = "P" + c.toString(16) + ":" + f + "\n", d = q.encode(d), a.completedJSONChunks.push(d)), "$" + c.toString(16);
                    if (c === Pa) {
                        a = C;
                        if (null === a) throw Error("Tried to pop a Context at the root of the app. This is a bug in React.");
                        c = a.parentValue;
                        a.context._currentValue = c === pa ? a.context._defaultValue : c;
                        C = a.parent;
                        return;
                    }
                    return c;
                }
                if ("string" === typeof c) return a = "$" === c[0] || "@" === c[0] ? "$" + c : c, a;
                if ("boolean" === typeof c || "number" === typeof c || "undefined" === typeof c) return c;
                if ("function" === typeof c) {
                    if (c.$$typeof === u) return Sa(a, b, d, c);
                    if (/^on[A-Z]/.test(d)) throw Error("Event handlers cannot be passed to Client Component props." + Z(b, d) + "\nIf you need interactivity, consider converting part of this to a Client Component.");
                    throw Error("Functions cannot be passed directly to Client Components because they're not serializable." + Z(b, d));
                }
                if ("symbol" === typeof c) {
                    f = a.writtenSymbols;
                    g = f.get(c);
                    if (void 0 !== g) return "$" + g.toString(16);
                    g = c.description;
                    if (Symbol.for(g) !== c) throw Error("Only global symbols received from Symbol.for(...) can be passed to Client Components. The symbol Symbol.for(" + (c.description + ") cannot be found among global symbols.") + Z(b, d));
                    a.pendingChunks++;
                    d = a.nextChunkId++;
                    b = t(g);
                    b = "S" + d.toString(16) + ":" + b + "\n";
                    b = q.encode(b);
                    a.completedModuleChunks.push(b);
                    f.set(c, d);
                    return "$" + d.toString(16);
                }
                if ("bigint" === typeof c) throw Error("BigInt (" + c + ") is not yet supported in Client Component props." + Z(b, d));
                throw Error("Type " + typeof c + " is not supported in Client Component props." + Z(b, d));
            }
            function W(a, b) {
                a = a.onError;
                b = a(b);
                if (null != b && "string" !== typeof b) throw Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof b + '" instead');
                return b || "";
            }
            function Ua(a, b) {
                null !== a.destination ? (a.status = 2, ha(a.destination, b)) : (a.status = 1, a.fatalError = b);
            }
            function X(a, b, d) {
                d = {
                    digest: d
                };
                b = "E" + b.toString(16) + ":" + t(d) + "\n";
                b = q.encode(b);
                a.completedErrorChunks.push(b);
            }
            function V(a) {
                var b = R.current, d = O;
                R.current = Ha;
                O = a.cache;
                J = a;
                try {
                    var c = a.pingedTasks;
                    a.pingedTasks = [];
                    for(var f = 0; f < c.length; f++){
                        var g = c[f];
                        var h = a;
                        if (0 === g.status) {
                            G(g.context);
                            try {
                                var k = g.model;
                                if ("object" === typeof k && null !== k && k.$$typeof === v) {
                                    var l = k, y = g.thenableState;
                                    g.model = k;
                                    k = T(l.type, l.key, l.ref, l.props, y);
                                    for(g.thenableState = null; "object" === typeof k && null !== k && k.$$typeof === v;)l = k, g.model = k, k = T(l.type, l.key, l.ref, l.props, null);
                                }
                                var aa = g.id, ba = t(k, h.toJSON), ca = "J" + aa.toString(16) + ":" + ba + "\n";
                                var da = q.encode(ca);
                                h.completedJSONChunks.push(da);
                                h.abortableTasks.delete(g);
                                g.status = 1;
                            } catch (E) {
                                var F = E === H ? Aa() : E;
                                if ("object" === typeof F && null !== F && "function" === typeof F.then) {
                                    var Ea = g.ping;
                                    F.then(Ea, Ea);
                                    g.thenableState = Ba();
                                } else {
                                    h.abortableTasks.delete(g);
                                    g.status = 4;
                                    var Xa = W(h, F);
                                    X(h, g.id, Xa);
                                }
                            }
                        }
                    }
                    null !== a.destination && Va(a, a.destination);
                } catch (E) {
                    W(a, E), Ua(a, E);
                } finally{
                    R.current = b, O = d, J = null;
                }
            }
            function Va(a, b) {
                m = new Uint8Array(512);
                n = 0;
                try {
                    for(var d = a.completedModuleChunks, c = 0; c < d.length; c++)if (a.pendingChunks--, !p(b, d[c])) {
                        a.destination = null;
                        c++;
                        break;
                    }
                    d.splice(0, c);
                    var f = a.completedJSONChunks;
                    for(c = 0; c < f.length; c++)if (a.pendingChunks--, !p(b, f[c])) {
                        a.destination = null;
                        c++;
                        break;
                    }
                    f.splice(0, c);
                    var g = a.completedErrorChunks;
                    for(c = 0; c < g.length; c++)if (a.pendingChunks--, !p(b, g[c])) {
                        a.destination = null;
                        c++;
                        break;
                    }
                    g.splice(0, c);
                } finally{
                    m && 0 < n && (b.enqueue(new Uint8Array(m.buffer, 0, n)), m = null, n = 0);
                }
                0 === a.pendingChunks && b.close();
            }
            function Wa(a, b) {
                try {
                    var d = a.abortableTasks;
                    if (0 < d.size) {
                        var c = W(a, void 0 === b ? Error("The render was aborted by the server without a reason.") : b);
                        a.pendingChunks++;
                        var f = a.nextChunkId++;
                        X(a, f, c);
                        d.forEach(function(b) {
                            b.status = 3;
                            var c = "$" + f.toString(16);
                            b = b.id;
                            c = t(c);
                            c = "J" + b.toString(16) + ":" + c + "\n";
                            c = q.encode(c);
                            a.completedErrorChunks.push(c);
                        });
                        d.clear();
                    }
                    null !== a.destination && Va(a, a.destination);
                } catch (g) {
                    W(a, g), Ua(a, g);
                }
            }
            function Na(a) {
                if (a) {
                    var b = C;
                    G(null);
                    for(var d = 0; d < a.length; d++){
                        var c = a[d], f = c[0];
                        c = c[1];
                        Q[f] || (Q[f] = ea.createServerContext(f, pa));
                        xa(Q[f], c);
                    }
                    a = C;
                    G(b);
                    return a;
                }
                return null;
            }
            exports.renderToReadableStream = function(a, b, d) {
                var c = La(a, b, d ? d.onError : void 0, d ? d.context : void 0, d ? d.identifierPrefix : void 0);
                if (d && d.signal) {
                    var f = d.signal;
                    if (f.aborted) Wa(c, f.reason);
                    else {
                        var g = function() {
                            Wa(c, f.reason);
                            f.removeEventListener("abort", g);
                        };
                        f.addEventListener("abort", g);
                    }
                }
                return new ReadableStream({
                    type: "bytes",
                    start: function() {
                        e ? fa.run(c.cache, V, c) : V(c);
                    },
                    pull: function(a) {
                        if (1 === c.status) c.status = 2, ha(a, c.fatalError);
                        else if (2 !== c.status && null === c.destination) {
                            c.destination = a;
                            try {
                                Va(c, a);
                            } catch (k) {
                                W(c, k), Ua(c, k);
                            }
                        }
                    },
                    cancel: function() {}
                }, {
                    highWaterMark: 0
                });
            };
        /***/ },
        /***/ 610: /***/ (module1, __unused_webpack_exports, __nccwpck_require__)=>{
            if (true) {
                module1.exports = __nccwpck_require__(421);
            } else {}
        /***/ },
        /***/ 522: /***/ (module1)=>{
            module1.exports = __webpack_require__(5731);
        /***/ },
        /***/ 255: /***/ (module1)=>{
            module1.exports = __webpack_require__(4912);
        /***/ }
    };
    /************************************************************************/ /******/ // The module cache
    /******/ var __webpack_module_cache__ = {};
    /******/ /******/ // The require function
    /******/ function __nccwpck_require__(moduleId) {
        /******/ // Check if module is in cache
        /******/ var cachedModule = __webpack_module_cache__[moduleId];
        /******/ if (cachedModule !== undefined) {
            /******/ return cachedModule.exports;
        /******/ }
        /******/ // Create a new module (and put it into the cache)
        /******/ var module1 = __webpack_module_cache__[moduleId] = {
            /******/ // no module.id needed
            /******/ // no module.loaded needed
            /******/ exports: {}
        };
        /******/ /******/ // Execute the module function
        /******/ var threw = true;
        /******/ try {
            /******/ __webpack_modules__[moduleId](module1, module1.exports, __nccwpck_require__);
            /******/ threw = false;
        /******/ } finally{
            /******/ if (threw) delete __webpack_module_cache__[moduleId];
        /******/ }
        /******/ /******/ // Return the exports of the module
        /******/ return module1.exports;
    /******/ }
    /******/ /************************************************************************/ /******/ /* webpack/runtime/compat */ /******/ /******/ if (typeof __nccwpck_require__ !== "undefined") __nccwpck_require__.ab = __dirname + "/";
    /******/ /************************************************************************/ /******/ /******/ // startup
    /******/ // Load entry module and return exports
    /******/ // This entry module used 'module' so it can't be inlined
    /******/ var __webpack_exports__ = __nccwpck_require__(610);
    /******/ module.exports = __webpack_exports__;
/******/ /******/ })();


/***/ }),

/***/ 7996:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/**
 * @license React
 * react.shared-subset.production.min.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
var m = Object.assign, n = {
    current: null
};
function p() {
    return new Map;
}
if ("function" === typeof fetch) {
    var q = fetch, r = function(a, b) {
        var d = n.current;
        if (!d || b && b.signal && b.signal !== d.getCacheSignal()) return q(a, b);
        if ("string" !== typeof a || b) {
            var c = new Request(a, b);
            if ("GET" !== c.method && "HEAD" !== c.method || c.keepalive) return q(a, b);
            var e = JSON.stringify([
                c.method,
                Array.from(c.headers.entries()),
                c.mode,
                c.redirect,
                c.credentials,
                c.referrer,
                c.referrerPolicy,
                c.integrity
            ]);
            c = c.url;
        } else e = '["GET",[],null,"follow",null,null,null,null]', c = a;
        var f = d.getCacheForType(p);
        d = f.get(c);
        if (void 0 === d) a = q(a, b), f.set(c, [
            e,
            a
        ]);
        else {
            c = 0;
            for(f = d.length; c < f; c += 2){
                var g = d[c + 1];
                if (d[c] === e) return a = g, a.then(function(a) {
                    return a.clone();
                });
            }
            a = q(a, b);
            d.push(e, a);
        }
        return a.then(function(a) {
            return a.clone();
        });
    };
    m(r, q);
    try {
        fetch = r;
    } catch (a) {
        try {
            globalThis.fetch = r;
        } catch (b) {
            ;
        }
    }
}
var t = Symbol.for("react.element"), u = Symbol.for("react.portal"), v = Symbol.for("react.fragment"), w = Symbol.for("react.strict_mode"), x = Symbol.for("react.profiler"), y = Symbol.for("react.provider"), z = Symbol.for("react.server_context"), A = Symbol.for("react.forward_ref"), B = Symbol.for("react.suspense"), C = Symbol.for("react.memo"), aa = Symbol.for("react.lazy"), D = Symbol.for("react.default_value"), E = Symbol.iterator;
function ba(a) {
    if (null === a || "object" !== typeof a) return null;
    a = E && a[E] || a["@@iterator"];
    return "function" === typeof a ? a : null;
}
function F(a) {
    for(var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, d = 1; d < arguments.length; d++)b += "&args[]=" + encodeURIComponent(arguments[d]);
    return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
var G = {
    isMounted: function() {
        return !1;
    },
    enqueueForceUpdate: function() {},
    enqueueReplaceState: function() {},
    enqueueSetState: function() {}
}, H = {};
function I(a, b, d) {
    this.props = a;
    this.context = b;
    this.refs = H;
    this.updater = d || G;
}
I.prototype.isReactComponent = {};
I.prototype.setState = function(a, b) {
    if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error(F(85));
    this.updater.enqueueSetState(this, a, b, "setState");
};
I.prototype.forceUpdate = function(a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
};
function J() {}
J.prototype = I.prototype;
function K(a, b, d) {
    this.props = a;
    this.context = b;
    this.refs = H;
    this.updater = d || G;
}
var L = K.prototype = new J;
L.constructor = K;
m(L, I.prototype);
L.isPureReactComponent = !0;
var M = Array.isArray, N = Object.prototype.hasOwnProperty, O = {
    current: null
}, P = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
};
function ca(a, b) {
    return {
        $$typeof: t,
        type: a.type,
        key: b,
        ref: a.ref,
        props: a.props,
        _owner: a._owner
    };
}
function Q(a) {
    return "object" === typeof a && null !== a && a.$$typeof === t;
}
function escape(a) {
    var b = {
        "=": "=0",
        ":": "=2"
    };
    return "$" + a.replace(/[=:]/g, function(a) {
        return b[a];
    });
}
var R = /\/+/g;
function S(a, b) {
    return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
}
function T(a, b, d, c, e) {
    var f = typeof a;
    if ("undefined" === f || "boolean" === f) a = null;
    var g = !1;
    if (null === a) g = !0;
    else switch(f){
        case "string":
        case "number":
            g = !0;
            break;
        case "object":
            switch(a.$$typeof){
                case t:
                case u:
                    g = !0;
            }
    }
    if (g) return g = a, e = e(g), a = "" === c ? "." + S(g, 0) : c, M(e) ? (d = "", null != a && (d = a.replace(R, "$&/") + "/"), T(e, b, d, "", function(a) {
        return a;
    })) : null != e && (Q(e) && (e = ca(e, d + (!e.key || g && g.key === e.key ? "" : ("" + e.key).replace(R, "$&/") + "/") + a)), b.push(e)), 1;
    g = 0;
    c = "" === c ? "." : c + ":";
    if (M(a)) for(var h = 0; h < a.length; h++){
        f = a[h];
        var k = c + S(f, h);
        g += T(f, b, d, k, e);
    }
    else if (k = ba(a), "function" === typeof k) for(a = k.call(a), h = 0; !(f = a.next()).done;)f = f.value, k = c + S(f, h++), g += T(f, b, d, k, e);
    else if ("object" === f) throw b = String(a), Error(F(31, "[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b));
    return g;
}
function U(a, b, d) {
    if (null == a) return a;
    var c = [], e = 0;
    T(a, c, "", "", function(a) {
        return b.call(d, a, e++);
    });
    return c;
}
function da(a) {
    if (-1 === a._status) {
        var b = a._result;
        b = b();
        b.then(function(b) {
            if (0 === a._status || -1 === a._status) a._status = 1, a._result = b;
        }, function(b) {
            if (0 === a._status || -1 === a._status) a._status = 2, a._result = b;
        });
        -1 === a._status && (a._status = 0, a._result = b);
    }
    if (1 === a._status) return a._result.default;
    throw a._result;
}
function ea() {
    return new WeakMap;
}
function V() {
    return {
        s: 0,
        v: void 0,
        o: null,
        p: null
    };
}
var W = {
    current: null
}, X = {
    transition: null
}, Y = {
    ReactCurrentDispatcher: W,
    ReactCurrentCache: n,
    ReactCurrentBatchConfig: X,
    ReactCurrentOwner: O,
    ContextRegistry: {}
}, Z = Y.ContextRegistry;
exports.Children = {
    map: U,
    forEach: function(a, b, d) {
        U(a, function() {
            b.apply(this, arguments);
        }, d);
    },
    count: function(a) {
        var b = 0;
        U(a, function() {
            b++;
        });
        return b;
    },
    toArray: function(a) {
        return U(a, function(a) {
            return a;
        }) || [];
    },
    only: function(a) {
        if (!Q(a)) throw Error(F(143));
        return a;
    }
};
exports.Fragment = v;
exports.Profiler = x;
exports.StrictMode = w;
exports.Suspense = B;
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Y;
exports.cache = function(a) {
    return function() {
        var b = n.current;
        if (!b) return a.apply(null, arguments);
        var d = b.getCacheForType(ea);
        b = d.get(a);
        void 0 === b && (b = V(), d.set(a, b));
        d = 0;
        for(var c = arguments.length; d < c; d++){
            var e = arguments[d];
            if ("function" === typeof e || "object" === typeof e && null !== e) {
                var f = b.o;
                null === f && (b.o = f = new WeakMap);
                b = f.get(e);
                void 0 === b && (b = V(), f.set(e, b));
            } else f = b.p, null === f && (b.p = f = new Map), b = f.get(e), void 0 === b && (b = V(), f.set(e, b));
        }
        if (1 === b.s) return b.v;
        if (2 === b.s) throw b.v;
        try {
            var g = a.apply(null, arguments);
            d = b;
            d.s = 1;
            return d.v = g;
        } catch (h) {
            throw g = b, g.s = 2, g.v = h, h;
        }
    };
};
exports.cloneElement = function(a, b, d) {
    if (null === a || void 0 === a) throw Error(F(267, a));
    var c = m({}, a.props), e = a.key, f = a.ref, g = a._owner;
    if (null != b) {
        void 0 !== b.ref && (f = b.ref, g = O.current);
        void 0 !== b.key && (e = "" + b.key);
        if (a.type && a.type.defaultProps) var h = a.type.defaultProps;
        for(k in b)N.call(b, k) && !P.hasOwnProperty(k) && (c[k] = void 0 === b[k] && void 0 !== h ? h[k] : b[k]);
    }
    var k = arguments.length - 2;
    if (1 === k) c.children = d;
    else if (1 < k) {
        h = Array(k);
        for(var l = 0; l < k; l++)h[l] = arguments[l + 2];
        c.children = h;
    }
    return {
        $$typeof: t,
        type: a.type,
        key: e,
        ref: f,
        props: c,
        _owner: g
    };
};
exports.createElement = function(a, b, d) {
    var c, e = {}, f = null, g = null;
    if (null != b) for(c in void 0 !== b.ref && (g = b.ref), void 0 !== b.key && (f = "" + b.key), b)N.call(b, c) && !P.hasOwnProperty(c) && (e[c] = b[c]);
    var h = arguments.length - 2;
    if (1 === h) e.children = d;
    else if (1 < h) {
        for(var k = Array(h), l = 0; l < h; l++)k[l] = arguments[l + 2];
        e.children = k;
    }
    if (a && a.defaultProps) for(c in h = a.defaultProps, h)void 0 === e[c] && (e[c] = h[c]);
    return {
        $$typeof: t,
        type: a,
        key: f,
        ref: g,
        props: e,
        _owner: O.current
    };
};
exports.createRef = function() {
    return {
        current: null
    };
};
exports.createServerContext = function(a, b) {
    var d = !0;
    if (!Z[a]) {
        d = !1;
        var c = {
            $$typeof: z,
            _currentValue: b,
            _currentValue2: b,
            _defaultValue: b,
            _threadCount: 0,
            Provider: null,
            Consumer: null,
            _globalName: a
        };
        c.Provider = {
            $$typeof: y,
            _context: c
        };
        Z[a] = c;
    }
    c = Z[a];
    if (c._defaultValue === D) c._defaultValue = b, c._currentValue === D && (c._currentValue = b), c._currentValue2 === D && (c._currentValue2 = b);
    else if (d) throw Error(F(429, a));
    return c;
};
exports.forwardRef = function(a) {
    return {
        $$typeof: A,
        render: a
    };
};
exports.isValidElement = Q;
exports.lazy = function(a) {
    return {
        $$typeof: aa,
        _payload: {
            _status: -1,
            _result: a
        },
        _init: da
    };
};
exports.memo = function(a, b) {
    return {
        $$typeof: C,
        type: a,
        compare: void 0 === b ? null : b
    };
};
exports.startTransition = function(a) {
    var b = X.transition;
    X.transition = {};
    try {
        a();
    } finally{
        X.transition = b;
    }
};
exports.use = function(a) {
    return W.current.use(a);
};
exports.useCallback = function(a, b) {
    return W.current.useCallback(a, b);
};
exports.useContext = function(a) {
    return W.current.useContext(a);
};
exports.useDebugValue = function() {};
exports.useId = function() {
    return W.current.useId();
};
exports.useMemo = function(a, b) {
    return W.current.useMemo(a, b);
};
exports.version = "18.3.0-next-3ba7add60-20221201";


/***/ }),

/***/ 5731:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

if (true) {
    module.exports = __webpack_require__(7996);
} else {}


/***/ }),

/***/ 6942:
/***/ ((module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.FLIGHT_PARAMETERS = exports.RSC_VARY_HEADER = exports.FETCH_CACHE_HEADER = exports.NEXT_ROUTER_PREFETCH = exports.NEXT_ROUTER_STATE_TREE = exports.RSC = void 0;
const RSC = "RSC";
exports.RSC = RSC;
const NEXT_ROUTER_STATE_TREE = "Next-Router-State-Tree";
exports.NEXT_ROUTER_STATE_TREE = NEXT_ROUTER_STATE_TREE;
const NEXT_ROUTER_PREFETCH = "Next-Router-Prefetch";
exports.NEXT_ROUTER_PREFETCH = NEXT_ROUTER_PREFETCH;
const FETCH_CACHE_HEADER = "x-vercel-sc-headers";
exports.FETCH_CACHE_HEADER = FETCH_CACHE_HEADER;
const RSC_VARY_HEADER = `${RSC}, ${NEXT_ROUTER_STATE_TREE}, ${NEXT_ROUTER_PREFETCH}`;
exports.RSC_VARY_HEADER = RSC_VARY_HEADER;
const FLIGHT_PARAMETERS = [
    [
        RSC
    ],
    [
        NEXT_ROUTER_STATE_TREE
    ],
    [
        NEXT_ROUTER_PREFETCH
    ]
];
exports.FLIGHT_PARAMETERS = FLIGHT_PARAMETERS;
if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
    Object.defineProperty(exports.default, "__esModule", {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=app-router-headers.js.map


/***/ }),

/***/ 5857:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports["default"] = AppRouter;
exports.fetchServerResponse = fetchServerResponse;
var _async_to_generator = (__webpack_require__(2709)/* ["default"] */ .Z);
var _interop_require_wildcard = (__webpack_require__(7595)/* ["default"] */ .Z);
var _object_without_properties_loose = (__webpack_require__(2526)/* ["default"] */ .Z);
var _react = _interop_require_wildcard(__webpack_require__(8038));
var _client = __webpack_require__(7897);
var _appRouterContext = __webpack_require__(3280);
var _reducer = __webpack_require__(1812);
var _hooksClientContext = __webpack_require__(9274);
var _useReducerWithDevtools = __webpack_require__(4523);
var _errorBoundary = __webpack_require__(2928);
var _appRouterHeaders = __webpack_require__(6942);
function AppRouter(props) {
    const { globalErrorComponent  } = props, rest = _object_without_properties_loose(props, [
        "globalErrorComponent"
    ]);
    return /*#__PURE__*/ _react.default.createElement(_errorBoundary.ErrorBoundary, {
        errorComponent: globalErrorComponent
    }, /*#__PURE__*/ _react.default.createElement(Router, Object.assign({}, rest)));
}
function urlToUrlWithoutFlightMarker(url) {
    const urlWithoutFlightParameters = new URL(url, location.origin);
    // TODO-APP: handle .rsc for static export case
    return urlWithoutFlightParameters;
}
const HotReloader =  true ? null : 0;
function fetchServerResponse(url, flightRouterState, prefetch) {
    return _fetchServerResponse.apply(this, arguments);
}
function _fetchServerResponse() {
    _fetchServerResponse = _async_to_generator(function*(url, flightRouterState, prefetch) {
        const headers = {
            // Enable flight response
            [_appRouterHeaders.RSC]: "1",
            // Provide the current router state
            [_appRouterHeaders.NEXT_ROUTER_STATE_TREE]: JSON.stringify(flightRouterState)
        };
        if (prefetch) {
            // Enable prefetch response
            headers[_appRouterHeaders.NEXT_ROUTER_PREFETCH] = "1";
        }
        const res = yield fetch(url.toString(), {
            headers
        });
        const canonicalUrl = res.redirected ? urlToUrlWithoutFlightMarker(res.url) : undefined;
        const isFlightResponse = res.headers.get("content-type") === "application/octet-stream";
        // If fetch returns something different than flight response handle it like a mpa navigation
        if (!isFlightResponse) {
            return [
                res.url,
                undefined
            ];
        }
        // Handle the `fetch` readable stream that can be unwrapped by `React.use`.
        const flightData = yield (0, _client).createFromFetch(Promise.resolve(res));
        return [
            flightData,
            canonicalUrl
        ];
    });
    return _fetchServerResponse.apply(this, arguments);
}
// Ensure the initialParallelRoutes are not combined because of double-rendering in the browser with Strict Mode.
let initialParallelRoutes =  true ? null : 0;
const prefetched = new Set();
function findHeadInCache(cache, parallelRoutes) {
    const isLastItem = Object.keys(parallelRoutes).length === 0;
    if (isLastItem) {
        return cache.head;
    }
    for(const key in parallelRoutes){
        const [segment, childParallelRoutes] = parallelRoutes[key];
        const childSegmentMap = cache.parallelRoutes.get(key);
        if (!childSegmentMap) {
            continue;
        }
        const cacheKey = Array.isArray(segment) ? segment[1] : segment;
        const cacheNode = childSegmentMap.get(cacheKey);
        if (!cacheNode) {
            continue;
        }
        const item = findHeadInCache(cacheNode, childParallelRoutes);
        if (item) {
            return item;
        }
    }
    return undefined;
}
/**
 * The global router that wraps the application components.
 */ function Router({ initialHead , initialTree , initialCanonicalUrl , children , assetPrefix  }) {
    const initialState = (0, _react).useMemo(()=>{
        return {
            tree: initialTree,
            cache: {
                status: _appRouterContext.CacheStates.READY,
                data: null,
                subTreeData: children,
                parallelRoutes:  true ? new Map() : 0
            },
            prefetchCache: new Map(),
            pushRef: {
                pendingPush: false,
                mpaNavigation: false
            },
            focusAndScrollRef: {
                apply: false
            },
            canonicalUrl: // This is safe to do as canonicalUrl can't be rendered, it's only used to control the history updates in the useEffect further down in this file.
             false ? 0 : initialCanonicalUrl
        };
    }, [
        children,
        initialCanonicalUrl,
        initialTree
    ]);
    const [{ tree , cache , prefetchCache , pushRef , focusAndScrollRef , canonicalUrl  }, dispatch, sync] = (0, _useReducerWithDevtools).useReducerWithReduxDevtools(_reducer.reducer, initialState);
    const head = (0, _react).useMemo(()=>{
        return findHeadInCache(cache, tree[1]);
    }, [
        cache,
        tree
    ]);
    (0, _react).useEffect(()=>{
        // Ensure initialParallelRoutes is cleaned up from memory once it's used.
        initialParallelRoutes = null;
    }, []);
    // Add memoized pathname/query for useSearchParams and usePathname.
    const { searchParams , pathname  } = (0, _react).useMemo(()=>{
        const url = new URL(canonicalUrl,  true ? "http://n" : 0);
        return {
            // This is turned into a readonly class in `useSearchParams`
            searchParams: url.searchParams,
            pathname: url.pathname
        };
    }, [
        canonicalUrl
    ]);
    /**
   * Server response that only patches the cache and tree.
   */ const changeByServerResponse = (0, _react).useCallback((previousTree, flightData, overrideCanonicalUrl)=>{
        dispatch({
            type: _reducer.ACTION_SERVER_PATCH,
            flightData,
            previousTree,
            overrideCanonicalUrl,
            cache: {
                status: _appRouterContext.CacheStates.LAZY_INITIALIZED,
                data: null,
                subTreeData: null,
                parallelRoutes: new Map()
            },
            mutable: {}
        });
    }, [
        dispatch
    ]);
    /**
   * The app router that is exposed through `useRouter`. It's only concerned with dispatching actions to the reducer, does not hold state.
   */ const appRouter = (0, _react).useMemo(()=>{
        const navigate = (href, navigateType, forceOptimisticNavigation)=>{
            return dispatch({
                type: _reducer.ACTION_NAVIGATE,
                url: new URL(href, location.origin),
                forceOptimisticNavigation,
                navigateType,
                cache: {
                    status: _appRouterContext.CacheStates.LAZY_INITIALIZED,
                    data: null,
                    subTreeData: null,
                    parallelRoutes: new Map()
                },
                mutable: {}
            });
        };
        const routerInstance = {
            back: ()=>window.history.back(),
            forward: ()=>window.history.forward(),
            prefetch: _async_to_generator(function*(href) {
                // If prefetch has already been triggered, don't trigger it again.
                if (prefetched.has(href)) {
                    return;
                }
                prefetched.add(href);
                const url = new URL(href, location.origin);
                try {
                    var ref;
                    const routerTree = ((ref = window.history.state) == null ? void 0 : ref.tree) || initialTree;
                    const serverResponse = yield fetchServerResponse(url, routerTree, true);
                    // @ts-ignore startTransition exists
                    _react.default.startTransition(()=>{
                        dispatch({
                            type: _reducer.ACTION_PREFETCH,
                            url,
                            tree: routerTree,
                            serverResponse
                        });
                    });
                } catch (err) {
                    ;
                }
            }),
            replace: (href, options = {})=>{
                // @ts-ignore startTransition exists
                _react.default.startTransition(()=>{
                    navigate(href, "replace", Boolean(options.forceOptimisticNavigation));
                });
            },
            push: (href, options = {})=>{
                // @ts-ignore startTransition exists
                _react.default.startTransition(()=>{
                    navigate(href, "push", Boolean(options.forceOptimisticNavigation));
                });
            },
            refresh: ()=>{
                // @ts-ignore startTransition exists
                _react.default.startTransition(()=>{
                    dispatch({
                        type: _reducer.ACTION_REFRESH,
                        cache: {
                            status: _appRouterContext.CacheStates.LAZY_INITIALIZED,
                            data: null,
                            subTreeData: null,
                            parallelRoutes: new Map()
                        },
                        mutable: {}
                    });
                });
            }
        };
        return routerInstance;
    }, [
        dispatch,
        initialTree
    ]);
    (0, _react).useEffect(()=>{
        // When mpaNavigation flag is set do a hard navigation to the new url.
        if (pushRef.mpaNavigation) {
            window.location.href = canonicalUrl;
            return;
        }
        // Identifier is shortened intentionally.
        // __NA is used to identify if the history entry can be handled by the app-router.
        // __N is used to identify if the history entry can be handled by the old router.
        const historyState = {
            __NA: true,
            tree
        };
        if (pushRef.pendingPush && (0, _reducer).createHrefFromUrl(new URL(window.location.href)) !== canonicalUrl) {
            // This intentionally mutates React state, pushRef is overwritten to ensure additional push/replace calls do not trigger an additional history entry.
            pushRef.pendingPush = false;
            window.history.pushState(historyState, "", canonicalUrl);
        } else {
            window.history.replaceState(historyState, "", canonicalUrl);
        }
        sync();
    }, [
        tree,
        pushRef,
        canonicalUrl,
        sync
    ]);
    // Add `window.nd` for debugging purposes.
    // This is not meant for use in applications as concurrent rendering will affect the cache/tree/router.
    if (false) {}
    /**
   * Handle popstate event, this is used to handle back/forward in the browser.
   * By default dispatches ACTION_RESTORE, however if the history entry was not pushed/replaced by app-router it will reload the page.
   * That case can happen when the old router injected the history entry.
   */ const onPopState = (0, _react).useCallback(({ state  })=>{
        if (!state) {
            // TODO-APP: this case only happens when pushState/replaceState was called outside of Next.js. It should probably reload the page in this case.
            return;
        }
        // This case happens when the history entry was pushed by the `pages` router.
        if (!state.__NA) {
            window.location.reload();
            return;
        }
        // @ts-ignore useTransition exists
        // TODO-APP: Ideally the back button should not use startTransition as it should apply the updates synchronously
        // Without startTransition works if the cache is there for this path
        _react.default.startTransition(()=>{
            dispatch({
                type: _reducer.ACTION_RESTORE,
                url: new URL(window.location.href),
                tree: state.tree
            });
        });
    }, [
        dispatch
    ]);
    // Register popstate event to call onPopstate.
    (0, _react).useEffect(()=>{
        window.addEventListener("popstate", onPopState);
        return ()=>{
            window.removeEventListener("popstate", onPopState);
        };
    }, [
        onPopState
    ]);
    const content = /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, head || initialHead, cache.subTreeData);
    return /*#__PURE__*/ _react.default.createElement(_hooksClientContext.PathnameContext.Provider, {
        value: pathname
    }, /*#__PURE__*/ _react.default.createElement(_hooksClientContext.SearchParamsContext.Provider, {
        value: searchParams
    }, /*#__PURE__*/ _react.default.createElement(_appRouterContext.GlobalLayoutRouterContext.Provider, {
        value: {
            changeByServerResponse,
            tree,
            focusAndScrollRef
        }
    }, /*#__PURE__*/ _react.default.createElement(_appRouterContext.AppRouterContext.Provider, {
        value: appRouter
    }, /*#__PURE__*/ _react.default.createElement(_appRouterContext.LayoutRouterContext.Provider, {
        value: {
            childNodes: cache.parallelRoutes,
            tree: tree,
            // Root node always has `url`
            // Provided in AppTreeContext to ensure it can be overwritten in layout-router
            url: canonicalUrl
        }
    }, HotReloader ? /*#__PURE__*/ _react.default.createElement(HotReloader, {
        assetPrefix: assetPrefix
    }, content) : content)))));
}
if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
    Object.defineProperty(exports.default, "__esModule", {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=app-router.js.map


/***/ }),

/***/ 5884:
/***/ ((module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.createAsyncLocalStorage = createAsyncLocalStorage;
class FakeAsyncLocalStorage {
    disable() {
        throw new Error("Invariant: AsyncLocalStorage accessed in runtime where it is not available");
    }
    getStore() {
        // This fake implementation of AsyncLocalStorage always returns `undefined`.
        return undefined;
    }
    run() {
        throw new Error("Invariant: AsyncLocalStorage accessed in runtime where it is not available");
    }
    exit() {
        throw new Error("Invariant: AsyncLocalStorage accessed in runtime where it is not available");
    }
    enterWith() {
        throw new Error("Invariant: AsyncLocalStorage accessed in runtime where it is not available");
    }
}
function createAsyncLocalStorage() {
    if (globalThis.AsyncLocalStorage) {
        return new globalThis.AsyncLocalStorage();
    }
    return new FakeAsyncLocalStorage();
}
if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
    Object.defineProperty(exports.default, "__esModule", {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=async-local-storage.js.map


/***/ }),

/***/ 1103:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.bailoutToClientRendering = bailoutToClientRendering;
var _dynamicNoSsr = __webpack_require__(6288);
var _staticGenerationAsyncStorage = __webpack_require__(3868);
function bailoutToClientRendering() {
    const staticGenerationStore = _staticGenerationAsyncStorage.staticGenerationAsyncStorage.getStore();
    if (staticGenerationStore == null ? void 0 : staticGenerationStore.forceStatic) {
        return true;
    }
    if (staticGenerationStore == null ? void 0 : staticGenerationStore.isStaticGeneration) {
        (0, _dynamicNoSsr).suspense();
    }
    return false;
}
if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
    Object.defineProperty(exports.default, "__esModule", {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=bailout-to-client-rendering.js.map


/***/ }),

/***/ 6820:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.clientHookInServerComponentError = clientHookInServerComponentError;
var _interop_require_default = (__webpack_require__(1378)/* ["default"] */ .Z);
var _react = _interop_require_default(__webpack_require__(8038));
function clientHookInServerComponentError(hookName) {
    if (false) {}
}
if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
    Object.defineProperty(exports.default, "__esModule", {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=client-hook-in-server-component-error.js.map


/***/ }),

/***/ 2928:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports["default"] = GlobalError;
exports.ErrorBoundary = ErrorBoundary;
var _interop_require_default = (__webpack_require__(1378)/* ["default"] */ .Z);
var _react = _interop_require_default(__webpack_require__(8038));
function GlobalError({ error  }) {
    return /*#__PURE__*/ _react.default.createElement("html", null, /*#__PURE__*/ _react.default.createElement("head", null), /*#__PURE__*/ _react.default.createElement("body", null, /*#__PURE__*/ _react.default.createElement("div", {
        style: styles.error
    }, /*#__PURE__*/ _react.default.createElement("div", {
        style: styles.desc
    }, /*#__PURE__*/ _react.default.createElement("h2", {
        style: styles.text
    }, "Application error: a client-side exception has occurred (see the browser console for more information)."), (error == null ? void 0 : error.digest) && /*#__PURE__*/ _react.default.createElement("p", {
        style: styles.text
    }, `Digest: ${error.digest}`)))));
}
const styles = {
    error: {
        fontFamily: '-apple-system, BlinkMacSystemFont, Roboto, "Segoe UI", "Fira Sans", Avenir, "Helvetica Neue", "Lucida Grande", sans-serif',
        height: "100vh",
        textAlign: "center",
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "center"
    },
    desc: {
        display: "inline-block",
        textAlign: "left",
        lineHeight: "49px",
        height: "49px",
        verticalAlign: "middle"
    },
    text: {
        fontSize: "14px",
        fontWeight: "normal",
        lineHeight: "49px",
        margin: 0,
        padding: 0
    }
};
class ErrorBoundaryHandler extends _react.default.Component {
    static getDerivedStateFromError(error) {
        return {
            error
        };
    }
    render() {
        if (this.state.error) {
            return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, this.props.errorStyles, /*#__PURE__*/ _react.default.createElement(this.props.errorComponent, {
                error: this.state.error,
                reset: this.reset
            }));
        }
        return this.props.children;
    }
    constructor(props){
        super(props);
        this.reset = ()=>{
            this.setState({
                error: null
            });
        };
        this.state = {
            error: null
        };
    }
}
exports.ErrorBoundaryHandler = ErrorBoundaryHandler;
function ErrorBoundary({ errorComponent , errorStyles , children  }) {
    if (errorComponent) {
        return /*#__PURE__*/ _react.default.createElement(ErrorBoundaryHandler, {
            errorComponent: errorComponent,
            errorStyles: errorStyles
        }, children);
    }
    return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, children);
}
if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
    Object.defineProperty(exports.default, "__esModule", {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=error-boundary.js.map


/***/ }),

/***/ 9295:
/***/ ((module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.createInfinitePromise = createInfinitePromise;
/**
 * Used to cache in createInfinitePromise
 */ let infinitePromise;
function createInfinitePromise() {
    if (!infinitePromise) {
        // Only create the Promise once
        infinitePromise = new Promise(()=>{
        // This is used to debug when the rendering is never updated.
        // setTimeout(() => {
        //   infinitePromise = new Error('Infinite promise')
        //   resolve()
        // }, 5000)
        });
    }
    return infinitePromise;
}
if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
    Object.defineProperty(exports.default, "__esModule", {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=infinite-promise.js.map


/***/ }),

/***/ 6043:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports["default"] = OuterLayoutRouter;
exports.InnerLayoutRouter = InnerLayoutRouter;
var _extends = (__webpack_require__(6237)/* ["default"] */ .Z);
var _interop_require_default = (__webpack_require__(1378)/* ["default"] */ .Z);
var _interop_require_wildcard = (__webpack_require__(7595)/* ["default"] */ .Z);
var _react = _interop_require_wildcard(__webpack_require__(8038));
var _reactDom = _interop_require_default(__webpack_require__(8704));
var _appRouterContext = __webpack_require__(3280);
var _appRouter = __webpack_require__(5857);
var _infinitePromise = __webpack_require__(9295);
var _errorBoundary = __webpack_require__(2928);
var _matchSegments = __webpack_require__(7965);
var _navigation = __webpack_require__(2202);
function OuterLayoutRouter({ parallelRouterKey , segmentPath , childProp , error , errorStyles , templateStyles , loading , loadingStyles , hasLoading , template , notFound , notFoundStyles  }) {
    const context = (0, _react).useContext(_appRouterContext.LayoutRouterContext);
    if (!context) {
        throw new Error("invariant expected layout router to be mounted");
    }
    const { childNodes , tree , url  } = context;
    // Get the current parallelRouter cache node
    let childNodesForParallelRouter = childNodes.get(parallelRouterKey);
    // If the parallel router cache node does not exist yet, create it.
    // This writes to the cache when there is no item in the cache yet. It never *overwrites* existing cache items which is why it's safe in concurrent mode.
    if (!childNodesForParallelRouter) {
        childNodes.set(parallelRouterKey, new Map());
        childNodesForParallelRouter = childNodes.get(parallelRouterKey);
    }
    // Get the active segment in the tree
    // The reason arrays are used in the data format is that these are transferred from the server to the browser so it's optimized to save bytes.
    const treeSegment = tree[1][parallelRouterKey][0];
    const childPropSegment = Array.isArray(childProp.segment) ? childProp.segment[1] : childProp.segment;
    // If segment is an array it's a dynamic route and we want to read the dynamic route value as the segment to get from the cache.
    const currentChildSegment = Array.isArray(treeSegment) ? treeSegment[1] : treeSegment;
    /**
   * Decides which segments to keep rendering, all segments that are not active will be wrapped in `<Offscreen>`.
   */ // TODO-APP: Add handling of `<Offscreen>` when it's available.
    const preservedSegments = [
        currentChildSegment
    ];
    return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, preservedSegments.map((preservedSegment)=>{
        return(/*
            - Error boundary
              - Only renders error boundary if error component is provided.
              - Rendered for each segment to ensure they have their own error state.
            - Loading boundary
              - Only renders suspense boundary if loading components is provided.
              - Rendered for each segment to ensure they have their own loading state.
              - Passed to the router during rendering to ensure it can be immediately rendered when suspending on a Flight fetch.
          */ /*#__PURE__*/ _react.default.createElement(_appRouterContext.TemplateContext.Provider, {
            key: preservedSegment,
            value: /*#__PURE__*/ _react.default.createElement(_errorBoundary.ErrorBoundary, {
                errorComponent: error,
                errorStyles: errorStyles
            }, /*#__PURE__*/ _react.default.createElement(LoadingBoundary, {
                hasLoading: hasLoading,
                loading: loading,
                loadingStyles: loadingStyles
            }, /*#__PURE__*/ _react.default.createElement(NotFoundBoundary, {
                notFound: notFound,
                notFoundStyles: notFoundStyles
            }, /*#__PURE__*/ _react.default.createElement(RedirectBoundary, null, /*#__PURE__*/ _react.default.createElement(InnerLayoutRouter, {
                parallelRouterKey: parallelRouterKey,
                url: url,
                tree: tree,
                childNodes: childNodesForParallelRouter,
                childProp: childPropSegment === preservedSegment ? childProp : null,
                segmentPath: segmentPath,
                path: preservedSegment,
                isActive: currentChildSegment === preservedSegment
            })))))
        }, /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, templateStyles, template)));
    }));
}
/**
 * Add refetch marker to router state at the point of the current layout segment.
 * This ensures the response returned is not further down than the current layout segment.
 */ function walkAddRefetch(segmentPathToWalk, treeToRecreate) {
    if (segmentPathToWalk) {
        const [segment, parallelRouteKey] = segmentPathToWalk;
        const isLast = segmentPathToWalk.length === 2;
        if ((0, _matchSegments).matchSegment(treeToRecreate[0], segment)) {
            if (treeToRecreate[1].hasOwnProperty(parallelRouteKey)) {
                if (isLast) {
                    const subTree = walkAddRefetch(undefined, treeToRecreate[1][parallelRouteKey]);
                    return [
                        treeToRecreate[0],
                        _extends({}, treeToRecreate[1], {
                            [parallelRouteKey]: [
                                subTree[0],
                                subTree[1],
                                subTree[2],
                                "refetch"
                            ]
                        })
                    ];
                }
                return [
                    treeToRecreate[0],
                    _extends({}, treeToRecreate[1], {
                        [parallelRouteKey]: walkAddRefetch(segmentPathToWalk.slice(2), treeToRecreate[1][parallelRouteKey])
                    })
                ];
            }
        }
    }
    return treeToRecreate;
}
// TODO-APP: Replace with new React API for finding dom nodes without a `ref` when available
/**
 * Wraps ReactDOM.findDOMNode with additional logic to hide React Strict Mode warning
 */ function findDOMNode(instance) {
    // Tree-shake for server bundle
    if (false) {}
    // Only apply strict mode warning when not in production
    if (false) {}
    return _reactDom.default.findDOMNode(instance);
}
/**
 * Check if the top of the HTMLElement is in the viewport.
 */ function topOfElementInViewport(element) {
    const rect = element.getBoundingClientRect();
    return rect.top >= 0;
}
class ScrollAndFocusHandler extends _react.default.Component {
    componentDidMount() {
        // Handle scroll and focus, it's only applied once in the first useEffect that triggers that changed.
        const { focusAndScrollRef  } = this.props;
        const domNode = findDOMNode(this);
        if (focusAndScrollRef.apply && domNode instanceof HTMLElement) {
            // State is mutated to ensure that the focus and scroll is applied only once.
            focusAndScrollRef.apply = false;
            // Set focus on the element
            domNode.focus();
            // Only scroll into viewport when the layout is not visible currently.
            if (!topOfElementInViewport(domNode)) {
                const htmlElement = document.documentElement;
                const existing = htmlElement.style.scrollBehavior;
                htmlElement.style.scrollBehavior = "auto";
                // In Chrome-based browsers we need to force reflow before calling `scrollTo`.
                // Otherwise it will not pickup the change in scrollBehavior
                // More info here: https://github.com/vercel/next.js/issues/40719#issuecomment-1336248042
                htmlElement.getClientRects();
                domNode.scrollIntoView();
                htmlElement.style.scrollBehavior = existing;
            }
        }
    }
    render() {
        return this.props.children;
    }
}
function InnerLayoutRouter({ parallelRouterKey , url , childNodes , childProp , segmentPath , tree , // isActive,
path  }) {
    const context = (0, _react).useContext(_appRouterContext.GlobalLayoutRouterContext);
    if (!context) {
        throw new Error("invariant global layout router not mounted");
    }
    const { changeByServerResponse , tree: fullTree , focusAndScrollRef  } = context;
    // Read segment path from the parallel router cache node.
    let childNode = childNodes.get(path);
    // If childProp is available this means it's the Flight / SSR case.
    if (childProp && // TODO-APP: verify if this can be null based on user code
    childProp.current !== null) {
        if (childNode && childNode.status === _appRouterContext.CacheStates.LAZY_INITIALIZED) {
            // @ts-expect-error TODO-APP: handle changing of the type
            childNode.status = _appRouterContext.CacheStates.READY;
            // @ts-expect-error TODO-APP: handle changing of the type
            childNode.subTreeData = childProp.current;
            // Mutates the prop in order to clean up the memory associated with the subTreeData as it is now part of the cache.
            childProp.current = null;
        } else {
            // Add the segment's subTreeData to the cache.
            // This writes to the cache when there is no item in the cache yet. It never *overwrites* existing cache items which is why it's safe in concurrent mode.
            childNodes.set(path, {
                status: _appRouterContext.CacheStates.READY,
                data: null,
                subTreeData: childProp.current,
                parallelRoutes: new Map()
            });
            // Mutates the prop in order to clean up the memory associated with the subTreeData as it is now part of the cache.
            childProp.current = null;
            // In the above case childNode was set on childNodes, so we have to get it from the cacheNodes again.
            childNode = childNodes.get(path);
        }
    }
    // When childNode is not available during rendering client-side we need to fetch it from the server.
    if (!childNode || childNode.status === _appRouterContext.CacheStates.LAZY_INITIALIZED) {
        /**
     * Router state with refetch marker added
     */ // TODO-APP: remove ''
        const refetchTree = walkAddRefetch([
            "",
            ...segmentPath
        ], fullTree);
        /**
     * Flight data fetch kicked off during render and put into the cache.
     */ childNodes.set(path, {
            status: _appRouterContext.CacheStates.DATA_FETCH,
            data: (0, _appRouter).fetchServerResponse(new URL(url, location.origin), refetchTree),
            subTreeData: null,
            head: childNode && childNode.status === _appRouterContext.CacheStates.LAZY_INITIALIZED ? childNode.head : undefined,
            parallelRoutes: childNode && childNode.status === _appRouterContext.CacheStates.LAZY_INITIALIZED ? childNode.parallelRoutes : new Map()
        });
        // In the above case childNode was set on childNodes, so we have to get it from the cacheNodes again.
        childNode = childNodes.get(path);
    }
    // This case should never happen so it throws an error. It indicates there's a bug in the Next.js.
    if (!childNode) {
        throw new Error("Child node should always exist");
    }
    // This case should never happen so it throws an error. It indicates there's a bug in the Next.js.
    if (childNode.subTreeData && childNode.data) {
        throw new Error("Child node should not have both subTreeData and data");
    }
    // If cache node has a data request we have to unwrap response by `use` and update the cache.
    if (childNode.data) {
        /**
     * Flight response data
     */ // When the data has not resolved yet `use` will suspend here.
        const [flightData, overrideCanonicalUrl] = (0, _react).use(childNode.data);
        // Handle case when navigating to page in `pages` from `app`
        if (typeof flightData === "string") {
            window.location.href = url;
            return null;
        }
        // segmentPath from the server does not match the layout's segmentPath
        childNode.data = null;
        // setTimeout is used to start a new transition during render, this is an intentional hack around React.
        setTimeout(()=>{
            // @ts-ignore startTransition exists
            _react.default.startTransition(()=>{
                changeByServerResponse(fullTree, flightData, overrideCanonicalUrl);
            });
        });
        // Suspend infinitely as `changeByServerResponse` will cause a different part of the tree to be rendered.
        (0, _react).use((0, _infinitePromise).createInfinitePromise());
    }
    // If cache node has no subTreeData and no data request we have to infinitely suspend as the data will likely flow in from another place.
    // TODO-APP: double check users can't return null in a component that will kick in here.
    if (!childNode.subTreeData) {
        (0, _react).use((0, _infinitePromise).createInfinitePromise());
    }
    const subtree = /*#__PURE__*/ _react.default.createElement(_appRouterContext.LayoutRouterContext.Provider, {
        value: {
            tree: tree[1][parallelRouterKey],
            childNodes: childNode.parallelRoutes,
            // TODO-APP: overriding of url for parallel routes
            url: url
        }
    }, childNode.subTreeData);
    // Ensure root layout is not wrapped in a div as the root layout renders `<html>`
    return /*#__PURE__*/ _react.default.createElement(ScrollAndFocusHandler, {
        focusAndScrollRef: focusAndScrollRef
    }, subtree);
}
/**
 * Renders suspense boundary with the provided "loading" property as the fallback.
 * If no loading property is provided it renders the children without a suspense boundary.
 */ function LoadingBoundary({ children , loading , loadingStyles , hasLoading  }) {
    if (hasLoading) {
        return /*#__PURE__*/ _react.default.createElement(_react.default.Suspense, {
            fallback: /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, loadingStyles, loading)
        }, children);
    }
    return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, children);
}
function HandleRedirect({ redirect  }) {
    const router = (0, _navigation).useRouter();
    (0, _react).useEffect(()=>{
        router.replace(redirect, {});
    }, [
        redirect,
        router
    ]);
    return null;
}
class RedirectErrorBoundary extends _react.default.Component {
    static getDerivedStateFromError(error) {
        var ref;
        if (error == null ? void 0 : (ref = error.digest) == null ? void 0 : ref.startsWith("NEXT_REDIRECT")) {
            const url = error.digest.split(";")[1];
            return {
                redirect: url
            };
        }
        // Re-throw if error is not for redirect
        throw error;
    }
    render() {
        const redirect = this.state.redirect;
        if (redirect !== null) {
            return /*#__PURE__*/ _react.default.createElement(HandleRedirect, {
                redirect: redirect
            });
        }
        return this.props.children;
    }
    constructor(props){
        super(props);
        this.state = {
            redirect: null
        };
    }
}
function RedirectBoundary({ children  }) {
    const router = (0, _navigation).useRouter();
    return /*#__PURE__*/ _react.default.createElement(RedirectErrorBoundary, {
        router: router
    }, children);
}
class NotFoundErrorBoundary extends _react.default.Component {
    static getDerivedStateFromError(error) {
        if ((error == null ? void 0 : error.digest) === "NEXT_NOT_FOUND") {
            return {
                notFoundTriggered: true
            };
        }
        // Re-throw if error is not for 404
        throw error;
    }
    render() {
        if (this.state.notFoundTriggered) {
            return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement("meta", {
                name: "robots",
                content: "noindex"
            }), this.props.notFoundStyles, this.props.notFound);
        }
        return this.props.children;
    }
    constructor(props){
        super(props);
        this.state = {
            notFoundTriggered: false
        };
    }
}
function NotFoundBoundary({ notFound , notFoundStyles , children  }) {
    return notFound ? /*#__PURE__*/ _react.default.createElement(NotFoundErrorBoundary, {
        notFound: notFound,
        notFoundStyles: notFoundStyles
    }, children) : /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, children);
}
if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
    Object.defineProperty(exports.default, "__esModule", {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=layout-router.js.map


/***/ }),

/***/ 7965:
/***/ ((module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.matchSegment = void 0;
const matchSegment = (existingSegment, segment)=>{
    // Common case: segment is just a string
    if (typeof existingSegment === "string" && typeof segment === "string") {
        return existingSegment === segment;
    }
    // Dynamic parameter case: segment is an array with param/value. Both param and value are compared.
    if (Array.isArray(existingSegment) && Array.isArray(segment)) {
        return existingSegment[0] === segment[0] && existingSegment[1] === segment[1];
    }
    return false;
};
exports.matchSegment = matchSegment;
if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
    Object.defineProperty(exports.default, "__esModule", {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=match-segments.js.map


/***/ }),

/***/ 2202:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.useSearchParams = useSearchParams;
exports.usePathname = usePathname;
Object.defineProperty(exports, "ServerInsertedHTMLContext", ({
    enumerable: true,
    get: function() {
        return _serverInsertedHtml.ServerInsertedHTMLContext;
    }
}));
Object.defineProperty(exports, "useServerInsertedHTML", ({
    enumerable: true,
    get: function() {
        return _serverInsertedHtml.useServerInsertedHTML;
    }
}));
exports.useRouter = useRouter;
exports.useSelectedLayoutSegments = useSelectedLayoutSegments;
exports.useSelectedLayoutSegment = useSelectedLayoutSegment;
Object.defineProperty(exports, "redirect", ({
    enumerable: true,
    get: function() {
        return _redirect.redirect;
    }
}));
Object.defineProperty(exports, "notFound", ({
    enumerable: true,
    get: function() {
        return _notFound.notFound;
    }
}));
var _react = __webpack_require__(8038);
var _appRouterContext = __webpack_require__(3280);
var _hooksClientContext = __webpack_require__(9274);
var _bailoutToClientRendering = __webpack_require__(1103);
var _clientHookInServerComponentError = __webpack_require__(6820);
var _serverInsertedHtml = __webpack_require__(3349);
var _redirect = __webpack_require__(9689);
var _notFound = __webpack_require__(7221);
const INTERNAL_URLSEARCHPARAMS_INSTANCE = Symbol("internal for urlsearchparams readonly");
function readonlyURLSearchParamsError() {
    return new Error("ReadonlyURLSearchParams cannot be modified");
}
class ReadonlyURLSearchParams {
    [Symbol.iterator]() {
        return this[INTERNAL_URLSEARCHPARAMS_INSTANCE][Symbol.iterator]();
    }
    append() {
        throw readonlyURLSearchParamsError();
    }
    delete() {
        throw readonlyURLSearchParamsError();
    }
    set() {
        throw readonlyURLSearchParamsError();
    }
    sort() {
        throw readonlyURLSearchParamsError();
    }
    constructor(urlSearchParams){
        // Since `new Headers` uses `this.append()` to fill the headers object ReadonlyHeaders can't extend from Headers directly as it would throw.
        this[INTERNAL_URLSEARCHPARAMS_INSTANCE] = urlSearchParams;
        this.entries = urlSearchParams.entries.bind(urlSearchParams);
        this.forEach = urlSearchParams.forEach.bind(urlSearchParams);
        this.get = urlSearchParams.get.bind(urlSearchParams);
        this.getAll = urlSearchParams.getAll.bind(urlSearchParams);
        this.has = urlSearchParams.has.bind(urlSearchParams);
        this.keys = urlSearchParams.keys.bind(urlSearchParams);
        this.values = urlSearchParams.values.bind(urlSearchParams);
        this.toString = urlSearchParams.toString.bind(urlSearchParams);
    }
}
function useSearchParams() {
    (0, _clientHookInServerComponentError).clientHookInServerComponentError("useSearchParams");
    const searchParams = (0, _react).useContext(_hooksClientContext.SearchParamsContext);
    const readonlySearchParams = (0, _react).useMemo(()=>{
        return new ReadonlyURLSearchParams(searchParams || new URLSearchParams());
    }, [
        searchParams
    ]);
    if ((0, _bailoutToClientRendering).bailoutToClientRendering()) {
        // TODO-APP: handle dynamic = 'force-static' here and on the client
        return readonlySearchParams;
    }
    if (!searchParams) {
        throw new Error("invariant expected search params to be mounted");
    }
    return readonlySearchParams;
}
function usePathname() {
    (0, _clientHookInServerComponentError).clientHookInServerComponentError("usePathname");
    return (0, _react).useContext(_hooksClientContext.PathnameContext);
}
function useRouter() {
    (0, _clientHookInServerComponentError).clientHookInServerComponentError("useRouter");
    const router = (0, _react).useContext(_appRouterContext.AppRouterContext);
    if (router === null) {
        throw new Error("invariant expected app router to be mounted");
    }
    return router;
}
// TODO-APP: handle parallel routes
function getSelectedLayoutSegmentPath(tree, parallelRouteKey, first = true, segmentPath = []) {
    let node;
    if (first) {
        // Use the provided parallel route key on the first parallel route
        node = tree[1][parallelRouteKey];
    } else {
        // After first parallel route prefer children, if there's no children pick the first parallel route.
        const parallelRoutes = tree[1];
        var _children;
        node = (_children = parallelRoutes.children) != null ? _children : Object.values(parallelRoutes)[0];
    }
    if (!node) return segmentPath;
    const segment = node[0];
    const segmentValue = Array.isArray(segment) ? segment[1] : segment;
    if (!segmentValue) return segmentPath;
    segmentPath.push(segmentValue);
    return getSelectedLayoutSegmentPath(node, parallelRouteKey, false, segmentPath);
}
function useSelectedLayoutSegments(parallelRouteKey = "children") {
    (0, _clientHookInServerComponentError).clientHookInServerComponentError("useSelectedLayoutSegments");
    const { tree  } = (0, _react).useContext(_appRouterContext.LayoutRouterContext);
    return getSelectedLayoutSegmentPath(tree, parallelRouteKey);
}
function useSelectedLayoutSegment(parallelRouteKey = "children") {
    (0, _clientHookInServerComponentError).clientHookInServerComponentError("useSelectedLayoutSegment");
    const selectedLayoutSegments = useSelectedLayoutSegments(parallelRouteKey);
    if (selectedLayoutSegments.length === 0) {
        return null;
    }
    return selectedLayoutSegments[0];
}
if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
    Object.defineProperty(exports.default, "__esModule", {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=navigation.js.map


/***/ }),

/***/ 7221:
/***/ ((module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.notFound = notFound;
exports.NOT_FOUND_ERROR_CODE = void 0;
const NOT_FOUND_ERROR_CODE = "NEXT_NOT_FOUND";
exports.NOT_FOUND_ERROR_CODE = NOT_FOUND_ERROR_CODE;
function notFound() {
    // eslint-disable-next-line no-throw-literal
    const error = new Error(NOT_FOUND_ERROR_CODE);
    error.digest = NOT_FOUND_ERROR_CODE;
    throw error;
}
if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
    Object.defineProperty(exports.default, "__esModule", {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=not-found.js.map


/***/ }),

/***/ 9689:
/***/ ((module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.redirect = redirect;
exports.REDIRECT_ERROR_CODE = void 0;
const REDIRECT_ERROR_CODE = "NEXT_REDIRECT";
exports.REDIRECT_ERROR_CODE = REDIRECT_ERROR_CODE;
function redirect(url) {
    // eslint-disable-next-line no-throw-literal
    const error = new Error(REDIRECT_ERROR_CODE);
    error.digest = REDIRECT_ERROR_CODE + ";" + url;
    throw error;
}
if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
    Object.defineProperty(exports.default, "__esModule", {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=redirect.js.map


/***/ }),

/***/ 1812:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.createHrefFromUrl = createHrefFromUrl;
exports.reducer = exports.ACTION_PREFETCH = exports.ACTION_SERVER_PATCH = exports.ACTION_RESTORE = exports.ACTION_NAVIGATE = exports.ACTION_REFRESH = void 0;
var _extends = (__webpack_require__(6237)/* ["default"] */ .Z);
var _appRouterContext = __webpack_require__(3280);
var _matchSegments = __webpack_require__(7965);
var _appRouter = __webpack_require__(5857);
/**
 * Create data fetching record for Promise.
 */ // TODO-APP: change `any` to type inference.
function createRecordFromThenable(thenable) {
    thenable.status = "pending";
    thenable.then((value)=>{
        if (thenable.status === "pending") {
            thenable.status = "fulfilled";
            thenable.value = value;
        }
    }, (err)=>{
        if (thenable.status === "pending") {
            thenable.status = "rejected";
            thenable.value = err;
        }
    });
    return thenable;
}
/**
 * Read record value or throw Promise if it's not resolved yet.
 */ function readRecordValue(thenable) {
    // @ts-expect-error TODO: fix type
    if (thenable.status === "fulfilled") {
        // @ts-expect-error TODO: fix type
        return thenable.value;
    } else {
        throw thenable;
    }
}
function createHrefFromUrl(url) {
    return url.pathname + url.search + url.hash;
}
/**
 * Invalidate cache one level down from the router state.
 */ function invalidateCacheByRouterState(newCache, existingCache, routerState) {
    // Remove segment that we got data for so that it is filled in during rendering of subTreeData.
    for(const key in routerState[1]){
        const segmentForParallelRoute = routerState[1][key][0];
        const cacheKey = Array.isArray(segmentForParallelRoute) ? segmentForParallelRoute[1] : segmentForParallelRoute;
        const existingParallelRoutesCacheNode = existingCache.parallelRoutes.get(key);
        if (existingParallelRoutesCacheNode) {
            let parallelRouteCacheNode = new Map(existingParallelRoutesCacheNode);
            parallelRouteCacheNode.delete(cacheKey);
            newCache.parallelRoutes.set(key, parallelRouteCacheNode);
        }
    }
}
function fillLazyItemsTillLeafWithHead(newCache, existingCache, routerState, head) {
    const isLastSegment = Object.keys(routerState[1]).length === 0;
    if (isLastSegment) {
        newCache.head = head;
        return;
    }
    // Remove segment that we got data for so that it is filled in during rendering of subTreeData.
    for(const key in routerState[1]){
        const parallelRouteState = routerState[1][key];
        const segmentForParallelRoute = parallelRouteState[0];
        const cacheKey = Array.isArray(segmentForParallelRoute) ? segmentForParallelRoute[1] : segmentForParallelRoute;
        if (existingCache) {
            const existingParallelRoutesCacheNode = existingCache.parallelRoutes.get(key);
            if (existingParallelRoutesCacheNode) {
                let parallelRouteCacheNode = new Map(existingParallelRoutesCacheNode);
                parallelRouteCacheNode.delete(cacheKey);
                const newCacheNode = {
                    status: _appRouterContext.CacheStates.LAZY_INITIALIZED,
                    data: null,
                    subTreeData: null,
                    parallelRoutes: new Map()
                };
                parallelRouteCacheNode.set(cacheKey, newCacheNode);
                fillLazyItemsTillLeafWithHead(newCacheNode, undefined, parallelRouteState, head);
                newCache.parallelRoutes.set(key, parallelRouteCacheNode);
                continue;
            }
        }
        const newCacheNode = {
            status: _appRouterContext.CacheStates.LAZY_INITIALIZED,
            data: null,
            subTreeData: null,
            parallelRoutes: new Map()
        };
        newCache.parallelRoutes.set(key, new Map([
            [
                cacheKey,
                newCacheNode
            ]
        ]));
        fillLazyItemsTillLeafWithHead(newCacheNode, undefined, parallelRouteState, head);
    }
}
/**
 * Fill cache with subTreeData based on flightDataPath
 */ function fillCacheWithNewSubTreeData(newCache, existingCache, flightDataPath) {
    const isLastEntry = flightDataPath.length <= 5;
    const [parallelRouteKey, segment] = flightDataPath;
    const segmentForCache = Array.isArray(segment) ? segment[1] : segment;
    const existingChildSegmentMap = existingCache.parallelRoutes.get(parallelRouteKey);
    if (!existingChildSegmentMap) {
        // Bailout because the existing cache does not have the path to the leaf node
        // Will trigger lazy fetch in layout-router because of missing segment
        return;
    }
    let childSegmentMap = newCache.parallelRoutes.get(parallelRouteKey);
    if (!childSegmentMap || childSegmentMap === existingChildSegmentMap) {
        childSegmentMap = new Map(existingChildSegmentMap);
        newCache.parallelRoutes.set(parallelRouteKey, childSegmentMap);
    }
    const existingChildCacheNode = existingChildSegmentMap.get(segmentForCache);
    let childCacheNode = childSegmentMap.get(segmentForCache);
    if (isLastEntry) {
        if (!childCacheNode || !childCacheNode.data || childCacheNode === existingChildCacheNode) {
            childCacheNode = {
                status: _appRouterContext.CacheStates.READY,
                data: null,
                subTreeData: flightDataPath[3],
                // Ensure segments other than the one we got data for are preserved.
                parallelRoutes: existingChildCacheNode ? new Map(existingChildCacheNode.parallelRoutes) : new Map()
            };
            if (existingChildCacheNode) {
                invalidateCacheByRouterState(childCacheNode, existingChildCacheNode, flightDataPath[2]);
            }
            fillLazyItemsTillLeafWithHead(childCacheNode, existingChildCacheNode, flightDataPath[2], flightDataPath[4]);
            childSegmentMap.set(segmentForCache, childCacheNode);
        }
        return;
    }
    if (!childCacheNode || !existingChildCacheNode) {
        // Bailout because the existing cache does not have the path to the leaf node
        // Will trigger lazy fetch in layout-router because of missing segment
        return;
    }
    if (childCacheNode === existingChildCacheNode) {
        childCacheNode = {
            status: childCacheNode.status,
            data: childCacheNode.data,
            subTreeData: childCacheNode.subTreeData,
            parallelRoutes: new Map(childCacheNode.parallelRoutes)
        };
        childSegmentMap.set(segmentForCache, childCacheNode);
    }
    fillCacheWithNewSubTreeData(childCacheNode, existingChildCacheNode, flightDataPath.slice(2));
}
/**
 * Fill cache up to the end of the flightSegmentPath, invalidating anything below it.
 */ function invalidateCacheBelowFlightSegmentPath(newCache, existingCache, flightSegmentPath) {
    const isLastEntry = flightSegmentPath.length <= 2;
    const [parallelRouteKey, segment] = flightSegmentPath;
    const segmentForCache = Array.isArray(segment) ? segment[1] : segment;
    const existingChildSegmentMap = existingCache.parallelRoutes.get(parallelRouteKey);
    if (!existingChildSegmentMap) {
        // Bailout because the existing cache does not have the path to the leaf node
        // Will trigger lazy fetch in layout-router because of missing segment
        return;
    }
    let childSegmentMap = newCache.parallelRoutes.get(parallelRouteKey);
    if (!childSegmentMap || childSegmentMap === existingChildSegmentMap) {
        childSegmentMap = new Map(existingChildSegmentMap);
        newCache.parallelRoutes.set(parallelRouteKey, childSegmentMap);
    }
    // In case of last entry don't copy further down.
    if (isLastEntry) {
        childSegmentMap.delete(segmentForCache);
        return;
    }
    const existingChildCacheNode = existingChildSegmentMap.get(segmentForCache);
    let childCacheNode = childSegmentMap.get(segmentForCache);
    if (!childCacheNode || !existingChildCacheNode) {
        // Bailout because the existing cache does not have the path to the leaf node
        // Will trigger lazy fetch in layout-router because of missing segment
        return;
    }
    if (childCacheNode === existingChildCacheNode) {
        childCacheNode = {
            status: childCacheNode.status,
            data: childCacheNode.data,
            subTreeData: childCacheNode.subTreeData,
            parallelRoutes: new Map(childCacheNode.parallelRoutes)
        };
        childSegmentMap.set(segmentForCache, childCacheNode);
    }
    invalidateCacheBelowFlightSegmentPath(childCacheNode, existingChildCacheNode, flightSegmentPath.slice(2));
}
/**
 * Kick off fetch based on the common layout between two routes. Fill cache with data property holding the in-progress fetch.
 */ function fillCacheWithDataProperty(newCache, existingCache, segments, fetchResponse) {
    const isLastEntry = segments.length === 1;
    const parallelRouteKey = "children";
    const [segment] = segments;
    const existingChildSegmentMap = existingCache.parallelRoutes.get(parallelRouteKey);
    if (!existingChildSegmentMap) {
        // Bailout because the existing cache does not have the path to the leaf node
        // Will trigger lazy fetch in layout-router because of missing segment
        return {
            bailOptimistic: true
        };
    }
    let childSegmentMap = newCache.parallelRoutes.get(parallelRouteKey);
    if (!childSegmentMap || childSegmentMap === existingChildSegmentMap) {
        childSegmentMap = new Map(existingChildSegmentMap);
        newCache.parallelRoutes.set(parallelRouteKey, childSegmentMap);
    }
    const existingChildCacheNode = existingChildSegmentMap.get(segment);
    let childCacheNode = childSegmentMap.get(segment);
    // In case of last segment start off the fetch at this level and don't copy further down.
    if (isLastEntry) {
        if (!childCacheNode || !childCacheNode.data || childCacheNode === existingChildCacheNode) {
            childSegmentMap.set(segment, {
                status: _appRouterContext.CacheStates.DATA_FETCH,
                data: fetchResponse(),
                subTreeData: null,
                parallelRoutes: new Map()
            });
        }
        return;
    }
    if (!childCacheNode || !existingChildCacheNode) {
        // Start fetch in the place where the existing cache doesn't have the data yet.
        if (!childCacheNode) {
            childSegmentMap.set(segment, {
                status: _appRouterContext.CacheStates.DATA_FETCH,
                data: fetchResponse(),
                subTreeData: null,
                parallelRoutes: new Map()
            });
        }
        return;
    }
    if (childCacheNode === existingChildCacheNode) {
        childCacheNode = {
            status: childCacheNode.status,
            data: childCacheNode.data,
            subTreeData: childCacheNode.subTreeData,
            parallelRoutes: new Map(childCacheNode.parallelRoutes)
        };
        childSegmentMap.set(segment, childCacheNode);
    }
    return fillCacheWithDataProperty(childCacheNode, existingChildCacheNode, segments.slice(1), fetchResponse);
}
/**
 * Create optimistic version of router state based on the existing router state and segments.
 * This is used to allow rendering layout-routers up till the point where data is missing.
 */ function createOptimisticTree(segments, flightRouterState, _isFirstSegment, parentRefetch, _href) {
    const [existingSegment, existingParallelRoutes] = flightRouterState || [
        null,
        {}
    ];
    const segment = segments[0];
    const isLastSegment = segments.length === 1;
    const segmentMatches = existingSegment !== null && (0, _matchSegments).matchSegment(existingSegment, segment);
    const shouldRefetchThisLevel = !flightRouterState || !segmentMatches;
    let parallelRoutes = {};
    if (existingSegment !== null && segmentMatches) {
        parallelRoutes = existingParallelRoutes;
    }
    let childTree;
    if (!isLastSegment) {
        const childItem = createOptimisticTree(segments.slice(1), parallelRoutes ? parallelRoutes.children : null, false, parentRefetch || shouldRefetchThisLevel);
        childTree = childItem;
    }
    const result = [
        segment,
        _extends({}, parallelRoutes, childTree ? {
            children: childTree
        } : {})
    ];
    if (!parentRefetch && shouldRefetchThisLevel) {
        result[3] = "refetch";
    }
    return result;
}
/**
 * Apply the router state from the Flight response. Creates a new router state tree.
 */ function applyRouterStatePatchToTree(flightSegmentPath, flightRouterState, treePatch) {
    const [segment, parallelRoutes, , , isRootLayout] = flightRouterState;
    // Root refresh
    if (flightSegmentPath.length === 1) {
        const tree = [
            ...treePatch
        ];
        return tree;
    }
    const [currentSegment, parallelRouteKey] = flightSegmentPath;
    // Tree path returned from the server should always match up with the current tree in the browser
    if (!(0, _matchSegments).matchSegment(currentSegment, segment)) {
        return null;
    }
    const lastSegment = flightSegmentPath.length === 2;
    let parallelRoutePatch;
    if (lastSegment) {
        parallelRoutePatch = treePatch;
    } else {
        parallelRoutePatch = applyRouterStatePatchToTree(flightSegmentPath.slice(2), parallelRoutes[parallelRouteKey], treePatch);
        if (parallelRoutePatch === null) {
            return null;
        }
    }
    const tree = [
        flightSegmentPath[0],
        _extends({}, parallelRoutes, {
            [parallelRouteKey]: parallelRoutePatch
        })
    ];
    // Current segment is the root layout
    if (isRootLayout) {
        tree[4] = true;
    }
    return tree;
}
function shouldHardNavigate(flightSegmentPath, flightRouterState, treePatch) {
    const [segment, parallelRoutes] = flightRouterState;
    // TODO-APP: Check if `as` can be replaced.
    const [currentSegment, parallelRouteKey] = flightSegmentPath;
    // Check if current segment matches the existing segment.
    if (!(0, _matchSegments).matchSegment(currentSegment, segment)) {
        // If dynamic parameter in tree doesn't match up with segment path a hard navigation is triggered.
        if (Array.isArray(currentSegment)) {
            return true;
        }
        // If the existing segment did not match soft navigation is triggered.
        return false;
    }
    const lastSegment = flightSegmentPath.length <= 2;
    if (lastSegment) {
        return false;
    }
    return shouldHardNavigate(flightSegmentPath.slice(2), parallelRoutes[parallelRouteKey], treePatch);
}
function isNavigatingToNewRootLayout(currentTree, nextTree) {
    // Compare segments
    const currentTreeSegment = currentTree[0];
    const nextTreeSegment = nextTree[0];
    // If any segment is different before we find the root layout, the root layout has changed.
    // E.g. /same/(group1)/layout.js -> /same/(group2)/layout.js
    // First segment is 'same' for both, keep looking. (group1) changed to (group2) before the root layout was found, it must have changed.
    if (Array.isArray(currentTreeSegment) && Array.isArray(nextTreeSegment)) {
        // Compare dynamic param name and type but ignore the value, different values would not affect the current root layout
        // /[name] - /slug1 and /slug2, both values (slug1 & slug2) still has the same layout /[name]/layout.js
        if (currentTreeSegment[0] !== nextTreeSegment[0] || currentTreeSegment[2] !== nextTreeSegment[2]) {
            return true;
        }
    } else if (currentTreeSegment !== nextTreeSegment) {
        return true;
    }
    // Current tree root layout found
    if (currentTree[4]) {
        // If the next tree doesn't have the root layout flag, it must have changed.
        return !nextTree[4];
    }
    // Current tree  didn't have its root layout here, must have changed.
    if (nextTree[4]) {
        return true;
    }
    // We can't assume it's `parallelRoutes.children` here in case the root layout is `app/@something/layout.js`
    // But it's not possible to be more than one parallelRoutes before the root layout is found
    // TODO-APP: change to traverse all parallel routes
    const currentTreeChild = Object.values(currentTree[1])[0];
    const nextTreeChild = Object.values(nextTree[1])[0];
    if (!currentTreeChild || !nextTreeChild) return true;
    return isNavigatingToNewRootLayout(currentTreeChild, nextTreeChild);
}
const ACTION_REFRESH = "refresh";
exports.ACTION_REFRESH = ACTION_REFRESH;
const ACTION_NAVIGATE = "navigate";
exports.ACTION_NAVIGATE = ACTION_NAVIGATE;
const ACTION_RESTORE = "restore";
exports.ACTION_RESTORE = ACTION_RESTORE;
const ACTION_SERVER_PATCH = "server-patch";
exports.ACTION_SERVER_PATCH = ACTION_SERVER_PATCH;
const ACTION_PREFETCH = "prefetch";
exports.ACTION_PREFETCH = ACTION_PREFETCH;
/**
 * Reducer that handles the app-router state updates.
 */ function clientReducer(state, action) {
    switch(action.type){
        case ACTION_NAVIGATE:
            {
                const { url , navigateType , cache , mutable , forceOptimisticNavigation  } = action;
                const { pathname , search  } = url;
                const href = createHrefFromUrl(url);
                const pendingPush = navigateType === "push";
                const isForCurrentTree = JSON.stringify(mutable.previousTree) === JSON.stringify(state.tree);
                if (mutable.mpaNavigation && isForCurrentTree) {
                    return {
                        // Set href.
                        canonicalUrl: mutable.canonicalUrlOverride ? mutable.canonicalUrlOverride : href,
                        pushRef: {
                            pendingPush,
                            mpaNavigation: mutable.mpaNavigation
                        },
                        // All navigation requires scroll and focus management to trigger.
                        focusAndScrollRef: {
                            apply: false
                        },
                        // Apply cache.
                        cache: state.cache,
                        prefetchCache: state.prefetchCache,
                        // Apply patched router state.
                        tree: state.tree
                    };
                }
                // Handle concurrent rendering / strict mode case where the cache and tree were already populated.
                if (mutable.patchedTree && isForCurrentTree) {
                    return {
                        // Set href.
                        canonicalUrl: mutable.canonicalUrlOverride ? mutable.canonicalUrlOverride : href,
                        pushRef: {
                            pendingPush,
                            mpaNavigation: false
                        },
                        // All navigation requires scroll and focus management to trigger.
                        focusAndScrollRef: {
                            apply: true
                        },
                        // Apply cache.
                        cache: mutable.useExistingCache ? state.cache : cache,
                        prefetchCache: state.prefetchCache,
                        // Apply patched router state.
                        tree: mutable.patchedTree
                    };
                }
                const prefetchValues = state.prefetchCache.get(href);
                if (prefetchValues) {
                    // The one before last item is the router state tree patch
                    const { flightData , tree: newTree , canonicalUrlOverride  } = prefetchValues;
                    // Handle case when navigating to page in `pages` from `app`
                    if (typeof flightData === "string") {
                        return {
                            canonicalUrl: flightData,
                            // Enable mpaNavigation
                            pushRef: {
                                pendingPush: true,
                                mpaNavigation: true
                            },
                            // Don't apply scroll and focus management.
                            focusAndScrollRef: {
                                apply: false
                            },
                            cache: state.cache,
                            prefetchCache: state.prefetchCache,
                            tree: state.tree
                        };
                    }
                    if (newTree !== null) {
                        mutable.previousTree = state.tree;
                        mutable.patchedTree = newTree;
                        mutable.mpaNavigation = isNavigatingToNewRootLayout(state.tree, newTree);
                        if (newTree === null) {
                            throw new Error("SEGMENT MISMATCH");
                        }
                        const canonicalUrlOverrideHrefVal = canonicalUrlOverride ? createHrefFromUrl(canonicalUrlOverride) : undefined;
                        if (canonicalUrlOverrideHrefVal) {
                            mutable.canonicalUrlOverride = canonicalUrlOverrideHrefVal;
                        }
                        mutable.mpaNavigation = isNavigatingToNewRootLayout(state.tree, newTree);
                        // TODO-APP: Currently the Flight data can only have one item but in the future it can have multiple paths.
                        const flightDataPath = flightData[0];
                        const flightSegmentPath = flightDataPath.slice(0, -3);
                        // The one before last item is the router state tree patch
                        const [treePatch, subTreeData, head] = flightDataPath.slice(-3);
                        // Handles case where prefetch only returns the router tree patch without rendered components.
                        if (subTreeData !== null) {
                            if (flightDataPath.length === 3) {
                                cache.status = _appRouterContext.CacheStates.READY;
                                cache.subTreeData = subTreeData;
                                fillLazyItemsTillLeafWithHead(cache, state.cache, treePatch, head);
                            } else {
                                cache.status = _appRouterContext.CacheStates.READY;
                                // Copy subTreeData for the root node of the cache.
                                cache.subTreeData = state.cache.subTreeData;
                                // Create a copy of the existing cache with the subTreeData applied.
                                fillCacheWithNewSubTreeData(cache, state.cache, flightDataPath);
                            }
                        }
                        const hardNavigate = search !== location.search || shouldHardNavigate([
                            "",
                            ...flightSegmentPath
                        ], state.tree, newTree);
                        if (hardNavigate) {
                            cache.status = _appRouterContext.CacheStates.READY;
                            // Copy subTreeData for the root node of the cache.
                            cache.subTreeData = state.cache.subTreeData;
                            invalidateCacheBelowFlightSegmentPath(cache, state.cache, flightSegmentPath);
                        // Ensure the existing cache value is used when the cache was not invalidated.
                        } else if (subTreeData === null) {
                            mutable.useExistingCache = true;
                        }
                        const canonicalUrlOverrideHref = canonicalUrlOverride ? createHrefFromUrl(canonicalUrlOverride) : undefined;
                        if (canonicalUrlOverrideHref) {
                            mutable.canonicalUrlOverride = canonicalUrlOverrideHref;
                        }
                        return {
                            // Set href.
                            canonicalUrl: canonicalUrlOverrideHref ? canonicalUrlOverrideHref : href,
                            // Set pendingPush.
                            pushRef: {
                                pendingPush,
                                mpaNavigation: false
                            },
                            // All navigation requires scroll and focus management to trigger.
                            focusAndScrollRef: {
                                apply: true
                            },
                            // Apply patched cache.
                            cache: mutable.useExistingCache ? state.cache : cache,
                            prefetchCache: state.prefetchCache,
                            // Apply patched tree.
                            tree: newTree
                        };
                    }
                }
                // When doing a hard push there can be two cases: with optimistic tree and without
                // The with optimistic tree case only happens when the layouts have a loading state (loading.js)
                // The without optimistic tree case happens when there is no loading state, in that case we suspend in this reducer
                // forceOptimisticNavigation is used for links that have `prefetch={false}`.
                if (forceOptimisticNavigation) {
                    const segments = pathname.split("/");
                    // TODO-APP: figure out something better for index pages
                    segments.push("");
                    // Optimistic tree case.
                    // If the optimistic tree is deeper than the current state leave that deeper part out of the fetch
                    const optimisticTree = createOptimisticTree(segments, state.tree, true, false, href);
                    // Copy subTreeData for the root node of the cache.
                    cache.status = _appRouterContext.CacheStates.READY;
                    cache.subTreeData = state.cache.subTreeData;
                    // Copy existing cache nodes as far as possible and fill in `data` property with the started data fetch.
                    // The `data` property is used to suspend in layout-router during render if it hasn't resolved yet by the time it renders.
                    const res = fillCacheWithDataProperty(cache, state.cache, segments.slice(1), ()=>(0, _appRouter).fetchServerResponse(url, optimisticTree));
                    // If optimistic fetch couldn't happen it falls back to the non-optimistic case.
                    if (!(res == null ? void 0 : res.bailOptimistic)) {
                        mutable.previousTree = state.tree;
                        mutable.patchedTree = optimisticTree;
                        mutable.mpaNavigation = isNavigatingToNewRootLayout(state.tree, optimisticTree);
                        return {
                            // Set href.
                            canonicalUrl: href,
                            // Set pendingPush.
                            pushRef: {
                                pendingPush,
                                mpaNavigation: false
                            },
                            // All navigation requires scroll and focus management to trigger.
                            focusAndScrollRef: {
                                apply: true
                            },
                            // Apply patched cache.
                            cache: cache,
                            prefetchCache: state.prefetchCache,
                            // Apply optimistic tree.
                            tree: optimisticTree
                        };
                    }
                }
                // Below is the not-optimistic case. Data is fetched at the root and suspended there without a suspense boundary.
                // If no in-flight fetch at the top, start it.
                if (!cache.data) {
                    cache.data = createRecordFromThenable((0, _appRouter).fetchServerResponse(url, state.tree));
                }
                // Unwrap cache data with `use` to suspend here (in the reducer) until the fetch resolves.
                const [flightData, canonicalUrlOverride] = readRecordValue(cache.data);
                // Handle case when navigating to page in `pages` from `app`
                if (typeof flightData === "string") {
                    return {
                        canonicalUrl: flightData,
                        // Enable mpaNavigation
                        pushRef: {
                            pendingPush: true,
                            mpaNavigation: true
                        },
                        // Don't apply scroll and focus management.
                        focusAndScrollRef: {
                            apply: false
                        },
                        cache: state.cache,
                        prefetchCache: state.prefetchCache,
                        tree: state.tree
                    };
                }
                // Remove cache.data as it has been resolved at this point.
                cache.data = null;
                // TODO-APP: Currently the Flight data can only have one item but in the future it can have multiple paths.
                const flightDataPath = flightData[0];
                // The one before last item is the router state tree patch
                const [treePatch, subTreeData, head] = flightDataPath.slice(-3);
                // Path without the last segment, router state, and the subTreeData
                const flightSegmentPath = flightDataPath.slice(0, -4);
                // Create new tree based on the flightSegmentPath and router state patch
                const newTree = applyRouterStatePatchToTree([
                    "",
                    ...flightSegmentPath
                ], state.tree, treePatch);
                if (newTree === null) {
                    throw new Error("SEGMENT MISMATCH");
                }
                const canonicalUrlOverrideHref = canonicalUrlOverride ? createHrefFromUrl(canonicalUrlOverride) : undefined;
                if (canonicalUrlOverrideHref) {
                    mutable.canonicalUrlOverride = canonicalUrlOverrideHref;
                }
                mutable.previousTree = state.tree;
                mutable.patchedTree = newTree;
                mutable.mpaNavigation = isNavigatingToNewRootLayout(state.tree, newTree);
                if (flightDataPath.length === 3) {
                    cache.status = _appRouterContext.CacheStates.READY;
                    cache.subTreeData = subTreeData;
                    fillLazyItemsTillLeafWithHead(cache, state.cache, treePatch, head);
                } else {
                    // Copy subTreeData for the root node of the cache.
                    cache.status = _appRouterContext.CacheStates.READY;
                    cache.subTreeData = state.cache.subTreeData;
                    // Create a copy of the existing cache with the subTreeData applied.
                    fillCacheWithNewSubTreeData(cache, state.cache, flightDataPath);
                }
                return {
                    // Set href.
                    canonicalUrl: canonicalUrlOverrideHref ? canonicalUrlOverrideHref : href,
                    // Set pendingPush.
                    pushRef: {
                        pendingPush,
                        mpaNavigation: false
                    },
                    // All navigation requires scroll and focus management to trigger.
                    focusAndScrollRef: {
                        apply: true
                    },
                    // Apply patched cache.
                    cache: cache,
                    prefetchCache: state.prefetchCache,
                    // Apply patched tree.
                    tree: newTree
                };
            }
        case ACTION_SERVER_PATCH:
            {
                const { flightData , previousTree , overrideCanonicalUrl , cache , mutable  } = action;
                // When a fetch is slow to resolve it could be that you navigated away while the request was happening or before the reducer runs.
                // In that case opt-out of applying the patch given that the data could be stale.
                if (JSON.stringify(previousTree) !== JSON.stringify(state.tree)) {
                    ;
                    // Keep everything as-is.
                    return state;
                }
                if (mutable.mpaNavigation) {
                    return {
                        // Set href.
                        canonicalUrl: mutable.canonicalUrlOverride ? mutable.canonicalUrlOverride : state.canonicalUrl,
                        // TODO-APP: verify mpaNavigation not being set is correct here.
                        pushRef: {
                            pendingPush: true,
                            mpaNavigation: mutable.mpaNavigation
                        },
                        // All navigation requires scroll and focus management to trigger.
                        focusAndScrollRef: {
                            apply: false
                        },
                        // Apply cache.
                        cache: state.cache,
                        prefetchCache: state.prefetchCache,
                        // Apply patched router state.
                        tree: state.tree
                    };
                }
                // Handle concurrent rendering / strict mode case where the cache and tree were already populated.
                if (mutable.patchedTree) {
                    return {
                        // Keep href as it was set during navigate / restore
                        canonicalUrl: mutable.canonicalUrlOverride ? mutable.canonicalUrlOverride : state.canonicalUrl,
                        // Keep pushRef as server-patch only causes cache/tree update.
                        pushRef: state.pushRef,
                        // Keep focusAndScrollRef as server-patch only causes cache/tree update.
                        focusAndScrollRef: state.focusAndScrollRef,
                        // Apply patched router state
                        tree: mutable.patchedTree,
                        prefetchCache: state.prefetchCache,
                        // Apply patched cache
                        cache: cache
                    };
                }
                // Handle case when navigating to page in `pages` from `app`
                if (typeof flightData === "string") {
                    return {
                        // Set href.
                        canonicalUrl: flightData,
                        // Enable mpaNavigation as this is a navigation that the app-router shouldn't handle.
                        pushRef: {
                            pendingPush: true,
                            mpaNavigation: true
                        },
                        // Don't apply scroll and focus management.
                        focusAndScrollRef: {
                            apply: false
                        },
                        // Other state is kept as-is.
                        cache: state.cache,
                        prefetchCache: state.prefetchCache,
                        tree: state.tree
                    };
                }
                // TODO-APP: Currently the Flight data can only have one item but in the future it can have multiple paths.
                const flightDataPath = flightData[0];
                // Slices off the last segment (which is at -4) as it doesn't exist in the tree yet
                const flightSegmentPath = flightDataPath.slice(0, -4);
                const [treePatch, subTreeData, head] = flightDataPath.slice(-3);
                const newTree = applyRouterStatePatchToTree([
                    "",
                    ...flightSegmentPath
                ], state.tree, treePatch);
                if (newTree === null) {
                    throw new Error("SEGMENT MISMATCH");
                }
                const canonicalUrlOverrideHref = overrideCanonicalUrl ? createHrefFromUrl(overrideCanonicalUrl) : undefined;
                if (canonicalUrlOverrideHref) {
                    mutable.canonicalUrlOverride = canonicalUrlOverrideHref;
                }
                mutable.patchedTree = newTree;
                mutable.mpaNavigation = isNavigatingToNewRootLayout(state.tree, newTree);
                // Root refresh
                if (flightDataPath.length === 3) {
                    cache.status = _appRouterContext.CacheStates.READY;
                    cache.subTreeData = subTreeData;
                    fillLazyItemsTillLeafWithHead(cache, state.cache, treePatch, head);
                } else {
                    // Copy subTreeData for the root node of the cache.
                    cache.status = _appRouterContext.CacheStates.READY;
                    cache.subTreeData = state.cache.subTreeData;
                    fillCacheWithNewSubTreeData(cache, state.cache, flightDataPath);
                }
                return {
                    // Keep href as it was set during navigate / restore
                    canonicalUrl: canonicalUrlOverrideHref ? canonicalUrlOverrideHref : state.canonicalUrl,
                    // Keep pushRef as server-patch only causes cache/tree update.
                    pushRef: state.pushRef,
                    // Keep focusAndScrollRef as server-patch only causes cache/tree update.
                    focusAndScrollRef: state.focusAndScrollRef,
                    // Apply patched router state
                    tree: newTree,
                    prefetchCache: state.prefetchCache,
                    // Apply patched cache
                    cache: cache
                };
            }
        case ACTION_RESTORE:
            {
                const { url , tree  } = action;
                const href = createHrefFromUrl(url);
                return {
                    // Set canonical url
                    canonicalUrl: href,
                    pushRef: state.pushRef,
                    focusAndScrollRef: state.focusAndScrollRef,
                    cache: state.cache,
                    prefetchCache: state.prefetchCache,
                    // Restore provided tree
                    tree: tree
                };
            }
        // TODO-APP: Add test for not scrolling to nearest layout when calling refresh.
        // TODO-APP: Add test for startTransition(() => {router.push('/'); router.refresh();}), that case should scroll.
        case ACTION_REFRESH:
            {
                const { cache , mutable  } = action;
                const href = state.canonicalUrl;
                const isForCurrentTree = JSON.stringify(mutable.previousTree) === JSON.stringify(state.tree);
                if (mutable.mpaNavigation && isForCurrentTree) {
                    return {
                        // Set href.
                        canonicalUrl: mutable.canonicalUrlOverride ? mutable.canonicalUrlOverride : state.canonicalUrl,
                        // TODO-APP: verify mpaNavigation not being set is correct here.
                        pushRef: {
                            pendingPush: true,
                            mpaNavigation: mutable.mpaNavigation
                        },
                        // All navigation requires scroll and focus management to trigger.
                        focusAndScrollRef: {
                            apply: false
                        },
                        // Apply cache.
                        cache: state.cache,
                        prefetchCache: state.prefetchCache,
                        // Apply patched router state.
                        tree: state.tree
                    };
                }
                // Handle concurrent rendering / strict mode case where the cache and tree were already populated.
                if (mutable.patchedTree && isForCurrentTree) {
                    return {
                        // Set href.
                        canonicalUrl: mutable.canonicalUrlOverride ? mutable.canonicalUrlOverride : href,
                        // set pendingPush (always false in this case).
                        pushRef: state.pushRef,
                        // Apply focus and scroll.
                        // TODO-APP: might need to disable this for Fast Refresh.
                        focusAndScrollRef: {
                            apply: false
                        },
                        cache: cache,
                        prefetchCache: state.prefetchCache,
                        tree: mutable.patchedTree
                    };
                }
                if (!cache.data) {
                    // Fetch data from the root of the tree.
                    cache.data = createRecordFromThenable((0, _appRouter).fetchServerResponse(new URL(href, location.origin), [
                        state.tree[0],
                        state.tree[1],
                        state.tree[2],
                        "refetch"
                    ]));
                }
                const [flightData, canonicalUrlOverride] = readRecordValue(cache.data);
                // Handle case when navigating to page in `pages` from `app`
                if (typeof flightData === "string") {
                    return {
                        canonicalUrl: flightData,
                        pushRef: {
                            pendingPush: true,
                            mpaNavigation: true
                        },
                        focusAndScrollRef: {
                            apply: false
                        },
                        cache: state.cache,
                        prefetchCache: state.prefetchCache,
                        tree: state.tree
                    };
                }
                // Remove cache.data as it has been resolved at this point.
                cache.data = null;
                // TODO-APP: Currently the Flight data can only have one item but in the future it can have multiple paths.
                const flightDataPath = flightData[0];
                // FlightDataPath with more than two items means unexpected Flight data was returned
                if (flightDataPath.length !== 3) {
                    ;
                    return state;
                }
                // Given the path can only have two items the items are only the router state and subTreeData for the root.
                const [treePatch, subTreeData, head] = flightDataPath;
                const newTree = applyRouterStatePatchToTree([
                    ""
                ], state.tree, treePatch);
                if (newTree === null) {
                    throw new Error("SEGMENT MISMATCH");
                }
                const canonicalUrlOverrideHref = canonicalUrlOverride ? createHrefFromUrl(canonicalUrlOverride) : undefined;
                if (canonicalUrlOverride) {
                    mutable.canonicalUrlOverride = canonicalUrlOverrideHref;
                }
                mutable.previousTree = state.tree;
                mutable.patchedTree = newTree;
                mutable.mpaNavigation = isNavigatingToNewRootLayout(state.tree, newTree);
                // Set subTreeData for the root node of the cache.
                cache.status = _appRouterContext.CacheStates.READY;
                cache.subTreeData = subTreeData;
                fillLazyItemsTillLeafWithHead(cache, state.cache, treePatch, head);
                return {
                    // Set href, this doesn't reuse the state.canonicalUrl as because of concurrent rendering the href might change between dispatching and applying.
                    canonicalUrl: canonicalUrlOverrideHref ? canonicalUrlOverrideHref : href,
                    // set pendingPush (always false in this case).
                    pushRef: state.pushRef,
                    // TODO-APP: might need to disable this for Fast Refresh.
                    focusAndScrollRef: {
                        apply: false
                    },
                    // Apply patched cache.
                    cache: cache,
                    prefetchCache: state.prefetchCache,
                    // Apply patched router state.
                    tree: newTree
                };
            }
        case ACTION_PREFETCH:
            {
                const { url , serverResponse  } = action;
                const [flightData, canonicalUrlOverride] = serverResponse;
                if (typeof flightData === "string") {
                    return state;
                }
                const href = createHrefFromUrl(url);
                // TODO-APP: Currently the Flight data can only have one item but in the future it can have multiple paths.
                const flightDataPath = flightData[0];
                // The one before last item is the router state tree patch
                const [treePatch] = flightDataPath.slice(-3);
                const flightSegmentPath = flightDataPath.slice(0, -3);
                const newTree = applyRouterStatePatchToTree([
                    "",
                    ...flightSegmentPath
                ], state.tree, treePatch);
                // Patch did not apply correctly
                if (newTree === null) {
                    return state;
                }
                // Create new tree based on the flightSegmentPath and router state patch
                state.prefetchCache.set(href, {
                    flightData,
                    // Create new tree based on the flightSegmentPath and router state patch
                    tree: newTree,
                    canonicalUrlOverride
                });
                return state;
            }
        // This case should never be hit as dispatch is strongly typed.
        default:
            throw new Error("Unknown action");
    }
}
function serverReducer(state, _action) {
    return state;
}
const reducer =  true ? serverReducer : 0;
exports.reducer = reducer;
if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
    Object.defineProperty(exports.default, "__esModule", {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=reducer.js.map


/***/ }),

/***/ 4429:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports["default"] = RenderFromTemplateContext;
var _interop_require_wildcard = (__webpack_require__(7595)/* ["default"] */ .Z);
var _react = _interop_require_wildcard(__webpack_require__(8038));
var _appRouterContext = __webpack_require__(3280);
function RenderFromTemplateContext() {
    const children = (0, _react).useContext(_appRouterContext.TemplateContext);
    return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, children);
}
if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
    Object.defineProperty(exports.default, "__esModule", {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=render-from-template-context.js.map


/***/ }),

/***/ 3868:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.staticGenerationAsyncStorage = void 0;
var _asyncLocalStorage = __webpack_require__(5884);
const staticGenerationAsyncStorage = (0, _asyncLocalStorage).createAsyncLocalStorage();
exports.staticGenerationAsyncStorage = staticGenerationAsyncStorage;
if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
    Object.defineProperty(exports.default, "__esModule", {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=static-generation-async-storage.js.map


/***/ }),

/***/ 4523:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.useReducerWithReduxDevtools = void 0;
var _react = __webpack_require__(8038);
function normalizeRouterState(val) {
    if (val instanceof Map) {
        const obj = {};
        for (const [key, value] of val.entries()){
            if (typeof value === "function") {
                obj[key] = "fn()";
                continue;
            }
            if (typeof value === "object" && value !== null) {
                if (value.$$typeof) {
                    obj[key] = value.$$typeof.toString();
                    continue;
                }
                if (value._bundlerConfig) {
                    obj[key] = "FlightData";
                    continue;
                }
            }
            obj[key] = normalizeRouterState(value);
        }
        return obj;
    }
    if (typeof val === "object" && val !== null) {
        const obj = {};
        for(const key in val){
            const value = val[key];
            if (typeof value === "function") {
                obj[key] = "fn()";
                continue;
            }
            if (typeof value === "object" && value !== null) {
                if (value.$$typeof) {
                    obj[key] = value.$$typeof.toString();
                    continue;
                }
                if (value.hasOwnProperty("_bundlerConfig")) {
                    obj[key] = "FlightData";
                    continue;
                }
            }
            obj[key] = normalizeRouterState(value);
        }
        return obj;
    }
    if (Array.isArray(val)) {
        return val.map(normalizeRouterState);
    }
    return val;
}
function devToolReducer(fn, ref) {
    return (state, action)=>{
        const res = fn(state, action);
        if (ref.current) {
            ref.current.send(action, normalizeRouterState(res));
        }
        return res;
    };
}
function useReducerWithReduxDevtoolsNoop(fn, initialState) {
    const [state, dispatch] = (0, _react).useReducer(fn, initialState);
    return [
        state,
        dispatch,
        ()=>{}
    ];
}
function useReducerWithReduxDevtoolsImpl(fn, initialState) {
    const devtoolsConnectionRef = (0, _react).useRef();
    const enabledRef = (0, _react).useRef();
    (0, _react).useEffect(()=>{
        if (devtoolsConnectionRef.current || enabledRef.current === false) {
            return;
        }
        if (enabledRef.current === undefined && typeof window.__REDUX_DEVTOOLS_EXTENSION__ === "undefined") {
            enabledRef.current = false;
            return;
        }
        devtoolsConnectionRef.current = window.__REDUX_DEVTOOLS_EXTENSION__.connect({
            instanceId: 1,
            name: "next-router"
        });
        if (devtoolsConnectionRef.current) {
            devtoolsConnectionRef.current.init(normalizeRouterState(initialState));
        }
        return ()=>{
            devtoolsConnectionRef.current = undefined;
        };
    }, [
        initialState
    ]);
    const [state, dispatch] = (0, _react).useReducer(devToolReducer(/* logReducer( */ fn /*)*/ , devtoolsConnectionRef), initialState);
    const sync = (0, _react).useCallback(()=>{
        if (devtoolsConnectionRef.current) {
            devtoolsConnectionRef.current.send({
                type: "RENDER_SYNC"
            }, normalizeRouterState(state));
        }
    }, [
        state
    ]);
    return [
        state,
        dispatch,
        sync
    ];
}
const useReducerWithReduxDevtools =  false ? 0 : useReducerWithReduxDevtoolsNoop;
exports.useReducerWithReduxDevtools = useReducerWithReduxDevtools;
if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
    Object.defineProperty(exports.default, "__esModule", {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=use-reducer-with-devtools.js.map


/***/ }),

/***/ 6288:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.suspense = suspense;
exports.NoSSR = NoSSR;
var _interop_require_default = (__webpack_require__(1378)/* ["default"] */ .Z);
var _react = _interop_require_default(__webpack_require__(8038));
var _noSsrError = __webpack_require__(7342);
function suspense() {
    const error = new Error(_noSsrError.NEXT_DYNAMIC_NO_SSR_CODE);
    error.digest = _noSsrError.NEXT_DYNAMIC_NO_SSR_CODE;
    throw error;
}
function NoSSR({ children  }) {
    if (true) {
        suspense();
    }
    return children;
} //# sourceMappingURL=dynamic-no-ssr.js.map


/***/ }),

/***/ 4495:
/***/ ((module) => {

function _extends() {
  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  return _extends.apply(this, arguments);
}
module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 229:
/***/ ((module) => {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 2203:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "cn": () => (/* binding */ esm_atom),
  "Dv": () => (/* binding */ useAtomValue),
  "b9": () => (/* binding */ useSetAtom)
});

// UNUSED EXPORTS: Provider, SECRET_INTERNAL_getScopeContext, SECRET_INTERNAL_registerPromiseAbort, unstable_createStore, useAtom

// EXTERNAL MODULE: external "next/dist/compiled/react"
var react_ = __webpack_require__(8038);
;// CONCATENATED MODULE: ../../.yarn/__virtual__/jotai-virtual-bf09d46f21/0/cache/jotai-npm-1.13.1-1a4b1cff07-bc1f88ec1d.zip/node_modules/jotai/esm/vanilla.mjs
let keyCount = 0;
function atom(read, write) {
  const key = `atom${++keyCount}`;
  const config = {
    toString: () => key
  };
  if (typeof read === "function") {
    config.read = read;
  } else {
    config.init = read;
    config.read = (get) => get(config);
    config.write = (get, set, arg) => set(
      config,
      typeof arg === "function" ? arg(get(config)) : arg
    );
  }
  if (write) {
    config.write = write;
  }
  return config;
}

const hasInitialValue = (atom) => "init" in atom;
const isActuallyWritableAtom = (atom) => !!atom.write;
const cancelPromiseMap = /* @__PURE__ */ new WeakMap();
const registerCancelPromise = (promise, cancel) => {
  cancelPromiseMap.set(promise, cancel);
  promise.catch(() => {
  }).finally(() => cancelPromiseMap.delete(promise));
};
const cancelPromise = (promise, next) => {
  const cancel = cancelPromiseMap.get(promise);
  if (cancel) {
    cancelPromiseMap.delete(promise);
    cancel(next);
  }
};
const resolvePromise = (promise, value) => {
  promise.status = "fulfilled";
  promise.value = value;
};
const rejectPromise = (promise, e) => {
  promise.status = "rejected";
  promise.reason = e;
};
const isEqualAtomValue = (a, b) => "v" in a && "v" in b && Object.is(a.v, b.v);
const isEqualAtomError = (a, b) => "e" in a && "e" in b && Object.is(a.e, b.e);
const hasPromiseAtomValue = (a) => "v" in a && a.v instanceof Promise;
const returnAtomValue = (atomState) => {
  if ("e" in atomState) {
    throw atomState.e;
  }
  return atomState.v;
};
const createStore = () => {
  const atomStateMap = /* @__PURE__ */ new WeakMap();
  const mountedMap = /* @__PURE__ */ new WeakMap();
  const pendingMap = /* @__PURE__ */ new Map();
  let stateListeners;
  let mountedAtoms;
  if (true) {
    stateListeners = /* @__PURE__ */ new Set();
    mountedAtoms = /* @__PURE__ */ new Set();
  }
  const getAtomState = (atom) => atomStateMap.get(atom);
  const setAtomState = (atom, atomState) => {
    if (true) {
      Object.freeze(atomState);
    }
    const prevAtomState = atomStateMap.get(atom);
    atomStateMap.set(atom, atomState);
    if (!pendingMap.has(atom)) {
      pendingMap.set(atom, prevAtomState);
    }
    if (prevAtomState && hasPromiseAtomValue(prevAtomState)) {
      const next = "v" in atomState ? atomState.v instanceof Promise ? atomState.v : Promise.resolve(atomState.v) : Promise.reject(atomState.e);
      cancelPromise(prevAtomState.v, next);
    }
  };
  const updateDependencies = (atom, nextAtomState, depSet) => {
    const dependencies = /* @__PURE__ */ new Map();
    let changed = false;
    depSet.forEach((a) => {
      const aState = a === atom ? nextAtomState : getAtomState(a);
      if (aState) {
        dependencies.set(a, aState);
        if (nextAtomState.d.get(a) !== aState) {
          changed = true;
        }
      } else if (true) {
        console.warn("[Bug] atom state not found");
      }
    });
    if (changed || nextAtomState.d.size !== dependencies.size) {
      nextAtomState.d = dependencies;
    }
  };
  const setAtomValue = (atom, value, depSet) => {
    const prevAtomState = getAtomState(atom);
    const nextAtomState = {
      d: (prevAtomState == null ? void 0 : prevAtomState.d) || /* @__PURE__ */ new Map(),
      v: value
    };
    if (depSet) {
      updateDependencies(atom, nextAtomState, depSet);
    }
    if (prevAtomState && isEqualAtomValue(prevAtomState, nextAtomState) && prevAtomState.d === nextAtomState.d) {
      return prevAtomState;
    }
    setAtomState(atom, nextAtomState);
    return nextAtomState;
  };
  const setAtomError = (atom, error, depSet) => {
    const prevAtomState = getAtomState(atom);
    const nextAtomState = {
      d: (prevAtomState == null ? void 0 : prevAtomState.d) || /* @__PURE__ */ new Map(),
      e: error
    };
    if (depSet) {
      updateDependencies(atom, nextAtomState, depSet);
    }
    if (prevAtomState && isEqualAtomError(prevAtomState, nextAtomState) && prevAtomState.d === nextAtomState.d) {
      return prevAtomState;
    }
    setAtomState(atom, nextAtomState);
    return nextAtomState;
  };
  const readAtomState = (atom) => {
    const atomState = getAtomState(atom);
    if (atomState) {
      atomState.d.forEach((_, a) => {
        if (a !== atom && !mountedMap.has(a)) {
          readAtomState(a);
        }
      });
      if (Array.from(atomState.d).every(
        ([a, s]) => a === atom || getAtomState(a) === s
      )) {
        return atomState;
      }
    }
    const depSet = /* @__PURE__ */ new Set();
    let isSync = true;
    const getter = (a) => {
      depSet.add(a);
      if (a === atom) {
        const aState2 = getAtomState(a);
        if (aState2) {
          return returnAtomValue(aState2);
        }
        if (hasInitialValue(a)) {
          return a.init;
        }
        throw new Error("no atom init");
      }
      const aState = readAtomState(a);
      return returnAtomValue(aState);
    };
    let controller;
    let setSelf;
    const options = {
      get signal() {
        if (!controller) {
          controller = new AbortController();
        }
        return controller.signal;
      },
      get setSelf() {
        if ( true && !isActuallyWritableAtom(atom)) {
          console.warn("setSelf function cannot be used with read-only atom");
        }
        if (!setSelf && isActuallyWritableAtom(atom)) {
          setSelf = (...args) => {
            if ( true && isSync) {
              console.warn("setSelf function cannot be called in sync");
            }
            if (!isSync) {
              return writeAtom(atom, ...args);
            }
          };
        }
        return setSelf;
      }
    };
    try {
      const value = atom.read(getter, options);
      if (value instanceof Promise) {
        let continuePromise;
        const promise = new Promise((resolve, reject) => {
          let settled = false;
          value.then(
            (v) => {
              if (!settled) {
                resolvePromise(promise, v);
                resolve(v);
              }
            },
            (e) => {
              if (!settled) {
                rejectPromise(promise, e);
                reject(e);
              }
            }
          ).finally(() => {
            if (!settled) {
              settled = true;
              setAtomValue(atom, promise, depSet);
            }
          });
          continuePromise = (next) => {
            if (!settled) {
              settled = true;
              next.then(
                (v) => resolvePromise(promise, v),
                (e) => rejectPromise(promise, e)
              );
              resolve(next);
            }
          };
        });
        promise.status = "pending";
        registerCancelPromise(promise, (next) => {
          if (next) {
            continuePromise(next);
          }
          controller == null ? void 0 : controller.abort();
        });
        return setAtomValue(atom, promise, depSet);
      }
      return setAtomValue(atom, value, depSet);
    } catch (error) {
      return setAtomError(atom, error, depSet);
    } finally {
      isSync = false;
    }
  };
  const readAtom = (atom) => returnAtomValue(readAtomState(atom));
  const addAtom = (atom) => {
    let mounted = mountedMap.get(atom);
    if (!mounted) {
      mounted = mountAtom(atom);
    }
    return mounted;
  };
  const canUnmountAtom = (atom, mounted) => !mounted.l.size && (!mounted.t.size || mounted.t.size === 1 && mounted.t.has(atom));
  const delAtom = (atom) => {
    const mounted = mountedMap.get(atom);
    if (mounted && canUnmountAtom(atom, mounted)) {
      unmountAtom(atom);
    }
  };
  const recomputeDependents = (atom) => {
    const mounted = mountedMap.get(atom);
    mounted == null ? void 0 : mounted.t.forEach((dependent) => {
      if (dependent !== atom) {
        const prevAtomState = getAtomState(dependent);
        const nextAtomState = readAtomState(dependent);
        if (!prevAtomState || !isEqualAtomValue(prevAtomState, nextAtomState)) {
          recomputeDependents(dependent);
        }
      }
    });
  };
  const writeAtomState = (atom, ...args) => {
    let isSync = true;
    const getter = (a) => returnAtomValue(readAtomState(a));
    const setter = (a, ...args2) => {
      let r;
      if (a === atom) {
        if (!hasInitialValue(a)) {
          throw new Error("atom not writable");
        }
        const prevAtomState = getAtomState(a);
        const nextAtomState = setAtomValue(a, args2[0]);
        if (!prevAtomState || !isEqualAtomValue(prevAtomState, nextAtomState)) {
          recomputeDependents(a);
        }
      } else {
        r = writeAtomState(a, ...args2);
      }
      if (!isSync) {
        flushPending();
      }
      return r;
    };
    const result = atom.write(getter, setter, ...args);
    isSync = false;
    return result;
  };
  const writeAtom = (atom, ...args) => {
    const result = writeAtomState(atom, ...args);
    flushPending();
    return result;
  };
  const mountAtom = (atom, initialDependent) => {
    const mounted = {
      t: new Set(initialDependent && [initialDependent]),
      l: /* @__PURE__ */ new Set()
    };
    mountedMap.set(atom, mounted);
    if (true) {
      mountedAtoms.add(atom);
    }
    readAtomState(atom).d.forEach((_, a) => {
      const aMounted = mountedMap.get(a);
      if (aMounted) {
        aMounted.t.add(atom);
      } else {
        if (a !== atom) {
          mountAtom(a, atom);
        }
      }
    });
    readAtomState(atom);
    if (isActuallyWritableAtom(atom) && atom.onMount) {
      const onUnmount = atom.onMount((...args) => writeAtom(atom, ...args));
      if (onUnmount) {
        mounted.u = onUnmount;
      }
    }
    return mounted;
  };
  const unmountAtom = (atom) => {
    var _a;
    const onUnmount = (_a = mountedMap.get(atom)) == null ? void 0 : _a.u;
    if (onUnmount) {
      onUnmount();
    }
    mountedMap.delete(atom);
    if (true) {
      mountedAtoms.delete(atom);
    }
    const atomState = getAtomState(atom);
    if (atomState) {
      if (hasPromiseAtomValue(atomState)) {
        cancelPromise(atomState.v);
      }
      atomState.d.forEach((_, a) => {
        if (a !== atom) {
          const mounted = mountedMap.get(a);
          if (mounted) {
            mounted.t.delete(atom);
            if (canUnmountAtom(a, mounted)) {
              unmountAtom(a);
            }
          }
        }
      });
    } else if (true) {
      console.warn("[Bug] could not find atom state to unmount", atom);
    }
  };
  const mountDependencies = (atom, atomState, prevDependencies) => {
    const depSet = new Set(atomState.d.keys());
    prevDependencies == null ? void 0 : prevDependencies.forEach((_, a) => {
      if (depSet.has(a)) {
        depSet.delete(a);
        return;
      }
      const mounted = mountedMap.get(a);
      if (mounted) {
        mounted.t.delete(atom);
        if (canUnmountAtom(a, mounted)) {
          unmountAtom(a);
        }
      }
    });
    depSet.forEach((a) => {
      const mounted = mountedMap.get(a);
      if (mounted) {
        mounted.t.add(atom);
      } else if (mountedMap.has(atom)) {
        mountAtom(a, atom);
      }
    });
  };
  const flushPending = () => {
    while (pendingMap.size) {
      const pending = Array.from(pendingMap);
      pendingMap.clear();
      pending.forEach(([atom, prevAtomState]) => {
        const atomState = getAtomState(atom);
        if (atomState) {
          if (atomState.d !== (prevAtomState == null ? void 0 : prevAtomState.d)) {
            mountDependencies(atom, atomState, prevAtomState == null ? void 0 : prevAtomState.d);
          }
          const mounted = mountedMap.get(atom);
          if (mounted && !// TODO This seems pretty hacky. Hope to fix it.
          // Maybe we could `mountDependencies` in `setAtomState`?
          (prevAtomState && !hasPromiseAtomValue(prevAtomState) && (isEqualAtomValue(prevAtomState, atomState) || isEqualAtomError(prevAtomState, atomState)))) {
            mounted.l.forEach((listener) => listener());
          }
        } else if (true) {
          console.warn("[Bug] no atom state to flush");
        }
      });
    }
    if (true) {
      stateListeners.forEach((l) => l());
    }
  };
  const subscribeAtom = (atom, listener) => {
    const mounted = addAtom(atom);
    flushPending();
    const listeners = mounted.l;
    listeners.add(listener);
    return () => {
      listeners.delete(listener);
      delAtom(atom);
    };
  };
  if (true) {
    return {
      get: readAtom,
      set: writeAtom,
      sub: subscribeAtom,
      // store dev methods (these are tentative and subject to change)
      dev_subscribe_state: (l) => {
        stateListeners.add(l);
        return () => {
          stateListeners.delete(l);
        };
      },
      dev_get_mounted_atoms: () => mountedAtoms.values(),
      dev_get_atom_state: (a) => atomStateMap.get(a),
      dev_get_mounted: (a) => mountedMap.get(a),
      dev_restore_atoms: (values) => {
        for (const [atom, value] of values) {
          if (hasInitialValue(atom)) {
            setAtomValue(atom, value);
            recomputeDependents(atom);
          }
        }
        flushPending();
      }
    };
  }
  return {
    get: readAtom,
    set: writeAtom,
    sub: subscribeAtom
  };
};
let defaultStore;
const getDefaultStore = () => {
  if (!defaultStore) {
    defaultStore = createStore();
  }
  return defaultStore;
};



;// CONCATENATED MODULE: ../../.yarn/__virtual__/jotai-virtual-bf09d46f21/0/cache/jotai-npm-1.13.1-1a4b1cff07-bc1f88ec1d.zip/node_modules/jotai/esm/index.mjs



const SUSPENSE_PROMISE = Symbol();
const isSuspensePromise = (promise) => !!promise[SUSPENSE_PROMISE];
const isSuspensePromiseAlreadyCancelled = (suspensePromise) => !suspensePromise[SUSPENSE_PROMISE].c;
const cancelSuspensePromise = (suspensePromise) => {
  var _a;
  const { b: basePromise, c: cancelPromise } = suspensePromise[SUSPENSE_PROMISE];
  if (cancelPromise) {
    cancelPromise();
    (_a = promiseAbortMap.get(basePromise)) == null ? void 0 : _a();
  }
};
const isEqualSuspensePromise = (oldSuspensePromise, newSuspensePromise) => {
  const oldOriginalPromise = oldSuspensePromise[SUSPENSE_PROMISE].o;
  const newOriginalPromise = newSuspensePromise[SUSPENSE_PROMISE].o;
  return oldOriginalPromise === newOriginalPromise || oldSuspensePromise === newOriginalPromise || isSuspensePromise(oldOriginalPromise) && isEqualSuspensePromise(oldOriginalPromise, newSuspensePromise);
};
const createSuspensePromise = (basePromise, promise) => {
  const suspensePromiseExtra = {
    b: basePromise,
    o: promise,
    c: null
  };
  const suspensePromise = new Promise((resolve) => {
    suspensePromiseExtra.c = () => {
      suspensePromiseExtra.c = null;
      resolve();
    };
    promise.finally(suspensePromiseExtra.c);
  });
  suspensePromise[SUSPENSE_PROMISE] = suspensePromiseExtra;
  return suspensePromise;
};
const copySuspensePromise = (suspensePromise) => createSuspensePromise(
  suspensePromise[SUSPENSE_PROMISE].b,
  suspensePromise[SUSPENSE_PROMISE].o
);
const promiseAbortMap = /* @__PURE__ */ new WeakMap();
const registerPromiseAbort = (basePromise, abort) => {
  promiseAbortMap.set(basePromise, abort);
};

const esm_hasInitialValue = (atom) => "init" in atom;
const READ_ATOM = "r";
const WRITE_ATOM = "w";
const COMMIT_ATOM = "c";
const SUBSCRIBE_ATOM = "s";
const RESTORE_ATOMS = "h";
const DEV_SUBSCRIBE_STATE = "n";
const DEV_GET_MOUNTED_ATOMS = "l";
const DEV_GET_ATOM_STATE = "a";
const DEV_GET_MOUNTED = "m";
const esm_createStore = (initialValues) => {
  const committedAtomStateMap = /* @__PURE__ */ new WeakMap();
  const mountedMap = /* @__PURE__ */ new WeakMap();
  const pendingMap = /* @__PURE__ */ new Map();
  let stateListeners;
  let mountedAtoms;
  if (true) {
    stateListeners = /* @__PURE__ */ new Set();
    mountedAtoms = /* @__PURE__ */ new Set();
  }
  if (initialValues) {
    for (const [atom, value] of initialValues) {
      const atomState = {
        v: value,
        r: 0,
        y: true,
        // not invalidated
        d: /* @__PURE__ */ new Map()
      };
      if (true) {
        Object.freeze(atomState);
        if (!esm_hasInitialValue(atom)) {
          console.warn(
            "Found initial value for derived atom which can cause unexpected behavior",
            atom
          );
        }
      }
      committedAtomStateMap.set(atom, atomState);
    }
  }
  const suspensePromiseCacheMap = /* @__PURE__ */ new WeakMap();
  const addSuspensePromiseToCache = (version, atom, suspensePromise) => {
    let cache = suspensePromiseCacheMap.get(atom);
    if (!cache) {
      cache = /* @__PURE__ */ new Map();
      suspensePromiseCacheMap.set(atom, cache);
    }
    suspensePromise.then(() => {
      if (cache.get(version) === suspensePromise) {
        cache.delete(version);
        if (!cache.size) {
          suspensePromiseCacheMap.delete(atom);
        }
      }
    });
    cache.set(version, suspensePromise);
  };
  const cancelAllSuspensePromiseInCache = (atom) => {
    const versionSet = /* @__PURE__ */ new Set();
    const cache = suspensePromiseCacheMap.get(atom);
    if (cache) {
      suspensePromiseCacheMap.delete(atom);
      cache.forEach((suspensePromise, version) => {
        cancelSuspensePromise(suspensePromise);
        versionSet.add(version);
      });
    }
    return versionSet;
  };
  const versionedAtomStateMapMap = /* @__PURE__ */ new WeakMap();
  const getVersionedAtomStateMap = (version) => {
    let versionedAtomStateMap = versionedAtomStateMapMap.get(version);
    if (!versionedAtomStateMap) {
      versionedAtomStateMap = /* @__PURE__ */ new Map();
      versionedAtomStateMapMap.set(version, versionedAtomStateMap);
    }
    return versionedAtomStateMap;
  };
  const getAtomState = (version, atom) => {
    if (version) {
      const versionedAtomStateMap = getVersionedAtomStateMap(version);
      let atomState = versionedAtomStateMap.get(atom);
      if (!atomState) {
        atomState = getAtomState(version.p, atom);
        if (atomState && "p" in atomState && isSuspensePromiseAlreadyCancelled(atomState.p)) {
          atomState = void 0;
        }
        if (atomState) {
          versionedAtomStateMap.set(atom, atomState);
        }
      }
      return atomState;
    }
    return committedAtomStateMap.get(atom);
  };
  const setAtomState = (version, atom, atomState) => {
    if (true) {
      Object.freeze(atomState);
    }
    if (version) {
      const versionedAtomStateMap = getVersionedAtomStateMap(version);
      versionedAtomStateMap.set(atom, atomState);
    } else {
      const prevAtomState = committedAtomStateMap.get(atom);
      committedAtomStateMap.set(atom, atomState);
      if (!pendingMap.has(atom)) {
        pendingMap.set(atom, prevAtomState);
      }
    }
  };
  const createReadDependencies = (version, prevReadDependencies = /* @__PURE__ */ new Map(), dependencies) => {
    if (!dependencies) {
      return prevReadDependencies;
    }
    const readDependencies = /* @__PURE__ */ new Map();
    let changed = false;
    dependencies.forEach((atom) => {
      var _a;
      const revision = ((_a = getAtomState(version, atom)) == null ? void 0 : _a.r) || 0;
      readDependencies.set(atom, revision);
      if (prevReadDependencies.get(atom) !== revision) {
        changed = true;
      }
    });
    if (prevReadDependencies.size === readDependencies.size && !changed) {
      return prevReadDependencies;
    }
    return readDependencies;
  };
  const setAtomValue = (version, atom, value, dependencies, suspensePromise) => {
    const atomState = getAtomState(version, atom);
    if (atomState) {
      if (suspensePromise && (!("p" in atomState) || !isEqualSuspensePromise(atomState.p, suspensePromise))) {
        return atomState;
      }
      if ("p" in atomState) {
        cancelSuspensePromise(atomState.p);
      }
    }
    const nextAtomState = {
      v: value,
      r: (atomState == null ? void 0 : atomState.r) || 0,
      y: true,
      // not invalidated
      d: createReadDependencies(version, atomState == null ? void 0 : atomState.d, dependencies)
    };
    let changed = !(atomState == null ? void 0 : atomState.y);
    if (!atomState || !("v" in atomState) || // new value, or
    !Object.is(atomState.v, value)) {
      changed = true;
      ++nextAtomState.r;
      if (nextAtomState.d.has(atom)) {
        nextAtomState.d = new Map(nextAtomState.d).set(atom, nextAtomState.r);
      }
    } else if (nextAtomState.d !== atomState.d && (nextAtomState.d.size !== atomState.d.size || !Array.from(nextAtomState.d.keys()).every((a) => atomState.d.has(a)))) {
      changed = true;
      Promise.resolve().then(() => {
        flushPending(version);
      });
    }
    if (atomState && !changed) {
      return atomState;
    }
    setAtomState(version, atom, nextAtomState);
    return nextAtomState;
  };
  const setAtomReadError = (version, atom, error, dependencies, suspensePromise) => {
    const atomState = getAtomState(version, atom);
    if (atomState) {
      if (suspensePromise && (!("p" in atomState) || !isEqualSuspensePromise(atomState.p, suspensePromise))) {
        return atomState;
      }
      if ("p" in atomState) {
        cancelSuspensePromise(atomState.p);
      }
    }
    const nextAtomState = {
      e: error,
      // set read error
      r: ((atomState == null ? void 0 : atomState.r) || 0) + 1,
      y: true,
      // not invalidated
      d: createReadDependencies(version, atomState == null ? void 0 : atomState.d, dependencies)
    };
    setAtomState(version, atom, nextAtomState);
    return nextAtomState;
  };
  const setAtomSuspensePromise = (version, atom, suspensePromise, dependencies) => {
    const atomState = getAtomState(version, atom);
    if (atomState && "p" in atomState) {
      if (isEqualSuspensePromise(atomState.p, suspensePromise) && !isSuspensePromiseAlreadyCancelled(atomState.p)) {
        if (!atomState.y) {
          return { ...atomState, y: true };
        }
        return atomState;
      }
      cancelSuspensePromise(atomState.p);
    }
    addSuspensePromiseToCache(version, atom, suspensePromise);
    const nextAtomState = {
      p: suspensePromise,
      r: ((atomState == null ? void 0 : atomState.r) || 0) + 1,
      y: true,
      // not invalidated
      d: createReadDependencies(version, atomState == null ? void 0 : atomState.d, dependencies)
    };
    setAtomState(version, atom, nextAtomState);
    return nextAtomState;
  };
  const setAtomPromiseOrValue = (version, atom, promiseOrValue, dependencies) => {
    if (promiseOrValue instanceof Promise) {
      const suspensePromise = createSuspensePromise(
        promiseOrValue,
        promiseOrValue.then((value) => {
          setAtomValue(version, atom, value, dependencies, suspensePromise);
        }).catch((e) => {
          if (e instanceof Promise) {
            if (isSuspensePromise(e)) {
              return e.then(() => {
                readAtomState(version, atom, true);
              });
            }
            return e;
          }
          setAtomReadError(version, atom, e, dependencies, suspensePromise);
        })
      );
      return setAtomSuspensePromise(
        version,
        atom,
        suspensePromise,
        dependencies
      );
    }
    return setAtomValue(
      version,
      atom,
      promiseOrValue,
      dependencies
    );
  };
  const setAtomInvalidated = (version, atom) => {
    const atomState = getAtomState(version, atom);
    if (atomState) {
      const nextAtomState = {
        ...atomState,
        // copy everything
        y: false
        // invalidated
      };
      setAtomState(version, atom, nextAtomState);
    } else if (true) {
      console.warn("[Bug] could not invalidate non existing atom", atom);
    }
  };
  const readAtomState = (version, atom, force) => {
    if (!force) {
      const atomState = getAtomState(version, atom);
      if (atomState) {
        if (atomState.y && // not invalidated
        "p" in atomState && !isSuspensePromiseAlreadyCancelled(atomState.p)) {
          return atomState;
        }
        atomState.d.forEach((_, a) => {
          if (a !== atom) {
            if (!mountedMap.has(a)) {
              readAtomState(version, a);
            } else {
              const aState = getAtomState(version, a);
              if (aState && !aState.y) {
                readAtomState(version, a);
              }
            }
          }
        });
        if (Array.from(atomState.d).every(([a, r]) => {
          const aState = getAtomState(version, a);
          return aState && !("p" in aState) && // has no suspense promise
          aState.r === r;
        })) {
          if (!atomState.y) {
            return { ...atomState, y: true };
          }
          return atomState;
        }
      }
    }
    const dependencies = /* @__PURE__ */ new Set();
    try {
      const promiseOrValue = atom.read((a) => {
        dependencies.add(a);
        const aState = a === atom ? getAtomState(version, a) : readAtomState(version, a);
        if (aState) {
          if ("e" in aState) {
            throw aState.e;
          }
          if ("p" in aState) {
            throw aState.p;
          }
          return aState.v;
        }
        if (esm_hasInitialValue(a)) {
          return a.init;
        }
        throw new Error("no atom init");
      });
      return setAtomPromiseOrValue(version, atom, promiseOrValue, dependencies);
    } catch (errorOrPromise) {
      if (errorOrPromise instanceof Promise) {
        const suspensePromise = isSuspensePromise(errorOrPromise) && isSuspensePromiseAlreadyCancelled(errorOrPromise) ? copySuspensePromise(errorOrPromise) : createSuspensePromise(errorOrPromise, errorOrPromise);
        return setAtomSuspensePromise(
          version,
          atom,
          suspensePromise,
          dependencies
        );
      }
      return setAtomReadError(version, atom, errorOrPromise, dependencies);
    }
  };
  const readAtom = (readingAtom, version) => {
    const atomState = readAtomState(version, readingAtom);
    return atomState;
  };
  const addAtom = (version, addingAtom) => {
    let mounted = mountedMap.get(addingAtom);
    if (!mounted) {
      mounted = mountAtom(version, addingAtom);
    }
    return mounted;
  };
  const canUnmountAtom = (atom, mounted) => !mounted.l.size && (!mounted.t.size || mounted.t.size === 1 && mounted.t.has(atom));
  const delAtom = (version, deletingAtom) => {
    const mounted = mountedMap.get(deletingAtom);
    if (mounted && canUnmountAtom(deletingAtom, mounted)) {
      unmountAtom(version, deletingAtom);
    }
  };
  const invalidateDependents = (version, atom) => {
    const mounted = mountedMap.get(atom);
    mounted == null ? void 0 : mounted.t.forEach((dependent) => {
      if (dependent !== atom) {
        setAtomInvalidated(version, dependent);
        invalidateDependents(version, dependent);
      }
    });
  };
  const writeAtomState = (version, atom, update) => {
    let isSync = true;
    const writeGetter = (a, options) => {
      const aState = readAtomState(version, a);
      if ("e" in aState) {
        throw aState.e;
      }
      if ("p" in aState) {
        if (options == null ? void 0 : options.unstable_promise) {
          return aState.p.then(() => {
            const s = getAtomState(version, a);
            if (s && "p" in s && s.p === aState.p) {
              return new Promise((resolve) => setTimeout(resolve)).then(
                () => writeGetter(a, options)
              );
            }
            return writeGetter(a, options);
          });
        }
        if (true) {
          console.info(
            "Reading pending atom state in write operation. We throw a promise for now.",
            a
          );
        }
        throw aState.p;
      }
      if ("v" in aState) {
        return aState.v;
      }
      if (true) {
        console.warn(
          "[Bug] no value found while reading atom in write operation. This is probably a bug.",
          a
        );
      }
      throw new Error("no value found");
    };
    const setter = (a, v) => {
      let promiseOrVoid2;
      if (a === atom) {
        if (!esm_hasInitialValue(a)) {
          throw new Error("atom not writable");
        }
        const versionSet = cancelAllSuspensePromiseInCache(a);
        versionSet.forEach((cancelledVersion) => {
          if (cancelledVersion !== version) {
            setAtomPromiseOrValue(cancelledVersion, a, v);
          }
        });
        const prevAtomState = getAtomState(version, a);
        const nextAtomState = setAtomPromiseOrValue(version, a, v);
        if (prevAtomState !== nextAtomState) {
          invalidateDependents(version, a);
        }
      } else {
        promiseOrVoid2 = writeAtomState(version, a, v);
      }
      if (!isSync) {
        flushPending(version);
      }
      return promiseOrVoid2;
    };
    const promiseOrVoid = atom.write(writeGetter, setter, update);
    isSync = false;
    return promiseOrVoid;
  };
  const writeAtom = (writingAtom, update, version) => {
    const promiseOrVoid = writeAtomState(version, writingAtom, update);
    flushPending(version);
    return promiseOrVoid;
  };
  const isActuallyWritableAtom = (atom) => !!atom.write;
  const mountAtom = (version, atom, initialDependent) => {
    const mounted = {
      t: new Set(initialDependent && [initialDependent]),
      l: /* @__PURE__ */ new Set()
    };
    mountedMap.set(atom, mounted);
    if (true) {
      mountedAtoms.add(atom);
    }
    const atomState = readAtomState(void 0, atom);
    atomState.d.forEach((_, a) => {
      const aMounted = mountedMap.get(a);
      if (aMounted) {
        aMounted.t.add(atom);
      } else {
        if (a !== atom) {
          mountAtom(version, a, atom);
        }
      }
    });
    if (isActuallyWritableAtom(atom) && atom.onMount) {
      const setAtom = (update) => writeAtom(atom, update, version);
      const onUnmount = atom.onMount(setAtom);
      version = void 0;
      if (onUnmount) {
        mounted.u = onUnmount;
      }
    }
    return mounted;
  };
  const unmountAtom = (version, atom) => {
    var _a;
    const onUnmount = (_a = mountedMap.get(atom)) == null ? void 0 : _a.u;
    if (onUnmount) {
      onUnmount();
    }
    mountedMap.delete(atom);
    if (true) {
      mountedAtoms.delete(atom);
    }
    const atomState = getAtomState(version, atom);
    if (atomState) {
      if ("p" in atomState) {
        cancelSuspensePromise(atomState.p);
      }
      atomState.d.forEach((_, a) => {
        if (a !== atom) {
          const mounted = mountedMap.get(a);
          if (mounted) {
            mounted.t.delete(atom);
            if (canUnmountAtom(a, mounted)) {
              unmountAtom(version, a);
            }
          }
        }
      });
    } else if (true) {
      console.warn("[Bug] could not find atom state to unmount", atom);
    }
  };
  const mountDependencies = (version, atom, atomState, prevReadDependencies) => {
    const dependencies = new Set(atomState.d.keys());
    prevReadDependencies == null ? void 0 : prevReadDependencies.forEach((_, a) => {
      if (dependencies.has(a)) {
        dependencies.delete(a);
        return;
      }
      const mounted = mountedMap.get(a);
      if (mounted) {
        mounted.t.delete(atom);
        if (canUnmountAtom(a, mounted)) {
          unmountAtom(version, a);
        }
      }
    });
    dependencies.forEach((a) => {
      const mounted = mountedMap.get(a);
      if (mounted) {
        mounted.t.add(atom);
      } else if (mountedMap.has(atom)) {
        mountAtom(version, a, atom);
      }
    });
  };
  const flushPending = (version) => {
    if (version) {
      const versionedAtomStateMap = getVersionedAtomStateMap(version);
      versionedAtomStateMap.forEach((atomState, atom) => {
        const committedAtomState = committedAtomStateMap.get(atom);
        if (atomState !== committedAtomState) {
          const mounted = mountedMap.get(atom);
          mounted == null ? void 0 : mounted.l.forEach((listener) => listener(version));
        }
      });
      return;
    }
    while (pendingMap.size) {
      const pending = Array.from(pendingMap);
      pendingMap.clear();
      pending.forEach(([atom, prevAtomState]) => {
        const atomState = getAtomState(void 0, atom);
        if (atomState && atomState.d !== (prevAtomState == null ? void 0 : prevAtomState.d)) {
          mountDependencies(void 0, atom, atomState, prevAtomState == null ? void 0 : prevAtomState.d);
        }
        if (prevAtomState && !prevAtomState.y && // invalidated
        (atomState == null ? void 0 : atomState.y)) {
          return;
        }
        const mounted = mountedMap.get(atom);
        mounted == null ? void 0 : mounted.l.forEach((listener) => listener());
      });
    }
    if (true) {
      stateListeners.forEach((l) => l());
    }
  };
  const commitVersionedAtomStateMap = (version) => {
    const versionedAtomStateMap = getVersionedAtomStateMap(version);
    versionedAtomStateMap.forEach((atomState, atom) => {
      const prevAtomState = committedAtomStateMap.get(atom);
      if (!prevAtomState || atomState.r > prevAtomState.r || atomState.y !== prevAtomState.y || atomState.r === prevAtomState.r && atomState.d !== prevAtomState.d) {
        committedAtomStateMap.set(atom, atomState);
        if (atomState.d !== (prevAtomState == null ? void 0 : prevAtomState.d)) {
          mountDependencies(version, atom, atomState, prevAtomState == null ? void 0 : prevAtomState.d);
        }
      }
    });
  };
  const commitAtom = (_atom, version) => {
    if (version) {
      commitVersionedAtomStateMap(version);
    }
    flushPending(void 0);
  };
  const subscribeAtom = (atom, callback, version) => {
    const mounted = addAtom(version, atom);
    const listeners = mounted.l;
    listeners.add(callback);
    return () => {
      listeners.delete(callback);
      delAtom(version, atom);
    };
  };
  const restoreAtoms = (values, version) => {
    for (const [atom, value] of values) {
      if (esm_hasInitialValue(atom)) {
        setAtomPromiseOrValue(version, atom, value);
        invalidateDependents(version, atom);
      }
    }
    flushPending(version);
  };
  if (true) {
    return {
      [READ_ATOM]: readAtom,
      [WRITE_ATOM]: writeAtom,
      [COMMIT_ATOM]: commitAtom,
      [SUBSCRIBE_ATOM]: subscribeAtom,
      [RESTORE_ATOMS]: restoreAtoms,
      [DEV_SUBSCRIBE_STATE]: (l) => {
        stateListeners.add(l);
        return () => {
          stateListeners.delete(l);
        };
      },
      [DEV_GET_MOUNTED_ATOMS]: () => mountedAtoms.values(),
      [DEV_GET_ATOM_STATE]: (a) => committedAtomStateMap.get(a),
      [DEV_GET_MOUNTED]: (a) => mountedMap.get(a)
    };
  }
  return {
    [READ_ATOM]: readAtom,
    [WRITE_ATOM]: writeAtom,
    [COMMIT_ATOM]: commitAtom,
    [SUBSCRIBE_ATOM]: subscribeAtom,
    [RESTORE_ATOMS]: restoreAtoms
  };
};
const createStoreForExport = (initialValues) => {
  const store = esm_createStore(initialValues);
  const get = (atom) => {
    const atomState = store[READ_ATOM](atom);
    if ("e" in atomState) {
      throw atomState.e;
    }
    if ("p" in atomState) {
      return void 0;
    }
    return atomState.v;
  };
  const asyncGet = (atom) => new Promise((resolve, reject) => {
    const atomState = store[READ_ATOM](atom);
    if ("e" in atomState) {
      reject(atomState.e);
    } else if ("p" in atomState) {
      resolve(atomState.p.then(() => asyncGet(atom)));
    } else {
      resolve(atomState.v);
    }
  });
  const set = (atom, update) => store[WRITE_ATOM](atom, update);
  const sub = (atom, callback) => store[SUBSCRIBE_ATOM](atom, callback);
  return {
    get,
    asyncGet,
    set,
    sub,
    SECRET_INTERNAL_store: store
  };
};

const createScopeContainer = (initialValues, unstable_createStore) => {
  const store = unstable_createStore ? unstable_createStore(initialValues).SECRET_INTERNAL_store : esm_createStore(initialValues);
  return { s: store };
};
const ScopeContextMap = /* @__PURE__ */ new Map();
const getScopeContext = (scope) => {
  if (!ScopeContextMap.has(scope)) {
    ScopeContextMap.set(scope, (0,react_.createContext)(createScopeContainer()));
  }
  return ScopeContextMap.get(scope);
};

const Provider = ({
  children,
  initialValues,
  scope,
  unstable_createStore,
  unstable_enableVersionedWrite
}) => {
  const [version, setVersion] = useState({});
  useEffect(() => {
    const scopeContainer = scopeContainerRef.current;
    if (scopeContainer.w) {
      scopeContainer.s[COMMIT_ATOM](null, version);
      delete version.p;
      scopeContainer.v = version;
    }
  }, [version]);
  const scopeContainerRef = useRef();
  if (!scopeContainerRef.current) {
    const scopeContainer = createScopeContainer(
      initialValues,
      unstable_createStore
    );
    if (unstable_enableVersionedWrite) {
      let retrying = 0;
      scopeContainer.w = (write) => {
        setVersion((parentVersion) => {
          const nextVersion = retrying ? parentVersion : { p: parentVersion };
          write(nextVersion);
          return nextVersion;
        });
      };
      scopeContainer.v = version;
      scopeContainer.r = (fn) => {
        ++retrying;
        fn();
        --retrying;
      };
    }
    scopeContainerRef.current = scopeContainer;
  }
  const ScopeContainerContext = getScopeContext(scope);
  return createElement(
    ScopeContainerContext.Provider,
    {
      value: scopeContainerRef.current
    },
    children
  );
};

function esm_atom(read, write) {
  return atom(read, write);
}

function useAtomValue(atom, scope) {
  const ScopeContext = getScopeContext(scope);
  const scopeContainer = (0,react_.useContext)(ScopeContext);
  const { s: store, v: versionFromProvider } = scopeContainer;
  const getAtomValue = (version2) => {
    const atomState = store[READ_ATOM](atom, version2);
    if ( true && !atomState.y) {
      throw new Error("should not be invalidated");
    }
    if ("e" in atomState) {
      throw atomState.e;
    }
    if ("p" in atomState) {
      throw atomState.p;
    }
    if ("v" in atomState) {
      return atomState.v;
    }
    throw new Error("no atom value");
  };
  const [[version, valueFromReducer, atomFromReducer], rerenderIfChanged] = (0,react_.useReducer)(
    (prev, nextVersion) => {
      const nextValue = getAtomValue(nextVersion);
      if (Object.is(prev[1], nextValue) && prev[2] === atom) {
        return prev;
      }
      return [nextVersion, nextValue, atom];
    },
    versionFromProvider,
    (initialVersion) => {
      const initialValue = getAtomValue(initialVersion);
      return [initialVersion, initialValue, atom];
    }
  );
  let value = valueFromReducer;
  if (atomFromReducer !== atom) {
    rerenderIfChanged(version);
    value = getAtomValue(version);
  }
  (0,react_.useEffect)(() => {
    const { v: versionFromProvider2 } = scopeContainer;
    if (versionFromProvider2) {
      store[COMMIT_ATOM](atom, versionFromProvider2);
    }
    const unsubscribe = store[SUBSCRIBE_ATOM](
      atom,
      rerenderIfChanged,
      versionFromProvider2
    );
    rerenderIfChanged(versionFromProvider2);
    return unsubscribe;
  }, [store, atom, scopeContainer]);
  (0,react_.useEffect)(() => {
    store[COMMIT_ATOM](atom, version);
  });
  (0,react_.useDebugValue)(value);
  return value;
}

function useSetAtom(atom, scope) {
  const ScopeContext = getScopeContext(scope);
  const { s: store, w: versionedWrite } = (0,react_.useContext)(ScopeContext);
  const setAtom = (0,react_.useCallback)(
    (update) => {
      if ( true && !("write" in atom)) {
        throw new Error("not writable atom");
      }
      const write = (version) => store[WRITE_ATOM](atom, update, version);
      return versionedWrite ? versionedWrite(write) : write();
    },
    [store, versionedWrite, atom]
  );
  return setAtom;
}

function useAtom(atom, scope) {
  if ("scope" in atom) {
    console.warn(
      "atom.scope is deprecated. Please do useAtom(atom, scope) instead."
    );
    scope = atom.scope;
  }
  return [
    useAtomValue(atom, scope),
    // We do wrong type assertion here, which results in throwing an error.
    useSetAtom(atom, scope)
  ];
}




/***/ })

};
;